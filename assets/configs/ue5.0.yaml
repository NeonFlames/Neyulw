name: UE 5.0
vars:
  data:
    name: Data Directory
    type: dir
    hint: Game/Game/, Yet Another Game/YAG/, UE5 Game/UG/
targets:
  Engine: '${data}/Config/UserEngine.ini'
presets:
  ULTRA:
    id: 1
    hint: Will probably harm your PC
    files:
      Engine:
        SystemSettings:
          Niagara.GPUSorting.UseMaxPrecision: 1
        /Script/Engine.RendererSettings:
          r.MaxQualityMode: 1
          r.AmbientOcclusion.Method: 1
          r.AmbientOcclusionMaxQuality: -100
          r.AOApplyToStaticIndirect: 1
          r.AOQuality: 2
          r.AOUseJitter: 1
          r.BasePassOutputsVelocity: 1
          r.BloomQuality: 5
          r.chaos.ReflectionCaptureStaticSceneOnly: 0
          r.D3D11.Depth24Bit: 0
          r.D3D12.Depth24Bit: 0
          r.DefaultBackBufferPixelFormat: 4
          r.DepthOfFieldQuality: 2
          r.DetailMode: 2
          r.DFFullResolution: 1
          r.DFShadowQuality: 3
          r.DOF.Gather.PostfilterMethod: 2
          r.DOF.Recombine.Quality: 2
          r.DOF.TemporalAAQuality: 1
          r.FastBlurThreshold: 15
          r.Filter.LoopMode: 2
          r.Filter.SizeScale: 2
          r.GBufferFormat: 5
          r.GPUSkin.Support16BitBoneIndex: 1
          r.GTAO.Downsample: 0
          r.GTAO.FilterWidth: 8
          r.HairStrands.DeepShadow.ShadowMaskKernelType: 4
          r.HairStrands.DeepShadow.SuperSampling: 1
          r.HFShadowQuality: 3
          r.HighQualityLightMaps: 1
          r.HZBOcclusion: 0
          r.LensFlareQuality: 3
          r.LightFunctionQuality: 3
          r.LightShaftAllowTAA: 1
          r.LightShaftQuality: 1
          r.MaxAnisotropy: 16
          r.MotionBlurScatter: 1
          r.MotionBlurSeparable: 1
          r.PostProcessingColorFormat: 1
          r.RefractionQuality: 3
          r.SceneColorFormat: 5
          r.SceneColorFringeQuality: 1
          r.ShadowQuality: 5
          r.SkyAtmosphere.LUT32: 1
          r.SkyAtmosphere.MultiScatteringLUT.HighQuality: 1
          r.SSGI.LeakFreeReprojection: 1
          r.SSR.HalfResSceneColor: 0
          r.SSS.HalfRes: 0
          r.Upscale.Quality: 5
  High:
    id: 2
    hint: Squeeze out extra visual quality
    files:
      Engine:
        SystemSettings:
          Niagara.GPUSorting.UseMaxPrecision: 1
        /Script/Engine.RendererSettings:
          r.AmbientOcclusion.Method: 1
          r.AOQuality: 2
          r.BloomQuality: 4
          r.D3D11.Depth24Bit: 0
          r.D3D12.Depth24Bit: 0
          r.DefaultBackBufferPixelFormat: 4
          r.DepthOfFieldQuality: 2
          r.DetailMode: 2
          r.DFFullResolution: 1
          r.DFShadowQuality: 3
          r.DOF.Gather.PostfilterMethod: 2
          r.DOF.Recombine.Quality: 2
          r.DOF.TemporalAAQuality: 1
          r.FastBlurThreshold: 12
          r.Filter.LoopMode: 1
          r.Filter.SizeScale: 1.5
          r.GBufferFormat: 3
          r.GPUSkin.Support16BitBoneIndex: 1
          r.GTAO.Downsample: 0
          r.GTAO.FilterWidth: 6
          r.HairStrands.DeepShadow.ShadowMaskKernelType: 3
          r.HFShadowQuality: 3
          r.HighQualityLightMaps: 1
          r.HZBOcclusion: 0
          r.LensFlareQuality: 3
          r.LightFunctionQuality: 3
          r.LightShaftAllowTAA: 1
          r.LightShaftQuality: 1
          r.MaxAnisotropy: 10
          r.MotionBlurSeparable: 1
          r.RefractionQuality: 3
          r.SceneColorFormat: 4
          r.SceneColorFringeQuality: 1
          r.ShadowQuality: 5
          r.SkyAtmosphere.LUT32: 1
          r.SkyAtmosphere.MultiScatteringLUT.HighQuality: 1
          r.SSR.HalfResSceneColor: 0
          r.SSS.HalfRes: 0
          r.Upscale.Quality: 4
  Medium:
    id: 3
    hint: Some minor tweaks for performance
    files:
      Engine:
        SystemSettings:
          D3D12.AdjustTexturePoolSizeBasedOnBudget: 1
        /Script/Engine.AnimationSettings:
          a.URO.Enable: 1
        /Script/Engine.RendererSettings:
          r.AmbientOcclusion.Method: 0
          r.AOQuality: 1
          r.BloomQuality: 3
          r.DefaultBackBufferPixelFormat: 3
          r.DepthOfField.MaxSize: 80
          r.DepthOfFieldQuality: 1
          r.DetailMode: 2
          r.DFFullResolution: 0
          r.DFShadowQuality: 2
          r.DOF.Gather.PostfilterMethod: 1
          r.DOF.Recombine.Quality: 2
          r.DOF.TemporalAAQuality: 1
          r.FastBlurThreshold: 7
          r.Filter.LoopMode: 0
          r.Filter.SizeScale: 0.9
          r.GBufferFormat: 1
          r.GTAO.Downsample: 1
          r.GTAO.FilterWidth: 5
          r.HairStrands.DeepShadow.ShadowMaskKernelType: 2
          r.HFShadowQuality: 2
          r.HZBOcclusion: 1
          r.LensFlareQuality: 2
          r.LightFunctionQuality: 2
          r.LightShaftAllowTAA: 1
          r.LightShaftQuality: 1
          r.MaxAnisotropy: 4
          r.RefractionQuality: 2
          r.SceneColorFormat: 3
          r.SceneColorFringeQuality: 1
          r.ShadowQuality: 3
          r.SSR.HalfResSceneColor: 1
          r.SSS.HalfRes: 1
          r.SSS.SampleSet: 1
          r.Upscale.Quality: 3
          r.UseFastIntersect: 1
  Low:
    id: 4
    hint: Lower some things without sacrificing too much
    files:
      Engine:
        SystemSettings:
          D3D12.AdjustTexturePoolSizeBasedOnBudget: 1
          foliage.MinLOD: 1
          FX.AllowCulling: 1
        /Script/Engine.AnimationSettings:
          a.URO.Enable: 1
        /Script/Engine.RendererSettings:
          r.AmbientOcclusion.Denoiser: 0
          r.AmbientOcclusion.Method: 0
          r.AmbientOcclusionMaxQuality: 50
          r.AmbientOcclusionMipLevelFactor: 0.75
          r.AOQuality: 1
          r.BloomQuality: 2
          r.DefaultBackBufferPixelFormat: 1
          r.DepthOfField.MaxSize: 60
          r.DepthOfFieldQuality: 1
          r.DetailMode: 1
          r.DFFullResolution: 0
          r.DFShadowQuality: 1
          r.DiscardUnusedQuality: 1
          r.DOF.Gather.PostfilterMethod: 1
          r.DOF.Gather.RingCount: 3
          r.DOF.Recombine.Quality: 1
          r.DOF.TemporalAAQuality: 0
          r.FastBlurThreshold: 5
          r.Filter.LoopMode: 0
          r.Filter.SizeScale: 0.8
          r.GBufferFormat: 1
          r.GTAO.Downsample: 1
          r.GTAO.FilterWidth: 4
          r.GTAO.Upsample: 0
          r.HairStrands.DeepShadow.ShadowMaskKernelType: 1
          r.HFShadowQuality: 1
          r.HZBOcclusion: 2
          r.LensFlareQuality: 1
          r.LightFunctionQuality: 1
          r.LightShaftAllowTAA: 0
          r.LightShaftQuality: 0
          r.MaxAnisotropy: 2
          r.Reflections.Denoiser: 0
          r.RefractionQuality: 2
          r.SceneColorFormat: 3
          r.SceneColorFringeQuality: 1
          r.ShadowQuality: 3
          r.SkyAtmosphere.FastSkyLUT: 1
          r.SSR.HalfResSceneColor: 1
          r.SSS.HalfRes: 1
          r.SSS.SampleSet: 1
          r.Upscale.Quality: 1
          r.UseFastIntersect: 1
          r.Vulkan.Depth24Bit: 1
  Very Low:
    id: 5
    hint: Sacrifice visual quality and effects
    options:
    files:
      Engine:
        SystemSettings:
          D3D12.AdjustTexturePoolSizeBasedOnBudget: 1
          foliage.MinLOD: 2
          FX.AllowCulling: 1
          grass.Enable: 0
        /Script/Engine.AnimationSettings:
          a.URO.Enable: 1
        /Script/Engine.RendererSettings:
          r.AmbientOcclusion.Denoiser: 0
          r.AmbientOcclusionMaxQuality: 40
          r.AmbientOcclusionMipLevelFactor: 0.9
          r.AOQuality: 1
          r.BloomQuality: 1
          r.D3D11.Depth24Bit: 1
          r.D3D12.Depth24Bit: 1
          r.DefaultBackBufferPixelFormat: 0
          r.DepthOfField.MaxSize: 30
          r.DepthOfFieldQuality: 1
          r.DetailMode: 1
          r.DFFullResolution: 0
          r.DFShadowQuality: 1
          r.DiscardUnusedQuality: 1
          r.DOF.Gather.PostfilterMethod: 0
          r.DOF.Gather.RingCount: 3
          r.DOF.Recombine.Quality: 1
          r.DOF.Scatter.BackgroundCompositing: 1
          r.DOF.TemporalAAQuality: 0
          r.EyeAdaptationQuality: 0
          r.FastBlurThreshold: 3
          r.Filter.LoopMode: 0
          r.Filter.SizeScale: 0.6
          r.GBufferFormat: 1
          r.GTAO.Downsample: 1
          r.GTAO.FilterWidth: 2
          r.GTAO.Upsample: 0
          r.HairStrands.DeepShadow.ShadowMaskKernelType: 1
          r.HairStrands.RectLightingOptim: 1
          r.HFShadowQuality: 1
          r.HZBOcclusion: 2
          r.LensFlareQuality: 1
          r.LightFunctionQuality: 1
          r.LightShaftAllowTAA: 0
          r.LightShaftQuality: 0
          r.MaxAnisotropy: 2
          r.MotionBlurQuality: 0
          r.RayTracing: 0
          r.Reflections.Denoiser: 0
          r.RefractionQuality: 1
          r.SceneColorFormat: 1
          r.SceneColorFringeQuality: 0
          r.SeparateTranslucency: 0
          r.Shaders.FastMath: 1
          r.ShadowQuality: 2
          r.SkyAtmosphere.FastSkyLUT: 1
          r.SSGI.Quality: 0
          r.SSR.HalfResSceneColor: 1
          r.SSS.HalfRes: 1
          r.SSS.SampleSet: 0
          r.Upscale.Quality: 1
          r.UseFastIntersect: 1
          r.VT.EnableLossyCompressLightmaps: 1
          r.Vulkan.Depth24Bit: 1
  Potato:
    id: 6
    hint: Sacrifice everything
    options:
    files:
      Engine:
        SystemSettings:
          sg.AntiAliasingQuality: 0
          sg.EffectsQuality: 0
          sg.FoliageQuality: 0
          sg.PostProcessQuality: 0
          sg.ShadingQuality: 0
          sg.ShadowQuality: 0
          sg.TextureQuality: 0
          D3D12.AdjustTexturePoolSizeBasedOnBudget: 1
          foliage.DensityScale: 0
          foliage.MinLOD: 3
          FX.AllowCulling: 1
          fx.Niagara.QualityLevel: 0
          grass.Enable: 0
          landscape.Optim: 1
        /Script/Engine.AnimationSettings:
          a.StripFramesOnCompression: 1
          a.StripOddFramesWhenFrameStripping: 1
          a.URO.DisableInterpolation: 1
          a.URO.Enable: 1
        /Script/Engine.RendererSettings:
          r.AllowLandscapeShadows: 0
          r.AllowSimpleLights: 0
          r.AmbientOcclusionLevels: 0
          r.AOQuality: 0
          r.BloomQuality: 0
          r.ContactShadows: 0
          r.D3D.RemoveUnusedInterpolators: 1
          r.D3D11.Depth24Bit: 1
          r.D3D12.Depth24Bit: 1
          r.DefaultBackBufferPixelFormat: 0
          r.DepthOfFieldQuality: 0
          r.DetailMode: 0
          r.DFFullResolution: 0
          r.DFShadowQuality: 0
          r.DisableDistortion: 1
          r.DiscardUnusedQuality: 1
          r.DOF.Gather.PostfilterMethod: 0
          r.DOF.Gather.RingCount: 3
          r.DOF.Recombine.Quality: 0
          r.DOF.Scatter.BackgroundCompositing: 1
          r.DOF.TemporalAAQuality: 0
          r.EyeAdaptationQuality: 0
          r.FastBlurThreshold: 2
          r.Filter.LoopMode: 0
          r.Filter.SizeScale: 0.6
          r.Fog: 0
          r.GBufferFormat: 0
          r.GTAO.Downsample: 1
          r.GTAO.FilterWidth: 2
          r.GTAO.SpatialFilter: 0
          r.GTAO.TemporalFilter: 0
          r.GTAO.Upsample: 0
          r.HairStrands.DeepShadow.ShadowMaskKernelType: 0
          r.HairStrands.ScatterSceneLighting: 0
          r.HairStrands.RectLightingOptim: 1
          r.HFShadowQuality: 0
          r.HZBOcclusion: 2
          r.LensFlareQuality: 0
          r.LightFunctionQuality: 0
          r.LightShaftAllowTAA: 0
          r.LightShaftQuality: 0
          r.MaxAnisotropy: 1
          r.MotionBlurQuality: 0
          r.RayTracing: 0
          r.Reflections.Denoiser: 0
          r.RefractionQuality: 0
          r.SceneColorFormat: 0
          r.SceneColorFringeQuality: 0
          r.SeparateTranslucency: 0
          r.Shaders.FastMath: 1
          r.Shadow.Denoiser: 0
          r.ShadowQuality: 1
          r.SkyAtmosphere: 0
          r.SkyAtmosphere.FastSkyLUT: 1
          r.SSGI.Quality: 0
          r.SSR.HalfResSceneColor: 1
          r.SSS.HalfRes: 1
          r.SSS.SampleSet: 0
          r.Upscale.Quality: 0
          r.UseFastIntersect: 1
          r.VolumetricCloud: 0
          r.VolumetricFog: 0
          r.VT.EnableLossyCompressLightmaps: 1
          r.Vulkan.Depth24Bit: 1
  Anti-Stutter:
    id: 7
    hint: |-
      Reduce stuttering at the cost of disk and memory usage
      Forward subset forces forward shading and requires Shader Model 5 hardware
      Simple Forward subset is similiar to the Forward subset but only supports basic features, may not be supported depending on the game
    files:
      Engine:
        SystemSettings:
          niagara.CreateShadersOnLoad: 1
          D3D12.PSO.DiskCache: 1
          D3D12.PSO.DriverOptimizedDiskCache: 1
        /Script/Engine.RendererSettings:
          r.CreateShadersOnLoad: 1
          r.ShaderPipelineCache.AlwaysGenerateOSCache: 0
          r.ShaderPipelineCache.PreOptimizeEnabled: 1
          r.ShaderPipelineCache.PreCompileMask: -1
          r.ShaderPipelineCache.Enabled: 1
          r.ShaderPipelineCache.StartupMode: 1
          r.Vulkan.PipelineCacheLoad: 1
          r.ForceSceneHasDecals: 1
          r.ShaderComplexity.CacheShaders: 1
          r.TextureStreaming: 1

          r.Shaders.FastMath: 1
          # Only needed for the odd game that doesn't do this by default
          r.Shaders.Optimize: 1
    subsets:
      Forward:
        files:
          Engine:
            /Script/Engine.RendererSettings:
              r.ForwardShading: 1
      Simple Forward:
        files:
          Engine:
            /Script/Engine.RendererSettings:
              r.SimpleForwardShading: 1
  VSync:
    id: 8
    hint: Force VSync on
    files:
      Engine:
        /Script/Engine.RendererSettings:
          r.VSync: 1
  Unlimit Battery:
    id: 9
    hint: Disables performance limitation on battery powered devices
    files:
      Engine:
        /Script/Engine.RendererSettings:
          r.DontLimitOnBattery: 1
  DXC:
    id: 10
    hint: Forces DXC to be enabled for all backends
    files:
      Engine:
        /Script/Engine.RendererSettings:
          r.D3D.ForceDXC: 1
          r.OpenGL.ForceDXC: 1
          r.Shaders.ForceDXC: 1
    subsets:
      D3D Shader Conductor:
        files:
          Engine:
            /Script/Engine.RendererSettings:
              r.D3D.ForceShaderConductorDXCRewrite: 1
  Upscaling:
    id: 11
    hint: |-
      Edit r.ScreenPercentage and choose a subset to match your preferences
    files:
      Engine:
        /Script/Engine.RendererSettings:
          r.ScreenPercentage: 70
          r.Tonemapper.Sharpen: 1
          r.TemporalAA.HistoryScreenPercentage: 200
          r.TemporalAAPauseCorrect: 1
          r.TemporalAACatmullRom: 1
          r.TemporalAA.Quality: 2
          r.BasePassForceOutputsVelocity: 1
          r.VelocityOutputPass: 1
    subsets:
      TSR:
        files:
          Engine:
            /Script/Engine.RendererSettings:
              r.AntialiasingMethod: 4
              r.TSR.ShadingRejection.SpatialFilter: 2
              r.TSR.RejectionAntiAliasingQuality: 2
              r.TSR.History.ScreenPercentage: 200
              r.TSR.History.UpdateQuality: 2
              r.TSR.Velocity.WeightClampingSampleCount: 2
              r.TSR.Velocity.Extrapolation: 1
              r.TemporalAA.Upsampling: 0
              r.TemporalAA.Quality: 2
      TAA/Jitter:
        files:
          Engine:
            /Script/Engine.RendererSettings:
              r.AntiAliasingMethod: 2
              r.DefaultFeature.AntiAliasing: 2
              r.TemporalAA.Upsampling: 1
              r.Upscale.Quality: 4
      TAA:
        files:
          Engine:
            /Script/Engine.RendererSettings:
              r.AntiAliasingMethod: 2
              r.DefaultFeature.AntiAliasing: 2
              r.TemporalAA.Upsampling: 0
              r.Upscale.Quality: 4
      FXAA:
        files:
          Engine:
            /Script/Engine.RendererSettings:
              r.AntiAliasingMethod: 1
              r.DefaultFeature.AntiAliasing: 1
              r.TemporalAA.Upsampling: 0
              r.MipMapLODBias: 1
              r.Upscale.Quality: 4
              r.FXAA.Quality: 4
      MSAA:
        files:
          Engine:
            /Script/Engine.RendererSettings:
              r.AntiAliasingMethod: 3
              r.DefaultFeature.AntiAliasing: 3
              r.TemporalAA.Upsampling: 0
              r.MipMapLODBias: 1
              r.Upscale.Quality: 4
              r.MSAA.CompositingSampleCount: 4
              r.MSAACount: 4
files:
  Engine:
    SystemSettings:
      name: System
      options:
        AbilitySystem.AbilityTaskWarnIfBroadcastSuppress:
          hint: |-
            Print warning if an ability task broadcast is suppressed because the ability has ended
        AbilitySystem.AlwaysConvertGESpecToGCParams:
          hint: |-
            Always convert a GameplayCue from GE Spec to GC from GC Parameters on the server
        AbilitySystem.ClearAbilityTimers:
          hint: |-
            Whether to call ClearAllTimersForObject as part of EndAbility call
        AbilitySystem.ClearCueNotifyTimers:
          hint: |-
            Whether to call ClearAllTimersForObject when cue is getting recycled
        AbilitySystem.ClientActivateAbilityFailedPrintDebugThreshhold:
          hint: |-
        AbilitySystem.ClientActivateAbilityFailedPrintDebugThreshholdTime:
          hint: |-
        AbilitySystem.DebugMoveToActorForce:
          hint: |-
            Show debug info for MoveToActorForce
        AbilitySystem.DenyClientActivations:
          hint: |-
            Make server deny the next X ability activations from clients. For testing misprediction.
        AbilitySystem.DisableGameplayCues:
          hint: |-
            Disables all GameplayCue events in the world.
        AbilitySystem.DisplayGameplayCues:
          hint: |-
            Display GameplayCue events in world as text.
        AbilitySystem.GameplayCue.DisplayDuration:
          hint: |-
            Disables all GameplayCue events in the world.
        AbilitySystem.GameplayCue.RunOnDedicatedServer:
          hint: |-
            Run gameplay cue events on dedicated server
        AbilitySystem.GameplayCueActorRecycle:
          hint: |-
            Allow recycling of GameplayCue Actors
        AbilitySystem.GameplayCueActorRecycleDebug:
          hint: |-
            Prints logs for GC actor recycling debugging
        AbilitySystem.GameplayCueCheckForTooManyRPCs:
          hint: |-
            Warns if gameplay cues are being throttled by network code
        AbilitySystem.GameplayCueNotifyTagCheckOnRemove:
          hint: |-
            Check that target no longer has tag when removing GamepalyCues
        AbilitySystem.GlobalAbilityScale:
          hint: |-
            Global rate for scaling ability stuff like montages and root motion tasks. Used only for testing/iteration, never for shipping.
        AbilitySystem.LogGameplayCueActorSpawning:
          hint: |-
            Log when we create GameplayCueNotify_Actors
        AbilitySystem.ServerRPCBatching.Log:
          hint: |-
        AbilitySystem.ShowClientMakeOutgoingSpecs:
          hint: |-
            Displays all GameplayEffect specs created on non authority clients
        abtest.CoolDown:
          hint: |-
            Number of frames to discard data after each command to cover threading.
        abtest.HistoryNum:
          hint: |-
            Number of history frames to use for stats.
        abtest.MinFramesPerTrial:
          hint: |-
            The number of frames to run a given command before switching; this is randomized.
        abtest.NumResamples:
          hint: |-
            The number of resamples to use to determine confidence.
        abtest.ReportNum:
          hint: |-
            Number of frames between reports.
        Accessibility.Enable:
          hint: |-
            If false, all queries from accessible APIs will be ignored. On some platforms, the application must be restarted in order to take effect.
        ActionBar.IgnoreOptOut:
          hint: |-
            If true, the Bound Action Bar will display bindings whether or not they are configured bDisplayInReflector
        ActorSequence.DefaultDisplayRate:
          hint: |-
            Specifies default a display frame rate for newly created level sequences; also defines frame locked frame rate where sequences are set to be frame locked. Examples: 30 fps, 120/1 (120 fps), 30000/1001 (29.97), 0.01s (10ms).
        ActorSequence.DefaultEvaluationType:
          hint: |-
            0: Playback locked to playback frames
            1: Unlocked playback with sub frame interpolation
        ActorSequence.DefaultTickResolution:
          hint: |-
            Specifies default a tick resolution for newly created level sequences. Examples: 30 fps, 120/1 (120 fps), 30000/1001 (29.97), 0.01s (10ms).
        ai.crowd.DebugSelectedActors:
          hint: |-
            Enable debug drawing for selected crowd agent.
            0: Disable, 1: Enable
        ai.crowd.DebugVisLog:
          hint: |-
            Enable detailed vislog recording for all crowd agents.
            0: Disable, 1: Enable
        ai.crowd.DrawDebugBoundaries:
          hint: |-
            Draw shared navmesh boundaries used by crowd simulation.
            0: Disable, 1: Enable
        ai.crowd.DrawDebugCollisionSegments:
          hint: |-
            Draw colliding navmesh edges, requires ai.crowd.DebugSelectedActors.
            0: Disable, 1: Enable
        ai.crowd.DrawDebugCorners:
          hint: |-
            Draw path corners data, requires ai.crowd.DebugSelectedActors.
            0: Disable, 1: Enable
        ai.crowd.DrawDebugNeighbors:
          hint: |-
            Draw current neighbors data, requires ai.crowd.DebugSelectedActors.
            0: Disable, 1: Enable
        ai.crowd.DrawDebugPath:
          hint: |-
            Draw active paths, requires ai.crowd.DebugSelectedActors.
            0: Disable, 1: Enable
        ai.crowd.DrawDebugPathOptimization:
          hint: |-
            Draw path optimization data, requires ai.crowd.DebugSelectedActors.
            0: Disable, 1: Enable
        ai.crowd.DrawDebugVelocityObstacles:
          hint: |-
            Draw velocity obstacle sampling, requires ai.crowd.DebugSelectedActors.
            0: Disable, 1: Enable
        ai.debug.DetailedReplicationLogs:
          hint: |-
            Enable or disable very verbose replication logs for gameplay debugger
        ai.debug.DrawOverheadIcons:
          hint: |-
            Should default AI overhead icons be drawn
        ai.debug.DrawPaths:
          hint: |-
            Should AI paths be drawn
        ai.debug.nav.DisplaySize:
          hint: |-
            Area we want to display in tiles (DisplaySize x DisplaySize). Note that size will round up to an odd number of tiles
        ai.debug.nav.DrawExcludedFlags:
          hint: |-
            If we want to mark "forbidden" nav polys while debug-drawing.
        ai.debug.nav.RefreshInterval:
          hint: |-
            Interval (in seconds) at which data will be collected.
        ai.NavCollisionAvailable:
          hint: |-
            If set to 0 NavCollision won't be cooked and will be unavailable at runtime.
        ai.traffic.parallelize:
          hint: |-
            Whether to parallelize traffic or not
        AllowAsyncRenderThreadUpdates:
          hint: |-
            Used to control async renderthread updates. Also gated on FApp::ShouldUseThreadingForPerformance().
        AllowAsyncRenderThreadUpdatesDuringGamethreadUpdates:
          hint: |-
            If > 0 then we do the gamethread updates _while_ doing parallel updates.
        AllowAsyncRenderThreadUpdatesEditor:
          hint: |-
            Used to control async renderthread updates in the editor.
        AllowAsyncRenderThreadUpdatesEditorGameWorld:
          hint: |-
            Used to control async renderthread updates in an editor game world.
        AMF.KeyframeInterval:
          hint: |-
            Every N frames an IDR frame is sent. Default: 300. Note: A value <= 0 will disable sending of IDR frames on an interval.
        AnalyticsET.PayloadFlushTimeSecForWarning:
          hint: |-
            Time in seconds that flushing an EventCache payload can take before it will trigger a warning message, listing the events in the payload. This is intended to be used to investigate spammy or slow telemetry.
        AnalyticsET.PayloadPercentageOfMaxForWarning:
          hint: |-
            Percentage of the maximum payload for an EventCache that will trigger a warning message, listing the events in the payload. This is intended to be used to investigate spammy or slow telemetry.
        AnalyticsET.PreventMultipleFlushesInOneFrame:
          hint: |-
            When true, prevents more than one AnalyticsProviderET instance from flushing in the same frame, allowing the flush and HTTP cost to be amortized.
        Android.DeviceDetectionPollInterval:
          hint: |-
            The number of seconds between polling for connected Android devices.
            Default: 10
        AnimRecorder.AnimLength:
          hint: |-
            Sets default animation length for the animation recorder system.
        AnimRecorder.RecordInWorldSpace:
          hint: |-
            True to record anim keys in world space, false to record only in local space.
        ApproximateActors.RenderCapture:
          hint: |-
            Determines whether or not to trigger a render capture.
            0: Turned Off
            1: Turned On
        ar.FaceComponentDebugMode:
          hint: |-
            Debug mode for AR face component, see EFaceComponentDebugMode
        ar.GeoAnchorComponentDebugMode:
          hint: |-
            Debug mode for AR Geo anchor component, see EGeoAnchorComponentDebugMode
        ar.ImageComponentDebugMode:
          hint: |-
            Debug mode for AR image component, see EImageComponentDebugMode
        ar.PlaneComponentDebugMode:
          hint: |-
            Debug mode for AR plane component, see EPlaneComponentDebugMode
        ar.PoseComponentDebugMode:
          hint: |-
            Debug mode for AR pose component, see EPoseComponentDebugMode
        ar.QRCodeComponentDebugMode:
          hint: |-
            Debug mode for AR QR code component, see EQRCodeComponentDebugMode
        AssetRegistry.ManagementPathsPackageDebugName:
          hint: |-
            If set, when manage references are set, the chain of references that caused this package to become managed will be printed to the log
        Async.ParallelFor.YieldingTimeout:
          hint: |-
            The timeout (in ms) when background priority parallel for task will yield execution to give higher priority tasks the chance to run.
        AsyncReadFile.CacheHandleForPakFilesOnly:
          hint: |-
            Control how Async read handle caches the underlying platform handle for files.
            0: Cache the underlying platform handles for all files.
            1: Cache the underlying platform handle for .pak files only (default).
        AttemptStuckThreadResuscitation:
          hint: |-
            Attempt to resusicate stuck thread by boosting priority. Enabled by default
        au.3dVisualize.ActiveSounds:
          hint: |-
            Visualization mode for active sounds. 
            0: Not Enabled, 1: Volume (Lin), 2: Volume (dB), 3: Distance, 4: Random color, 5: Occlusion
        au.3dVisualize.ActiveSounds.Type:
          hint: |-
            Whether to show all sounds, on AudioComponents (Components Only), or off of AudioComponents (Non-Component Only). 
            0: All, 1: Components Only, 2: Non-Component Only
        au.3dVisualize.Enabled:
          hint: |-
            Whether or not audio visualization is enabled. 
            0: Not Enabled, 1: Enabled
        au.3dVisualize.Listeners:
          hint: |-
            Whether or not listeners are visible when 3d visualize is enabled. 
            0: Not Enabled, 1: Enabled
        au.3dVisualize.SpatialSources:
          hint: |-
            Whether or not audio spatialized sources are visible when 3d visualize is enabled. 
            0: Not Enabled, 1: Enabled
        au.3dVisualize.VirtualLoops:
          hint: |-
            Whether or not virtualized loops are visible when 3d visualize is enabled. 
            0: Not Enabled, 1: Enabled
        au.adpcm.ADPCMReadFailiureTimeout:
          hint: |-
            Sets the number of ADPCM decode attempts we'll try before stopping the sound wave altogether.
        au.adpcm.ChanceForIntentionalChunkMiss:
          hint: |-
            If this is set > 0 we will intentionally drop chunks. Used for debugging..
        au.adpcm.DisableSeekForwardOnReadMisses:
          hint: |-
            When there is a seek pending and this CVar is set to 0, we will scan forward in the file.
        au.adpcm.DisableSeeking:
          hint: |-
            Disables seeking with ADPCM.
        au.adpcm.OnlySeekForwardOneChunk:
          hint: |-
            When set to 1, we will not continue to seek forward after failing to load two chunks in a row.
        au.AllowAudioSpatialization:
          hint: |-
            Controls if we allow spatialization of audio, normally this is enabled.  If disabled all audio won't be spatialized, but will have attenuation.
            0: Disable, >0: Enable
        au.AllowReverbForMultichannelSources:
          hint: |-
            Controls if we allow Reverb processing for sources with channel counts > 2.
            0: Disable, >0: Enable
        au.AllowUnsafeAudioMixerToggling:
          hint: |-
            If set to 1, will allow au.IsUsingAudioMixer to swap out the audio engine, even if there are systems in the world currently using the audio engine. 
            0: disable usage of au.IsUsingAudioMixer when the audio device is actively in use, 1: enable usage of au.IsUsingAudioMixer.
        au.Ambisonics.VirtualIntermediateChannels:
          hint: |-
            Enables decoding to a virtual 7.1 speaker config before mixdown.
            0: Decode directly to output device configuration, 1: Enabled
        au.AnalysisTimeShift:
          hint: |-
            Shifts the timeline for baked analysis playback.
            Value: The time in seconds to shift the timeline.
        au.BakedAnalysisEnabled:
          hint: |-
            Enables or disables queries to baked analysis from audio component.
        au.BypassAllSubmixEffects:
          hint: |-
            When set to 1, all submix effects will be bypassed.
            1: Submix Effects are disabled.
        au.BypassAudioPlugins:
          hint: |-
            Bypasses any audio plugin processing.
            0: Not Disabled, 1: Disabled
        au.BypassPlayWhenSilent:
          hint: |-
            When set to 1, ignores the Play When Silent flag for non-procedural sources.
            0: Honor the Play When Silent flag, 1: stop all silent non-procedural sources.
        au.CommandBufferFlushWaitTimeMs:
          hint: |-
            How long to wait for the command buffer flush to complete.
        au.CommandBufferMaxSizeInMb:
          hint: |-
            How big to allow the command buffer to grow before ignoring more commands
        au.Concurrency.MinVolumeScale:
          hint: |-
            Volume threshold considered silent for volume scaling (linear scale).
        au.Debug.Display.X:
          hint: |-
            X position on screen of debug statistics. 
            Default: 100
        au.Debug.Display.Y:
          hint: |-
            X position on screen of debug statistics. 
            Default: -1 (Disabled, uses default debug position)
        au.Debug.Generator:
          hint: |-
            Enables/disables debug sound generation.
            0: Disabled, 1: SinTone, 2: WhiteNoise
        au.Debug.Generator.Amp:
          hint: |-
            Sets.
            Default: 0.2f
        au.Debug.Generator.Channel:
          hint: |-
            Sets channel output index of debug audio.  If number provided is above supported number, uses left.
            0: Left, 1: Right, etc.
        au.Debug.Generator.Freq:
          hint: |-
            Sets debug sound generation frequency.
            0: Not Disabled, 1: SinTone, 2: WhiteNoise
        au.Debug.SoundCues.Minimal:
          hint: |-
            Use the compact view of sound cue debug when enabled. 
            0: Not Enabled, 1: Enabled
        au.Debug.Soundcues.ShowDistance:
          hint: |-
            Display distance of sound cue when enabled.
            0: Not Enabled, 1: Enabled
        au.Debug.Soundcues.ShowPath:
          hint: |-
            Display full path of sound cue when enabled.
            0: Not Enabled, 1: Enabled
        au.Debug.SoundCues.Spacing.Char:
          hint: |-
            Size of character (in pixels) with compact view. 
            Default: 7
        au.Debug.SoundCues.Spacing.Tab:
          hint: |-
            Size of tab (in characters) with compact view. 
            Default: 5
        au.Debug.Sounds.Max:
          hint: |-
            Max number of sounds to display in full sound debugger view. 
            Default: 32
        au.Debug.Sounds.ShowPath:
          hint: |-
            Display full path of sound when enabled.
            0: Not Enabled, 1: Enabled
        au.Debug.Sounds.Sort:
          hint: |-
            Value to sort by and display when sound stats are active. 
            Class, Distance, Name (Default), Priority (Highest of wave instances per sound), Time, Waves, Volume
        au.Debug.Sounds.TextColor:
          hint: |-
            Color of body text in audio debug views. 
            White, Red, Orange, Yellow, Blue, Magenta, Purple, Black
        au.DecompressionThreshold:
          hint: |-
            If non-zero, overrides the decompression threshold set in either the sound group or the platform's runtime settings.
            Value: Maximum duration we should fully decompress, in seconds.
        au.DefaultModulationPlugin:
          hint: |-
            Name of default modulation plugin to load and use (overridden by platform-specific implementation name in config.
        au.DisableADPCMSeekLock:
          hint: |-
            Disables ADPCM seek crit section fix for multiple seek requests per frame.
        au.DisableAppVolume:
          hint: |-
            Disables application volume when set to 1.
            0: App volume enabled, 1: App volume disabled
        au.DisableAutomaticPrecache:
          hint: |-
            When set to 1, this disables precaching on load or startup, it will only precache synchronously when playing.
            0: Use normal precaching logic, 1: disables all precaching except for synchronous calls.
        au.DisableBinauralSpatialization:
          hint: |-
            Disables binaural spatialization.
        au.DisableDeviceSwap:
          hint: |-
            Disable device swap handling code for Audio Mixer on Windows.
            0: Not Enabled, 1: Enabled
        au.DisableDistanceAttenuation:
          hint: |-
            Disables using any Distance Attenuation.
            0: Not Disabled, 1: Disabled
        au.DisableEnvelopeFollowing:
          hint: |-
            Disables using the envlope follower for source envelope tracking.
            0: Not Disabled, 1: Disabled
        au.DisableFiltering:
          hint: |-
            Disables using the per-source lowpass and highpass filter.
            0: Not Disabled, 1: Disabled
        au.DisableHPFiltering:
          hint: |-
            Disables using the per-source highpass filter.
            0: Not Disabled, 1: Disabled
        au.DisableLegacyReverb:
          hint: |-
            Disables reverb on legacy audio backends.
            0: Enabled, 1: Disabled
        au.DisableOcclusion:
          hint: |-
            Disables (1) or enables (0) audio occlusion.
        au.DisableParallelSourceProcessing:
          hint: |-
            Disables using async tasks for processing sources.
            0: Not Disabled, 1: Disabled
        au.DisableQuadReverb:
          hint: |-
            Disables quad reverb in surround.
            0: Not Disabled, 1: Disabled
        au.DisableReverbSubmix:
          hint: |-
            Disables the reverb submix.
            0: Not Disabled, 1: Disabled
        au.DisableSourceEffects:
          hint: |-
            Disables using any source effects.
            0: Not Disabled, 1: Disabled
        au.DisableStereoSpread:
          hint: |-
            When set to 1, ignores the 3D Stereo Spread property in attenuation settings and instead renders audio from a singular point.
            0: Not Disabled, 1: Disabled
        au.DisableStoppingVoices:
          hint: |-
            Disables stopping voices feature.
            0: Not Disabled, 1: Disabled
        au.DisableSubmixEffectEQ:
          hint: |-
            Disables the eq submix (true by default as of 5.0).
            0: Not Disabled, 1: Disabled
        au.DisableSubmixMutationLock:
          hint: |-
            Disables the submix mutation lock.
            0: Not Disabled (Default), 1: Disabled
        au.dsp.FFTMethod:
          hint: |-
            Determines whether we use an iterative FFT method or the DFT.
            0: Use Iterative FFT, 1:: Use DFT
        au.editor.CookOverrideCachingInterval:
          hint: |-
            This sets the max latency between when a cook override is changed in the project settings and when it is applied to new audio sources.
            n: Time between caching intervals, in seconds.
        au.editor.ForceAudioNonStreaming:
          hint: |-
            When set to 1, forces any audio played to be non-streaming May force a DDC miss.
            0: Honor the Play When Silent flag, 1: stop all silent non-procedural sources.
        au.EnableBinauralAudioForAllSpatialSounds:
          hint: |-
            Toggles binaural audio rendering for all spatial sounds if binaural rendering is available.
        au.EnableDetailedWindowsDeviceLogging:
          hint: |-
            Enables detailed windows device logging.
            0: Not Enabled, 1: Enabled
        au.EnableOcclusionFilterScale:
          hint: |-
            Whether or not we scale occlusion by 0.25f to compensate for change in filter cutoff frequencies in audio mixer. 
            0: Not Enabled, 1: Enabled
        au.EnableReverbStereoFlipForQuad:
          hint: |-
            Enables doing a stereo flip for quad reverb when in surround.
            0: Not Enabled, 1: Enabled
        au.ExtraAudioMixerDeviceLogging:
          hint: |-
            Enables extra logging for audio mixer device running 
            0: no logging, 1: logging every 500 callbacks 
        au.ExtraResonanceLogging:
          hint: |-
            If non-zero, will log extra information about the state of Resonance HRTF processing.
            0: Disable, >0: Enable
        au.FadeOutTimeoutMSec:
          hint: |-
            Amount of time to wait for the FadeOut Event to fire. 
        au.FlushAudioRenderCommandsOnSuspend:
          hint: |-
            When set to 1, ensures that we pump through all pending commands to the audio thread and audio render thread on app suspension.
            0: Not Disabled, 1: Disabled
        au.FlushAudioRenderThreadOnGC:
          hint: |-
            When set to 1, every time the GC runs, we flush all pending audio render thread commands.
        au.FlushCommandBufferOnTimeout:
          hint: |-
            When set to 1, flushes audio render thread synchronously when our fence has timed out.
            0: Not Disabled, 1: Disabled
        au.FocusData.InitializeFocusFactorOnFirstUpdate:
          hint: |-
            When set to 1, focus factor will be initialized on first update to the proper value, instead of interpolating from 0 to the proper value.
            0: Disabled, 1: Enabled (default)
        au.ForceRealtimeDecompression:
          hint: |-
            When set to 1, this deliberately ensures that all audio assets are decompressed as they play, rather than fully on load.
            0: Allow full decompression on load, 1: force realtime decompression.
        au.ForceSyncAudioDecodes:
          hint: |-
            Disables using async tasks for processing sources.
            0: Not Disabled, 1: Disabled
        au.IgnoreUserResonanceSubmix:
          hint: |-
            When set to 1, the resonance project setting will be bypassed.
            1: Submix Effects are disabled.
        au.InteriorData.UseAudioVolumes:
          hint: |-
            When set to 1, allows gathering of interior data from audio volumes (Legacy).
            0: Disabled, 1: Enabled (default)
        au.InteriorData.UseIActiveSoundUpdate:
          hint: |-
            When set to 1, allows gathering of interior data from subsystems that implement the IActiveSoundUpdate interface.
            0: Disabled, 1: Enabled (default)
        au.IsUsingAudioMixer:
          hint: |-
            Whether or not we're currently using the audio mixer. Change to dynamically toggle on/off. This will only take effect if an audio device is currently not in use, unless au.AllowUnsafeAudioMixerToggling is set to 1. Note: sounds will stop. Looping sounds won't automatically resume. 
            0: Not Using Audio Mixer, 1: Using Audio Mixer
        au.itd.EnableILD:
          hint: |-
            Sets whether we should use level differences in addition to delay.
            0: ILD disabled, 1: ILD enabled.
        au.itd.SetHeadWidth:
          hint: |-
            Sets the listener's head width from ear to ear, in centimeters.
            Value: The listener's head width from ear to ear, in centimeters.
        au.itd.SetInterpolationTime:
          hint: |-
            Sets how quickly the audio renderer follows the objects position, in seconds.
            Value: Interpolation time, in seconds.
        au.itd.SetSpeedOfSound:
          hint: |-
            Sets speed of sound to use for ITD calculations.
            Value: Speed of sound in meters.
        au.LinearGainScalarForFinalOutut:
          hint: |-
            Linear gain scalar applied to the final float buffer to allow for hotfixable mitigation of clipping 
            Default is 1.0f 
        au.LogRenderTimes:
          hint: |-
            Logs Audio Render Times.
            0: Not Log, 1: Log
        au.LogSubmixAutoDisable:
          hint: |-
            Enables logging of submix disable and enable state.
            1: Submix enablement logging is on. 0: Submix enablement/disablement logging is off.
        au.MaxConcurrentStreams:
          hint: |-
            Overrides the max concurrent streams.
            0: Not Overridden, >0 Overridden
        au.MaxRandomBranches:
          hint: |-
            Sets the max amount of branches to play from for any random node. The rest of the branches will be released from memory.
            0: No culling, Any other value: The amount of branches we should use as a maximum for any random node.
        au.MinLogTimeBetweenUnderrunWarnings:
          hint: |-
            Min time between underrun warnings (globally) in MS
            Set the time between each subsequent underrun log warning globaly (defaults to 10secs)
        au.MultithreadedPatching.PushCallsPerOutputCleanupCheck:
          hint: |-
            Number of push calls (usually corrisponding to audio block updates)
            before checking if an output is ready to be destroyed. Default = 256
        au.NeverMuteNonRealtimeAudioDevices:
          hint: |-
            When set to 1, nonrealtime audio devices will be exempt from normal audio device muting (for example, when a window goes out of focus.
            0: Not Disabled, 1: Disabled
        au.nrt.RenderEveryTick:
          hint: |-
            When set to 1, calls the RenderAudio call every tick.
            n: Number of frames to render.
        au.nrt.RenderFrameSize:
          hint: |-
            Selects the number of frames to render in a single callback .
            n: Number of frames to render.
        au.NumPrecacheFrames:
          hint: |-
            When set to > 0, will use that value as the number of frames to precache audio buffers with.
            0: Use default value for precache frames, >0: Number of frames to precache.
        au.OverrunTimeoutMSec:
          hint: |-
            Amount of time to wait for the render thread to time out before swapping to the null device. 
        au.Quartz.bAlwaysTakeVoiceSlot:
          hint: |-
            Always take voice slot immediately without trying to cache the request on the component
            default = 1: always forward the request to the audio engine immediately. - 0: attempt to cache play requests on the component until closer to the deadline.
        au.Quartz.HeadlessClockSampleRate:
          hint: |-
            Sample rate to use for Quartz Clocks/Metronomes when no Mixer Device is present.
            0: Not Enabled, 1: Enabled
        au.Quartz.MaxSubscribersToUpdatePerTick:
          hint: |-
            Limits the number of Quartz subscribers to update per Tick.
            <= 0: No Limit, >= 1: Limit
        au.Quartz.SimulateNoAudioDevice:
          hint: |-
            If enabled, the QuartzSubsystem will assume no audio device, and will run new clocks in headless mode.
            0: Not Enabled, 1: Enabled
        au.Quartz.TimeToTakeUpVoiceSlot:
          hint: |-
            TheEQuartzCommandQuantization type (default: EQuartzCommandQuantization::EighthNote) before playing that a queued sound should take up a voice slot for
            Value: The EQuartzCommandQuantization index of the desired duration
        au.RealtimeDecompressZeroDurationSounds:
          hint: |-
            When set to 1, we will fallback to realtime decoding any sound waves with an invalid duration..
            0: Fully decompress sounds with a duration of 0, 1: realtime decompress sounds with a duration of 0.
        au.RecoverRecordingOnShutdown:
          hint: |-
            When set to 1, we will attempt to bounce the recording to a wav file if the game is shutdown while a recording is in flight.
            0: Disabled, 1: Enabled
        au.RecycleThreads:
          hint: |-
            Keeps threads to reuse instead of create/destroying them0 off, 1 on
        au.RenderThreadAffinity:
          hint: |-
            Override audio render thread affinity.
            0: Disabled (Default), otherwise overriden thread affinity.
        au.RenderThreadPriority:
          hint: |-
            Sets audio render thread priority. Defaults to 3.
            0: Normal, 1: Above Normal, 2: Below Normal, 3: Highest, 4: Lowest, 5: Slightly Below Normal, 6: Time Critical
        au.resonance.quality:
          hint: |-
            Override the quality of resonance sound sources. Will not increase quality levels. The quality used will be min of the quality in the resonance source settings and this override.
            0: Quality is not overridden, 1: Stereo Panning, 2: Low Quality, 3: Medium Quality, 4: High Quality
        au.SetAudioChannelCount:
          hint: |-
            Changes the audio channel count. Max value is clamped to the MaxChannelCount the audio engine was initialize with.
            0: Disable, >0: Enable
        au.SetAudioChannelScaleCount:
          hint: |-
            Changes the audio channel count by percentage.
        au.SoundDistanceOptimizationLength:
          hint: |-
            The maximum duration a sound must be in order to be a candidate to be culled due to one-shot distance optimization.
        au.SpoofFailedStreamChunkLoad:
          hint: |-
            Forces failing to load streamed chunks.
            0: Not Enabled, 1: Enabled
        au.streamcache.BlockOnChunkLoadCompletion:
          hint: |-
            When set to 1, USoundWaves we will always attempt to synchronously load a chunk after a USoundWave request has finished.
            0: Don't try to block after a SoundWave has completed loading a chunk, 1: Block after a USoundWave's chunk request has completed.
        au.streamcache.DisableRetaining:
          hint: |-
            When set to 1, USoundWaves will not retain chunks of their own audio.
            0: Don't disable retaining, 1: retaining.
        au.streamcache.DispatchToGameThreadOnChunkRequest:
          hint: |-
            When set to 1, we will always dispatch a callback to the game thread whenever a USoundWave request has finished. This may cause chunks of audio to be evicted by the time we need them.
            0: as soon as the chunk is loaded, capture the audio chunk. 1: As soon as the chunk is loaded, dispatch a callback to the gamethread.
        au.streamcache.priming.BypassRetainFromSoundCues:
          hint: |-
            When set to 1, we ignore the loading behavior of sound classes set on a Sound Cue directly.
        au.streamcache.priming.PrimeDelayNodes:
          hint: |-
            When set to 1, sounds will be loaded into the cache automatically when a delay node is hit.
        au.streamcache.priming.PrimeRandomNodes:
          hint: |-
            When set to 1, sounds will be loaded into the cache automatically when a random node is hit.
        au.streamcache.SoundWaveDefaultLoadingBehavior:
          hint: |-
            This can be set to define the default behavior when a USoundWave is loaded.
            0: Default (load on demand), 1: Retain audio data on load, 2: prime audio data on load, 3: load on demand (No audio data is loaded until a USoundWave is played or primed).
        au.streamcaching.AlwaysLogCacheMisses:
          hint: |-
            When set to a nonzero value, all cache misses will be added to the audiomemreport.
            0: Don't log cache misses until au.streamcaching.StartProfiling is called. 1: Always log cache misses.
        au.streamcaching.BlockForPendingLoadOnCacheOverflow:
          hint: |-
            This cvar sets the default request priority for audio chunks that are about to play back, but aren't in the cache.
            0: When we blow the cache we clear any soundwave retainers. 1:When we blow the cache we attempt to cancel a load in flight.
        au.streamcaching.ChunkSlotNumScalar:
          hint: |-
            This allows scaling the number of chunk slots pre-allocated.
            1.0: is the lower limit
        au.streamcaching.DebugView:
          hint: |-
            Enables the comparison of FObjectKeys when comparing Stream Cache Chunk Keys.  Without this FName collisions could occur if 2 SoundWaves have the same name.
            0: Legacy, 1: Default, 2: Averaged View, 3: High Detail View
        au.streamcaching.EnableExhaustiveCacheSearches:
          hint: |-
            Enables an exhaustive search of the cache in FindElementForKey.
            0: Rely on chunk offset. 1: Search using linear search
        au.streamcaching.EnableTrimmingRetainedAudio:
          hint: |-
            When set > 0, we will trim retained audio when the stream cache goes over the memory limit.
            0: never trims retained audio, >0: will trim retained audio.
        au.streamcaching.ForceBlockForLoad:
          hint: |-
            When set to a nonzero value, blocks GetLoadedChunk until the disk read is complete.
        au.streamcaching.KeepCacheMissBufferOnFlush:
          hint: |-
            If set to 1, this will maintain the buffer of recorded cache misses after calling AudioMemReport. Otherwise, calling audiomemreport will flush all previous recorded cache misses.
            1: All cache misses from the whole session will show up in audiomemreport. 0: Only cache misses since the previous call to audiomemreport will show up in the current audiomemreport.
        au.streamcaching.MaxCachesToDisplay:
          hint: |-
            Sets the max amount of stream chunks to display on screen.
            n: Number of elements to display on screen.
        au.streamcaching.MemoryLimitTrimPercentage:
          hint: |-
            When set > 0.0, we will trim percentage of memory cache audio per trim call audio when the stream cache goes over the memory limit.
            0.0: trims only the amount needed to allocate a single chunk, >0: that percentage of memory limit.
        au.streamcaching.MinimumCacheUsage:
          hint: |-
            This value is the minimum potential usage of the stream cache we feasibly want to support. Setting this to 0.25, for example, cause us to potentially be using 25% of our cache size when we start evicting chunks, worst cast scenario.
            0.0: limit the number of chunks to our (Cache Size / Max Chunk Size) [0.01-0.99]: Increase our number of chunks to limit disk IO when we have lots of small sounds playing.
        au.streamcaching.NumSoundWavesToClearOnCacheOverflow:
          hint: |-
            When set > 0, we will attempt to release retainers for only that many sounds every time we have a cache overflow.
            0: reset all retained sounds on cache overflow, >0: evict this many sounds on any cache overflow.
        au.streamcaching.PlaybackRequestPriority:
          hint: |-
            This cvar sets the default request priority for audio chunks that are about to play back, but aren't in the cache.
            0: High, 1: Normal, 2: Below Normal, 3: Low, 4: Min
        au.streamcaching.PrimeSoundOnAudioComponents:
          hint: |-
            When set to 1, automatically primes a USoundBase when a UAudioComponent is spawned with that sound, or when UAudioComponent::SetSound is called.
        au.streamcaching.ReadRequestPriority:
          hint: |-
            This cvar sets the default request priority for audio chunks when Stream Caching is turned on.
            0: High, 1: Normal, 2: Below Normal, 3: Low, 4: Min
        au.streamcaching.SaveAudiomemReportOnCacheOverflow:
          hint: |-
            When set to one, we print an audiomemreport when the cache has overflown.
            0: Disabled, 1: Enabled
        au.streamcaching.SearchUsingChunkArray:
          hint: |-
            If performing an exhaustive search of the cache, use the chunk array instead of the LRU (we give up knowing how far down the cache an element was).
            0: Search using LRU (linked list). 1: Search using Chunk Pool (TArray)
        au.streamcaching.StreamCacheSizeOverrideMB:
          hint: |-
            This cvar can be set to override the size of the cache.
            0: use cache size from project settings. n: the new cache size in megabytes.
        au.streamcaching.TrimCacheWhenOverBudget:
          hint: |-
            When set to a nonzero value, TrimMemory will be called in AddOrTouchChunk to ensure we never go over budget.
        au.submix.clearbrokensubmixassets:
          hint: |-
            If set, will verify that we don't have a submix that lists a child submix that is no longer its child, and the former children will not erroneously list their previous parents.
            0: Disable, >0: Enable
        au.Submix.Effects.DynamicsProcessor.Bypass:
          hint: |-
            If non-zero, bypasses all submix dynamics processors currently active.
        au.ThreadedSwapDebugExtraTime:
          hint: |-
            Simulate a slow device swap by adding addional time to the swap task
        au.UnderrunTimeoutMSec:
          hint: |-
            Amount of time to wait for the render thread to generate the next buffer before submitting an underrun buffer. 
        au.UseCachedDeviceInfoCache:
          hint: |-
            Uses a Cache of the DeviceCache instead of asking the OS0 off, 1 on
        au.UseListenerOverrideForSpread:
          hint: |-
            Zero attenuation override distance stereo panning
            0: Use actual distance, 1: use listener override
        au.UseThreadedDeviceSwap:
          hint: |-
            Lets Device Swap go wide.0 off, 1 on
        au.VirtualLoops.Enabled:
          hint: |-
            Enables or disables whether virtualizing is supported for audio loops.
        au.VirtualLoops.ForceUpdateListenerMoveDistance:
          hint: |-
            Sets distance threshold required to force an update on virtualized sounds to check for if listener moves in a single frame over the given distance.
        au.VirtualLoops.PerfDistance:
          hint: |-
            Sets virtual loop distance to scale update rate between min and max beyond max audible distance of sound.
        au.VirtualLoops.UpdateRate.Max:
          hint: |-
            Sets maximum rate to check if sound becomes audible again (at beyond sound's max audible distance + perf scaling distance).
        au.VirtualLoops.UpdateRate.Min:
          hint: |-
            Sets minimum rate to check if sound becomes audible again at sound's max audible distance.
        au.voip.AlwaysPlayVoiceComponent:
          hint: |-
            When set to 1, guarantees that voip components won't get deprioritized. 
            0: Let voip components get killed, 1: force VOIP components to be higher priority than all other audio sources.
        au.vorbis.ReadFailiureTimeout:
          hint: |-
            When set to 1, we bail on decoding Ogg Vorbis sounds if we were not able to successfully decode them after several attempts.
        au.WaitForSoundWaveToLoad:
          hint: |-
            When set to 1, we will refuse to play any sound unless the USoundWave has been loaded.
            0: Attempt to play back, 1: Wait for load.
        au.WorldlessGetAudioTimeBehavior:
          hint: |-
            Determines the return value of GetAudioTime when an audio component does not belong to a world.
            0: 0.f (default), 1: Application's CurrentTime
        AudioCommand.FenceWaitTimeMs:
          hint: |-
            Sets number of ms for fence wait
        AudioThread.AboveNormalPriority:
          hint: |-
            0=Normal, 1=AboveNormal
        AudioThread.BatchAsyncBatchSize:
          hint: |-
            When AudioThread.EnableBatchProcessing = 1, controls the number of audio commands grouped together for threading.
        AudioThread.EnableAudioCommandLogging:
          hint: |-
            0=Disbaled, 1=Enabled
        AudioThread.EnableAudioThreadWait:
          hint: |-
            Enables waiting on the audio thread to finish its commands.
            0: Not Enabled, 1: Enabled
        AudioThread.EnableBatchProcessing:
          hint: |-
            Enables batch processing audio thread commands.
            0: Not Enabled, 1: Enabled
        AudioThread.SuspendAudioThread:
          hint: |-
            0=Resume, 1=Suspend
        AudioThread.UseBackgroundThreadPool:
          hint: |-
            If true, use the background thread pool for realtime audio decompression.
        AutomationAllowFrameTraceCapture:
          hint: |-
            Allow automation to capture frame traces.
        AutomationScreenshotResolutionHeight:
          hint: |-
            The height of automation screenshots.
        AutomationScreenshotResolutionWidth:
          hint: |-
            The width of automation screenshots.
        backchannel.logerrors:
          hint: |-
            Logs packet errors
        backchannel.logpackets:
          hint: |-
            Logs incoming packets
        beacon.DelayCancellationResponse:
          hint: |-
            Delay time between received cancel response and notification
            Time in secs
        beacon.DelayFullResponse:
          hint: |-
            Delay time between received full response and notification
            Time in secs
        beacon.DelayReservationResponse:
          hint: |-
            Delay time between received response and notification
            Time in secs
        beacon.DelayUpdateResponse:
          hint: |-
            Delay time between received update response and notification
            Time in secs
        BehaviorTree.RecordFrameSearchTimes:
          hint: |-
            Record Search Times Per Frame For Perf Stats
        Blueprint.PC_Real.DisplayMode:
          hint: |-
            Real naming mode
            	0: Real
            	1: Float (default)
            	2: Number
            Note the editor needs to be restarted for this to fully take effect
        BP.bEnableSkelReinstUpdate:
          hint: |-
            If true the Reinstancing of SKEL classes will use the new FBlueprintCompileReinstancer::MoveDependentSkelToReinst(o(n)) instead of the old MoveSkelCDOAside (o(n^2))
        bp.ComponentInstancingFastPathDisabled:
          hint: |-
            Disable the Blueprint component instancing fast path.
        bp.DatabasePrimingMaxPerFrame:
          hint: |-
            How many entries should be primed in to the database per frame.
        bp.DisableSearchDataUpdateOnSave:
          hint: |-
            Don't update Blueprint search metadata on save (for QA/testing purposes only). On an editor relaunch, it should include the BP in the unindexed count after the first search.
        bp.EnableAutomaticLibraryAssetLoading:
          hint: |-
            Should opening the BP editor load all macro and function library assets or not?
            0: Disable, 1: Enable (defaults to enabled)
            Nodes defined in unloaded libraries will not show up in the context menu!
        BP.EnableNamespaceFilteringFeatures:
          hint: |-
            Enables namespace filtering features in the Blueprint editor (experimental).
        BP.EnableNamespaceImportingFeatures:
          hint: |-
            Enables namespace importing features in the Blueprint editor (experimental).
        bp.ForceOldSearchDataFormatVersionOnSave:
          hint: |-
            Force Blueprint search metadata to use an old format version on save (for QA/testing purposes only). On an editor relaunch, it should include the BP in the out-of-date count after the first search.
        BP.ImportParentClassNamespaces:
          hint: |-
            Enables import of parent class namespaces when opening a Blueprint for editing.
        bp.MaxFunctionStatDepth:
          hint: |-
            Script stack threshold for recording per function stats.
        bp.PinValidityCheck.bDisplayInvalidPinWarning:
          hint: |-
            CVar controls pin validity warning which will throw when a macro graph is silently failing
        bp.PinValidityCheck.bDisplayMissingBoundComponentWarning:
          hint: |-
            CVar controls pin validity warning which will throw when a bound event has no matching component
        bp.ScriptRecurseLimit:
          hint: |-
            Sets the number of recursions before script is considered in an infinite loop.
        bp.ShortScriptWarnings:
          hint: |-
            Shorten the blueprint exception logs.
        bp.VerboseStats:
          hint: |-
            Create additional stats for Blueprint execution.
        CameraCalibration.StartupLensFile:
          hint: |-
            Startup Lens File
        Canvas.DistanceFieldSmoothness:
          hint: |-
            Global sharpness of distance field fonts/shapes rendered by canvas.
        CauseHitches:
          hint: |-
            Causes a 200ms hitch every second. Size of the hitch is controlled by CauseHitchesHitchMS
        CauseHitchesHitchMS:
          hint: |-
            Controls the size of the hitch caused by CauseHitches in ms.
        CommonInput.ShowKeys:
          hint: |-
            Should we show the keys for the current input device.
        CommonUI.AlwaysShowCursor:
          hint: |-
        CommonUI.VideoPlayer.PreviewStepSize:
          hint: |-
        Compat.MAX_GPUSKIN_BONES:
          hint: |-
            Max number of bones that can be skinned on the GPU in a single draw call. This setting clamp the per platform project setting URendererSettings::MaxSkinBones. Cannot be changed at runtime.
        Compat.UseDXT5NormalMaps:
          hint: |-
            Whether to use DXT5 for normal maps, otherwise BC5 will be used, which is not supported on all hardware.
            Both formats require the same amount of memory (if driver doesn't emulate the format).
            Changing this will cause normal maps to be recompressed on next load (or when using recompile shaders)
             0: Use BC5 texture format (default)
             1: Use DXT5 texture format (lower quality)
        con.DebugEarlyCheat:
          hint: |-
            used internally to test the console variable system
        con.DebugEarlyDefault:
          hint: |-
            used internally to test the console variable system
        con.DebugLateCheat:
          hint: |-
            used internally to test the console variable system
        con.DebugLateDefault:
          hint: |-
            used internally to test the console variable system
        con.MinLogVerbosity:
          hint: |-
            Allows to see the log in the in game console (by default deactivated to avoid spam and minor performance loss).
             0: no logging other than console response (default)
             1: Only fatal errors (no that useful)
             2: additionally errors
             3: additionally warnings
             4: additionally display
             5: additionally log
            ..
            >=7: all
        Concert.AlwaysCloseGamePlayerOnCloseEvent:
          hint: |-
            Force this player to close even if other editors have it open. This CVar only works on `-game` instances.
        Concert.DelayTransactionsWhileEditing:
          hint: |-
            Focus is lost by the editor when a transaction is applied. This variable suspends applying a transaction until the user has removed focus on editable UI.
        Concert.DisplayPresence:
          hint: |-
            Enable display of Concert Presence from remote users.
        Concert.EmitPresence:
          hint: |-
            Enable display update of Concert Presence to remote users.
        Concert.EnableOpenRemoteSequencer:
          hint: |-
            Enable Concert remote Sequencer opening.
        Concert.EnablePresenceInGame:
          hint: |-
            Enable Concert Presence in Game
        Concert.EnableSequencePlayer:
          hint: |-
            Enable Concert Sequence Players on `-game` client.
        Concert.EnableSequencerPlaybackSync:
          hint: |-
            Enable Concert Sequencer Playback Syncing of opened Sequencer.
        Concert.EnableUnrelatedTimelineSync:
          hint: |-
            Enable syncing unrelated sequencer timeline.
        Concert.IgnoreTransactionFilters:
          hint: |-
            Ignore Transaction Object Allow List Filtering
        console.position.enable:
          hint: |-
            Enable custom console positioning 
        console.position.x:
          hint: |-
            Console X offset from left border 
        console.position.y:
          hint: |-
            Console Y offset from bottom border 
        console.searchmode.legacy:
          hint: |-
            Use the legacy search behaviour for console commands 
        ContextMenu.bPrintDebugContextSelection:
          hint: |-
            Flag for printing the debug info about the context menu selection
        ContextMenu.CategoryWeight:
          hint: |-
            The amount of weight placed on categories that match what the user has typed in
        ContextMenu.ContainerBonus:
          hint: |-
            The bonus given if the dragged from pin matches the same container type of the action
        ContextMenu.DescriptionWeight:
          hint: |-
            The amount of weight placed on search items description
        ContextMenu.FavoriteBonus:
          hint: |-
            The bonus given if node is a favorite
        ContextMenu.KeywordWeight:
          hint: |-
            The amount of weight placed on search items keyword
        ContextMenu.MatchingFromPinCategory:
          hint: |-
            The amount of weight placed on actions with the same category as the node being dragged off of
        ContextMenu.MaxWordLength:
          hint: |-
            Maximum length to count while awarding short word weight
        ContextMenu.NodeTitleWeight:
          hint: |-
            The amount of weight placed on the search items title
        ContextMenu.PercentageMatchWeightMultiplier:
          hint: |-
            A multiplier for how much weight to give something based on the percentage match it is
        ContextMenu.ShorterWeight:
          hint: |-
            Increasing this weight will make shorter words preferred
        ContextMenu.StartsWithBonusWeightMultiplier:
          hint: |-
            The multiplier given if the keyword starts with a term the user typed in
        ContextMenu.WordContainsLetterWeightMultiplier:
          hint: |-
            The multiplier given if the keyword only contains a term the user typed in
        Controller.InvalidControlRotationMagnitude:
          hint: |-
            If any component of an FRotator passed to SetControlRotation is larger than this magnitude, ignore the value. Huge values are usually from uninitialized variables and can cause NaN/Inf to propagate later.
        ControlRig.CreateFloatControlsForCurves:
          hint: |-
            If nonzero we create a float control for each curve in the curve container, useful for debugging low level controls.
        ControlRig.DisableExecutionAll:
          hint: |-
            if nonzero we disable all execution of Control Rigs.
        ControlRig.DisableExecutionInAnimNode:
          hint: |-
            if nonzero we disable the execution of Control Rigs inside an anim node.
        ControlRig.DisableExecutionInComponent:
          hint: |-
            if nonzero we disable the execution of Control Rigs inside a ControlRigComponent.
        ControlRig.EnableDrawInterfaceInShipping:
          hint: |-
            Set to 1 to enable control rig draw interface in shipping
        ControlRig.Hierarchy.TraceAlways:
          hint: |-
            if nonzero we will record all transform changes.
        ControlRig.Hierarchy.TraceCallstack:
          hint: |-
            if nonzero we will record the callstack for any trace entry.
            Only works if(ControlRig.Hierarchy.TraceEnabled != 0)
        ControlRig.Hierarchy.TraceOnSpawn:
          hint: |-
            sets the number of frames to trace when a new hierarchy is spawned
        ControlRig.Hierarchy.TracePrecision:
          hint: |-
            sets the number digits in a float when tracing hierarchies.
        ControlRig.Sequencer.SelectedKeysSelectControls:
          hint: |-
            When true when we select a key in Sequencer it will select the Control, by default false.
        ControlRig.StackDetailedLabels:
          hint: |-
            Set to true to turn on detailed labels for the execution stack widget
        ControlRigSequence.DefaultDisplayRate:
          hint: |-
            Specifies default a display frame rate for newly created control rig sequences; also defines frame locked frame rate where sequences are set to be frame locked. Examples: 30 fps, 120/1 (120 fps), 30000/1001 (29.97), 0.01s (10ms).
        ControlRigSequence.DefaultEvaluationType:
          hint: |-
            0: Playback locked to playback frames
            1: Unlocked playback with sub frame interpolation
        ControlRigSequence.DefaultTickResolution:
          hint: |-
            Specifies default a tick resolution for newly created control rig sequences. Examples: 30 fps, 120/1 (120 fps), 30000/1001 (29.97), 0.01s (10ms).
        Core.bFastDecimalFormatLargeFloatSupport:
          hint: |-
            True implies we perform additional processing for floating point types over 9223372036854775807 to prevent clipping to this value.
        core.EnsuresAreErrors:
          hint: |-
            True means failed ensures are logged as errors. False means they are logged as warnings.
        CriticalPathStall.AfterInitViews:
          hint: |-
            Sleep for the given time after InitViews. Time is given in ms. This is a debug option used for critical path analysis and forcing a change in the critical path.
        CriticalPathStall.ParallelAnimation:
          hint: |-
            Sleep for the given time in each parallel animation task. Time is given in ms. This is a debug option used for critical path analysis and forcing a change in the critical path.
        CriticalPathStall.TickStartFrame:
          hint: |-
            Sleep for the given time in start frame. Time is given in ms. This is a debug option used for critical path analysis and forcing a change in the critical path.
        crn.quality:
          hint: |-
            Set the quality of the crunch texture compression. [0, 255], default: 128
        csv.BlockOnCaptureEnd:
          hint: |-
            When 1, blocks the game thread until the CSV file has been written completely when the capture is ended.
            When 0, the game thread is not blocked whilst the file is written.
        csv.CompressionMode:
          hint: |-
            Controls whether CSV files are compressed when written out.
             -1 = (Default) Use compression if the code which started the capture opted for it.
              0 = Force disable compression. All files will be written as uncompressed .csv files.
              1 = Force enable compression. All files will be written as compressed .csv.gz files.
        csv.ContinuousWrites:
          hint: |-
            When 1, completed CSV rows are converted to CSV format strings and appended to the write buffer whilst the capture is in progress.
            When 0, CSV rows are accumulated in memory as binary data, and only converted to strings and flushed to disk at the end of the capture.
        csv.DetailedTickContext:
          hint: |-
            Gives more detailed info for Tick counts in CSV
        csv.ForceExit:
          hint: |-
            If 1, do a forced exit when if exitOnCompletion is enabled
        csv.RecordActorCounts:
          hint: |-
            Record actor counts by class when performing CSV capture
        csv.RecordActorCountsThreshold:
          hint: |-
            Number of instances of an native Actor class required before recording to CSV stat
        csv.RecordTickCounts:
          hint: |-
            Record tick counts by context when performing CSV capture
        csv.statCounts:
          hint: |-
            If 1, outputs count stats
        csv.trackWaitsAllThreads:
          hint: |-
            Determines whether to track waits on all threads. Note that this incurs a lot of overhead
        csv.trackWaitsGT:
          hint: |-
            Determines whether to track game thread waits. Note that this incurs overhead
        csv.trackWaitsRT:
          hint: |-
            Determines whether to track render thread waits. Note that this incurs overhead
        csv.WriteBufferSize:
          hint: |-
            When non-zero, defines the size of the write buffer to use whilst writing the CSV file.
            A non-zero value is required for GZip compressed output.
        CurveEditor.MaxCurvesPerPinnedView:
          hint: |-
            When CurveEditor.PinnedViews is 1, defines the maximum number of curves allowed on a pinned view (0 for no maximum).
        CurveEditor.PinnedViews:
          hint: |-
            Whether pinning a curve should also cause it to be exclusively added to a pinned view or not (default: off), rather than simply always remain visible.
        CurveTable.RemoveRedundantKeys:
          hint: |-
        d3d11.ZeroBufferSizeInMB:
          hint: |-
            The D3D11 RHI needs a static allocation of zeroes to use when streaming textures asynchronously. It should be large enough to support the largest mipmap you need to stream. The default is 4MB.
        D3D12.AdjustTexturePoolSizeBasedOnBudget:
          hint: |-
            Indicates if the RHI should lower the texture pool size when the application is over the memory budget provided by the OS. This can result in lower quality textures (but hopefully improve performance).
        D3D12.AFRSyncTemporalResources:
          hint: |-
            Synchronize inter-frame dependencies between GPUs
        D3D12.AFRUseFramePacing:
          hint: |-
            Control when frames are presented when using mGPU and Alternate Frame Rendering.
        d3d12.AllowDiscardResources:
          hint: |-
            Whether to call DiscardResources after transient aliasing acquire. This is not needed on some platforms if newly acquired resources are cleared before use.
        d3d12.AllowPoolAllocateIndirectArgBuffers:
          hint: |-
            Allow indirect args to be pool allocated (otherwise they will be committed resources) (default: 0)
        D3D12.AsyncDeferredDeletion:
          hint: |-
            Controls whether D3D12 resources will be released on a separate thread (default = on).
        d3d12.BatchResourceBarriers:
          hint: |-
            Whether to allow batching resource barriers
        D3D12.CommandListBatchingMode:
          hint: |-
            Changes how command lists are batched and submitted to the GPU.
        D3D12.EmitRgpFrameMarkers:
          hint: |-
            Enables/Disables frame markers for AMD's RGP tool.
        d3d12.FastAllocator.MinPagesToRetain:
          hint: |-
            Minimum number of pages to retain. Pages below this limit will never be released. Pages above can be released after being unused for a certain number of frames.
        d3d12.FastConstantAllocatorPageSize:
          hint: |-
            Page size for the fast constant allocator
        D3D12.ForceThirtyHz:
          hint: |-
            If true, the display will never update more often than 30Hz.
        D3D12.GlobalViewHeapBlockSize:
          hint: |-
            Block size for sub allocations on the global view descriptor heap.
        D3D12.GlobalViewHeapSize:
          hint: |-
            Global view heap size
        D3D12.InsertOuterOcclusionQuery:
          hint: |-
            If true, enable a dummy outer occlusion query around occlusion query batches. Can help performance on some GPU architectures
        D3D12.LocalViewHeapSize:
          hint: |-
            Local view heap size
        D3D12.LockTexture2DRHIFlush:
          hint: |-
            If enabled, we do RHIThread flush on LockTexture2D. Likely not required on any platform, but keeping just for testing for now 0: off (default)
             1: on
        D3D12.LogViewportEvents:
          hint: |-
            Log all the viewport events.
        D3D12.MaxCommandsPerCommandList:
          hint: |-
            Flush command list to GPU after certain amount of enqueued commands (draw, dispatch, copy, ...) (default value 10000)
        D3D12.MaximumFrameLatency:
          hint: |-
            Number of frames that can be queued for render.
        D3D12.MaxSyncCounter:
          hint: |-
            Maximum sync counter to smooth out vsync transitions.
        d3d12.PoolAllocator.ReadOnlyTextureMaxAllocationSize:
          hint: |-
            Maximum size of a single allocation in the VRAM ReadOnly Texture pool allocator (default 64MB)
        d3d12.PoolAllocator.ReadOnlyTextureVRAMPoolSize:
          hint: |-
            Pool size of a single VRAM ReadOnly Texture memory pool (default 64MB)
        d3d12.PoolAllocator.RTUAVTextureMaxAllocationSize:
          hint: |-
            Maximum size of a single allocation in the VRAM RTUAV Texture pool allocator (default 0MB - disabled)
        d3d12.PoolAllocator.RTUAVTextureVRAMPoolSize:
          hint: |-
            Pool size of a single VRAM RTUAV Texture memory pool (default 0MB - disabled)
        D3D12.PSO.DiskCache:
          hint: |-
            Enables a disk cache for Pipeline State Objects (PSOs).
            PSO descs are cached to disk so subsequent runs can create PSOs at load-time instead of at run-time.
            This cache contains data that is independent of hardware, driver, or machine that it was created on. It can be distributed with shipping content.
            0 to disable the pipeline state disk cache
            1 to enable the pipeline state disk cache (default)
        D3D12.PSO.DriverOptimizedDiskCache:
          hint: |-
            Enables a disk cache for driver-optimized Pipeline State Objects (PSOs).
            PSO descs are cached to disk so subsequent runs can create PSOs at load-time instead of at run-time.
            This cache contains data specific to the hardware, driver, and machine that it was created on.
            0 to disable the driver-optimized pipeline state disk cache
            1 to enable the driver-optimized pipeline state disk cache
        D3D12.PSO.StallWarningThresholdInMs:
          hint: |-
            Sets a threshold of when to logs messages about stalls due to PSO creation.
            Value is in milliseconds. (100 is the default)
        d3d12.ReadOnlyTextureAllocator.MaxPoolSize:
          hint: |-
            Maximum allocation granularity (in bytes) of each size list
        d3d12.ReadOnlyTextureAllocator.MinNumToPool:
          hint: |-
            Texture pool of each size list must be large enough to store thismany textures unless constrained by maximum allocation granularity
        d3d12.ReadOnlyTextureAllocator.MinPoolSize:
          hint: |-
            Minimum allocation granularity (in bytes) of each size list
        D3D12.RefreshPercentageBeforePresent:
          hint: |-
            The percentage of the refresh period to wait before presenting.
        D3D12.ResidencyManagement:
          hint: |-
            Controls whether D3D12 resource residency management is active (default = on).
        d3d12.SegListTrackLeaks:
          hint: |-
            1: Enable leak tracking in d3d12 seglist's
        d3d12.SeparateRTV2SRVTranstions:
          hint: |-
            Whether to submit RTV-to-SRV transition barriers through a separate API call
        D3D12.StablePowerState:
          hint: |-
            If true, enable stable power state. This increases GPU timing measurement accuracy but may decrease overall GPU clock rate.
        D3D12.SyncRefreshThreshold:
          hint: |-
            Threshold for time above which vsync will be disabled as a percentage of the refresh rate.
        D3D12.SyncThreshold:
          hint: |-
            Number of consecutive 'fast' frames before vsync is enabled.
        D3D12.SyncWithDWM:
          hint: |-
            If true, synchronize with the desktop window manager for vblank.
        D3D12.TexturePoolOnlyAccountStreamableTexture:
          hint: |-
            Texture streaming pool size only account streamable texture .
             - 0: All texture types are counted in the pool (legacy, default).
             - 1: Only streamable textures are counted in the pool.
            When enabling the new behaviour, r.Streaming.PoolSize will need to be re-adjusted.
        D3D12.TrackAllAllocations:
          hint: |-
            Controls whether D3D12 RHI should track all allocation information (default = off).
        D3D12.TrackedReleasedAllocationFrameRetention:
          hint: |-
            Amount of frames for which we keep freed allocation data around when resource tracking is enabled
        d3d12.TransientAllocator.FullAliasingBarrier:
          hint: |-
            Inserts a full aliasing barrier on an transient acquire operation. Useful to debug if an aliasing barrier is missing.
        d3d12.UploadAllocator.PendingDeleteSizeForceFlushInGB:
          hint: |-
            If given threshold of GBs in the pending delete is queue is reached, then a force GPU flush is triggered to reduce memory load (1 by default, 0 to disable)
        d3d12.UploadHeap.BigBlock.MaxAllocationSize:
          hint: |-
            Maximum allocation size on the big block allocator for upload memory
        d3d12.UploadHeap.BigBlock.PoolSize:
          hint: |-
            Pool size for the upload memory big block allocator
        d3d12.UploadHeap.SmallBlock.MaxAllocationSize:
          hint: |-
            Maximum allocation size on the small block allocator for upload memory
        d3d12.UploadHeap.SmallBlock.PoolSize:
          hint: |-
            Pool size for the upload memory small block allocator
        D3D12.UseUpdateTexture3DComputeShader:
          hint: |-
            If enabled, use a compute shader for UpdateTexture3D. Avoids alignment restrictions 0: off (default)
             1: on
        d3d12.VRAMBufferPoolDefrag:
          hint: |-
            Defrag the VRAM buffer pool
        d3d12.VRAMBufferPoolDefrag.MaxCopySizePerFrame:
          hint: |-
            Max amount of data to copy during defragmentation in a single frame (default 32MB)
        d3d12.VRAMTexturePoolDefrag:
          hint: |-
            Defrag the VRAM Texture pool (enabled by default)
        d3d12.VRAMTexturePoolDefrag.MaxCopySizePerFrame:
          hint: |-
            Max amount of data to copy during defragmentation in a single frame (default 32MB)
        D3D12.ZeroBufferSizeInMB:
          hint: |-
            The D3D12 RHI needs a static allocation of zeroes to use when streaming textures asynchronously. It should be large enough to support the largest mipmap you need to stream. The default is 4MB.
        DDC.Graph:
          hint: |-
            Name of the graph to use for the Derived Data Cache.
        demo.AsyncLoadWorld:
          hint: |-
            If 1, we will use seamless server travel to load the replay world asynchronously
        demo.CheckpointSaveMaxMSPerFrameOverride:
          hint: |-
            If >= 0, this value will override the CheckpointSaveMaxMSPerFrame member variable, which is the maximum time allowed each frame to spend on saving a checkpoint. If 0, it will save the checkpoint in a single frame, regardless of how long it takes.
        demo.CheckpointUploadDelayInSeconds:
          hint: |-
        demo.ClientRecordAsyncEndOfFrame:
          hint: |-
            If true, TickFlush will be called on a thread in parallel with Slate.
        demo.CullDistanceOverride:
          hint: |-
            If > 0, will represent distance from any viewer where actors will stop being recorded.
        demo.DecreaseRepPrioritizeThreshold:
          hint: |-
            The % of Replicated to Prioritized actors at which prioritize time will be increased.
        demo.EnableCheckpoints:
          hint: |-
            Whether or not checkpoints save on the server
        Demo.ExceededBudgetWarningInterval:
          hint: |-
            When > 0, we will wait this many seconds between logging warnings for demo recording exceeding time budgets.
        demo.FastForwardDestroyTearOffActors:
          hint: |-
            If true, the driver will destroy any torn-off actors immediately while fast-forwarding a replay.
        demo.FastForwardIgnoreRPCs:
          hint: |-
            If true, RPCs will be discarded during playback fast forward.
        demo.FastForwardLevelsPausePlayback:
          hint: |-
            If true, pause channels and playback while fast forward levels task is running.
        demo.FastForwardSkipRepNotifies:
          hint: |-
            If true, the driver will optimize fast-forwarding by deferring calls to RepNotify functions until the fast-forward is complete. 
        demo.ForceDisableAsyncPackageMapLoading:
          hint: |-
            If true, async package map loading of network assets will be disabled.
        demo.GotoTimeInSeconds:
          hint: |-
            For testing only, jump to a particular time
        demo.IncreaseRepPrioritizeThreshold:
          hint: |-
            The % of Replicated to Prioritized actors at which prioritize time will be decreased.
        demo.InternalPauseChannels:
          hint: |-
            If true, run standard logic for PauseChannels rather than letting the game handle it via FOnPauseChannelsDelegate.
        demo.JumpToEndOfLiveReplay:
          hint: |-
            If true, fast forward to a few seconds before the end when starting playback, if the replay is still being recorded.
        demo.LateActorDormancyCheck:
          hint: |-
            If true, check if an actor should become dormant as late as possible- when serializing it to the demo archive.
        demo.LoadCheckpointGarbageCollect:
          hint: |-
            If nonzero, CollectGarbage will be called during LoadCheckpoint after the old actors and connection are cleaned up.
        demo.Loop:
          hint: |-
            <1> : play replay from beginning once it reaches the end / <0> : stop replay at the end
        demo.LoopCount:
          hint: |-
            If > 1, will play the replay that many times before stopping.
        demo.MaximumRepPrioritizePercent:
          hint: |-
            Maximum percent of time that may be spent prioritizing actors, regardless of throttling.
        demo.MinimumRepPrioritizePercent:
          hint: |-
            Minimum percent of time that must be spent prioritizing actors, regardless of throttling.
        demo.MinRecordHz:
          hint: |-
            Minimum number of demo frames recorded per second (use with care)
        demo.QueueCheckpointChannels:
          hint: |-
            If true, the driver will put all channels created during checkpoint loading into queuing mode, to amortize the cost of spawning new actors across multiple frames.
        demo.RecordHz:
          hint: |-
            Maximum number of demo frames recorded per second
        demo.RecordHzWhenNotRelevant:
          hint: |-
            Record at this frequency when actor is not relevant.
        demo.RecordUnicastRPCs:
          hint: |-
            When true, also record unicast client rpcs on actors that share a net driver name with the demo driver.
        demo.ReplayStreamerAutoDemoPrefix:
          hint: |-
            Prefix to use when generating automatic demo names.
        demo.ReplayStreamerAutoDemoUseDateTimePostfix:
          hint: |-
            When enabled, uses the current time as a postfix for automatic demo names instead of indices
        demo.SaveRollbackActorState:
          hint: |-
            If true, rollback actors will save some replicated state to apply when respawned.
        demo.SkipTime:
          hint: |-
            Skip fixed amount of network replay time (in seconds)
        demo.TimeDilation:
          hint: |-
            Override time dilation during demo playback (-1 = don't override)
        demo.UseAdaptiveReplayUpdateFrequency:
          hint: |-
            If 1, NetUpdateFrequency will be calculated based on how often actors actually write something when recording to a replay
        demo.UseNetRelevancy:
          hint: |-
            If 1, will enable relevancy checks and distance culling, using all connected clients as reference.
        demo.WithDeltaCheckpoints:
          hint: |-
            If true, record checkpoints as a delta from the previous checkpoint.
        demo.WithGameSpecificFrameData:
          hint: |-
            If true, allow game specific data to be recorded with each demo frame.
        demo.WithLevelStreamingFixes:
          hint: |-
            If 1, provides fixes for level streaming (but breaks backwards compatibility).
        demo.WithTimeBurnIn:
          hint: |-
            If true, adds an on screen message with the current DemoTime and Changelist.
        DisableOrphanPins:
          hint: |-
            0=Orphan pins are enabled (default), 1=Orphan pins are disabled (note: this option will go away in the future)
        DoPooledThreadWaitTimeouts:
          hint: |-
            If enabled, uses the old behaviour for waking up pool threads every 10ms. Otherwise, lets pooled threads sleep until data arrives.
        dp.AllowScalabilityGroupsToChangeAtRuntime:
          hint: |-
            If true, device profile scalability bucket cvars will be set with scalabilitypriority which allows them to be changed at runtime. Off by default.
        dp.Override:
          hint: |-
            DeviceProfile override - setting this will use the named DP as the active DP. In addition, it will restore any
             previous overrides before setting (does a dp.OverridePop before setting after the first time).
             The commandline -dp option will override this on startup, but not when setting this at runtime
        DumpCopyPropertiesForUnrelatedObjects:
          hint: |-
            Dump the objects that are cross class copied
        DumpStatPackets:
          hint: |-
            If true, dump stat packets.
        Editor.AsyncAssetCompilation:
          hint: |-
            1 - Async assets compilation is enabled.
            2 - Async assets compilation is enabled but on pause (for debugging).
            When enabled, assets will be replaced by placeholders until they are ready
            to reduce stalls on the game thread and improve overall editor performance.
        Editor.AsyncAssetCompilationMaxConcurrency:
          hint: |-
            Set the maximum number of concurrent assets compilation, -1 for unlimited.
        Editor.AsyncAssetCompilationMaxMemoryUsage:
          hint: |-
            0 - No hard memory limit, will be tuned against system available memory (recommended default).
            N - Try to limit total memory usage for asset compilation to this amount (in GB).
            Try to stay under specified memory limit for asset compilation by reducing concurrency when under memory pressure.
        Editor.AsyncAssetCompilationMemoryPerCore:
          hint: |-
            0 - No memory limit per asset.
            N - Dynamically adjust concurrency limit by dividing free system memory by this number (in GB).
            Limit concurrency for async processing based on RAM available.
        Editor.AsyncAssetCompilationResume:
          hint: |-
            Number of queued work to resume while paused.
        Editor.AsyncSkeletalMeshCompilation:
          hint: |-
            1 - Async skeletal meshes compilation is enabled.
            2 - Async skeletal meshes compilation is enabled but on pause (for debugging).
            When enabled, skeletal meshes will be replaced by placeholders until they are ready
            to reduce stalls on the game thread and improve overall editor performance.
        Editor.AsyncSkeletalMeshCompilationMaxConcurrency:
          hint: |-
            Set the maximum number of concurrent skeletal meshes compilation, -1 for unlimited.
        Editor.AsyncSkeletalMeshCompilationResume:
          hint: |-
            Number of queued work to resume while paused.
        Editor.AsyncStaticMeshCompilation:
          hint: |-
            1 - Async static meshes compilation is enabled.
            2 - Async static meshes compilation is enabled but on pause (for debugging).
            When enabled, static meshes will be replaced by placeholders until they are ready
            to reduce stalls on the game thread and improve overall editor performance.
        Editor.AsyncStaticMeshCompilationMaxConcurrency:
          hint: |-
            Set the maximum number of concurrent static meshes compilation, -1 for unlimited.
        Editor.AsyncStaticMeshCompilationResume:
          hint: |-
            Number of queued work to resume while paused.
        Editor.AsyncStaticMeshPlayInEditorDebugDraw:
          hint: |-
            0 - Debug draw for async static mesh compilation is disabled.
            1 - Debug draw for async static mesh compilation is enabled.
            The collision sphere around the player is drawn in white and can be adjusted with Editor.AsyncStaticMeshPlayInEditorDistance
            Any static meshes affecting the physics that are still being compiled will have their bounding box drawn in green.
            Any static meshes that were waited on due to being too close to the player will have their bounding box drawn in red for a couple of seconds.
        Editor.AsyncStaticMeshPlayInEditorDistance:
          hint: |-
            Scale applied to the player bounding sphere to determine how far away to force meshes compilation before resuming play.
            The effect can be seen during play session when Editor.AsyncStaticMeshPlayInEditorDebugDraw = 1.
        Editor.AsyncStaticMeshPlayInEditorMode:
          hint: |-
            0 - Wait until all static meshes are built before entering PIE. (Slowest but causes no visual or behavior artifacts.) 
            1 - Wait until all static meshes affecting navigation and physics are built before entering PIE. (Some visuals might be missing during compilation.)
            2 - Wait only on static meshes affecting navigation and physics when they are close to the player. (Fastest while still preventing falling through the floor and going through objects.)
        Editor.AsyncTextureCompilation:
          hint: |-
            1 - Async textures compilation is enabled.
            2 - Async textures compilation is enabled but on pause (for debugging).
            When enabled, textures will be replaced by placeholders until they are ready
            to reduce stalls on the game thread and improve overall editor performance.
        Editor.AsyncTextureCompilationMaxConcurrency:
          hint: |-
            Set the maximum number of concurrent textures compilation, -1 for unlimited.
        Editor.AsyncTextureCompilationResume:
          hint: |-
            Number of queued work to resume while paused.
        Editor.HDRNITLevel:
          hint: |-
            Sets The desired NIT level of the editor when running on HDR
        Editor.HDRSupport:
          hint: |-
            Sets whether or not we should allow the editor to run on HDR monitors
        Editor.ObjectReverseLookupMode:
          hint: |-
            0 - Reverse lookup tables are computed every time they are needed (slower behavior) 
            1 - Maintain permanent reverse lookup tables (faster behavior) 
            2 - Comparison mode (slowest to do validation between both mode) 
        Editor.ReflectEditorLevelVisibilityWithGame:
          hint: |-
            Enables the transaction of game visibility state when editor visibility state changes.
            0 - game state is *not* reflected with editor.
            1 - game state is relfected with editor.
        Editor.UseLegacyGetReferencersForDeletion:
          hint: |-
            Choose the algorithm to be used when detecting referencers of any assets/objects being deleted.
            0: Use the most optimized version (default)
            1: Use the slower legacy version (for debug/comparison)
        EnableHighDPIAwareness:
          hint: |-
            Enables or disables high dpi mode
        EnableLeakTest:
          hint: |-
            If set to 1, enables leak test, for testing stats based memory profiler
        Engine.DelayTrimMemoryDuringMapLoadMode:
          hint: |-
            0: TrimMemory during LoadMap as normal
            1: Delay TrimMemory until the end of LoadMap (initial boot up)
            2: Delay TrimMemory in _every_ LoadMap call
        Engine.DoAsyncLoadingWhileWaitingForVSync:
          hint: |-
            If true process async loading while we wait for vsync.
        Engine.MinNumOverlapsToUseTMap:
          hint: |-
            Min number of overlaps required before using a TMap for deduplication
        Engine.SupressWarningsInOnScreenDisplay:
          hint: |-
            0: Show both errors and warnings on screen, 1: Show only errors on screen (in either case only when DurationOfErrorsAndWarningsOnHUD is greater than zero)
        fc.BlockSize:
          hint: |-
            Size of each block in KB in the global file cache object
            Should match packaging compression block size for optimal reading from packege
        fc.NumBlocks:
          hint: |-
            Number of blocks in the global file cache object
        foliage.CullAll:
          hint: |-
            If greater than zero, everything is considered culled.
        foliage.CullAllInVertexShader:
          hint: |-
            Debugging, if this is greater than 0, cull all instances in the vertex shader.
        foliage.DebugBuildTreeAsyncDelayInSeconds:
          hint: |-
            Adds a delay (in seconds) to BuildTreeAsync tasks for debugging
        foliage.DensityScale:
          hint: |-
            Controls the amount of foliage to render. Foliage must opt-in to density scaling through the foliage type.
        foliage.DisableCull:
          hint: |-
            If greater than zero, no culling occurs based on frustum.
        foliage.DiscardDataOnLoad:
          hint: |-
            1: Discard foliage data on load if the foliage type has it enabled; 0: Keep foliage data regardless of whether the foliage type has it enabled or not (requires reloading level)
        foliage.DitheredLOD:
          hint: |-
            If greater than zero, dithered LOD is used, otherwise popping LOD is used.
        foliage.ForceLOD:
          hint: |-
            If greater than or equal to zero, forces the foliage LOD to that level.
        foliage.InstanceRuns:
          hint: |-
            Whether to use the InstanceRuns feature of FMeshBatch to compress foliage draw call data sent to the renderer.  Not supported by the Mesh Draw Command pipeline.
        foliage.LODDistanceScale:
          hint: |-
            Scale factor for the distance used in computing LOD for foliage.
        foliage.MaxOcclusionQueriesPerComponent:
          hint: |-
            Controls the granularity of occlusion culling. 16-128 is a reasonable range.
        foliage.MaxTrianglesToRender:
          hint: |-
            This is an absolute limit on the number of foliage triangles to render in one traversal. This is used to prevent a silly LOD parameter mistake from causing the OS to kill the GPU.
        foliage.MinimumScreenSize:
          hint: |-
            This controls the screen size at which we cull foliage instances entirely.
        foliage.MinInstancesPerOcclusionQuery:
          hint: |-
            Controls the granualrity of occlusion culling. 1024 to 65536 is a reasonable range. This is not exact, actual minimum might be off by a factor of two.
        foliage.MinLOD:
          hint: |-
            Used to discard the top LODs for performance evaluation. -1: Disable all effects of this cvar.
        foliage.MinOcclusionQueriesPerComponent:
          hint: |-
            Controls the granularity of occlusion culling. 2 should be the Min.
        foliage.MinVertsToSplitNode:
          hint: |-
            Controls the accuracy between culling and LOD accuracy and culling and CPU performance.
        foliage.OffGroundThreshold:
          hint: |-
            Maximum distance from base component (in local space) at which instance is still considered as valid
        foliage.OnlyLOD:
          hint: |-
            If greater than or equal to zero, only renders the foliage LOD at that level.
        foliage.OverestimateLOD:
          hint: |-
            If greater than zero and dithered LOD is not used, then we use an overestimate of LOD instead of an underestimate.
        foliage.RandomLODRange:
          hint: |-
            Random distance added to each instance distance to compute LOD.
        foliage.SplitFactor:
          hint: |-
            This controls the branching factor of the foliage tree.
        ForceDecompressionFails:
          hint: |-
            If > 0, then force decompression failures to test the panic sync read fallback.
        ForcePakProcessReads:
          hint: |-
            If true, then Asynchronous reads from pak files will always used the FPakProcessedReadRequest system that is ordinarily only used on compressed files.
        framegrabber.framelatency:
          hint: |-
            How many frames to wait before reading back a frame. 0 frames will work but cause a performance regression due to CPU and GPU syncing up.
        FreezeAtPosition:
          hint: |-
            This console variable stores the position and rotation for the FreezeAt command which allows
            to lock the camera in order to provide more deterministic render profiling.
            The FreezeAtPosition can be set in the ConsoleVariables.ini (start the map with MAPNAME?bTourist=1).
            Also see the FreezeAt command console command.
            The number syntax if the same as the one used by the BugIt command:
             The first three values define the position, the next three define the rotation.
            Example:
             FreezeAtPosition 2819.5520 416.2633 75.1500 65378 -25879 0
        FullSizeUnitGraph:
          hint: |-
            If true, the unit graph is the old full size, full brightness version.
        g.bEnablePendingCleanupObjectsCommandBatching:
          hint: |-
            Enable batching PendingCleanupObjects destruction.
        g.debug.vlog.AttributeGraph:
          hint: |-
            Controlls whether Attribute changes are being recorded by VisLog
        g.DebugCameraTraceComplex:
          hint: |-
            Whether DebugCamera should use complex or simple collision for the line trace.
            1: complex collision, 0: simple collision
        g.TimeoutForBlockOnRenderFence:
          hint: |-
            Number of milliseconds the game thread should wait before failing when waiting on a render thread fence.
        g.TimeToBlockOnRenderFence:
          hint: |-
            Number of milliseconds the game thread should block when waiting on a render thread fence.
        GameFeaturePlugin.ShouldLogMountedFiles:
          hint: |-
            Should the newly mounted files be logged.
        GameplayCue.AddToGlobalSet.DebugTag:
          hint: |-
            Debug Tag adding to global set
        GameplayCue.Translator.DebugTag:
          hint: |-
            Debug Tag in gameplay cue translation
        GameplayTags.EnableDetailedStats:
          hint: |-
            Runtime toggle for verbose CPU profiling stats
        GameplayTags.PrintNetIndiceAssignment:
          hint: |-
            Logs GameplayTag NetIndice assignment
        GameplayTags.PrintReportOnShutdown:
          hint: |-
            Print gameplay tag replication report on shutdown
        geometry.DynamicMesh.DupeStashTimeout:
          hint: |-
            Timeout in seconds for references held by internal UDynamicMesh duplication helper system. See FDynamicMeshCopyHelper.
        geometry.DynamicMesh.MaxPoolSize:
          hint: |-
            Maximum number of meshes a UDynamicMeshPool will allow to be in the pool before running garbage collection
        geometry.DynamicMesh.TextBasedDupeTriThreshold:
          hint: |-
            Triangle count threshold for text-based UDynamicMesh duplication using Base64. Large values are quite slow.
        geometry.MeshSceneAdapter.SingleThreaded:
          hint: |-
            Determines whether or not to use multi-threading in MeshSceneAdapter.
        GeometryCache.Codec.Debug:
          hint: |-
            Enables debug logging for the codec.
        GeometryCache.InterpolateFrames:
          hint: |-
            Interpolate between geometry cache frames (if topology allows this).
        GeometryCache.LookaheadSeconds:
          hint: |-
            The amount of data (expressed in seconds of animation) to try and keep resident in advance for geometry caches. Note this works regardless of the playback direction.
        GeometryCache.OffloadUpdate:
          hint: |-
            Offloat some updates from the render thread to the workers & RHI threads.
        GeometryCache.PrefetchSeconds:
          hint: |-
            The amount of data (expressed in seconds of animation) to preload of geometry caches. This is the data blockingly loaded at component spawn time.
        GeometryCache.Streamer.BlockTillFinishStreaming:
          hint: |-
            Force the GeometryCache streamer to block until it has finished streaming all the requested frames
        GeometryCache.Streamer.ShowNotification:
          hint: |-
            Show notification while the GeometryCache streamer is streaming data
        GeometryCache.TrailingSeconds:
          hint: |-
            The amount of data (expressed in seconds of animation) to try and keep resident inverse to the playback direction for geometry caches.
        GFN.ForceProcessGFNWidgetActionZones:
          hint: |-
            Force the processing of GFN Actions Zones even if we aren't running in GFN
        GFN.WidgetActionZonesProcessDelay:
          hint: |-
            Intervals in seconds between each processing of the GFN Action Zones
        Gizmos.UseLegacyWidget:
          hint: |-
            Specify whether to use selection-based gizmos or legacy widget
            0 = enable UE5 transform and other selection-based gizmos.
            1 = enable legacy UE4 transform widget.
        GPUSort.DebugOffsets:
          hint: |-
            Debug GPU sort offsets.
        GPUSort.DebugSort:
          hint: |-
            Debug GPU sorting.
        grass.CaptureNextGrassUpdate:
          hint: |-
            Trigger a renderdoc capture for the next X grass updates (calls to RenderGrassMap or RenderGrassMaps
        grass.CullDistanceScale:
          hint: |-
            Multiplier on all grass cull distances.
        grass.CullSubsections:
          hint: |-
            1: Cull each foliage component; 0: Cull only based on the landscape component.
        grass.densityScale:
          hint: |-
            Multiplier on all grass densities.
        grass.DisableDynamicShadows:
          hint: |-
            0: Dynamic shadows from grass follow the grass type bCastDynamicShadow flag; 1: Dynamic shadows are disabled for all grass
        grass.DisableGPUCull:
          hint: |-
            For debugging. Set this to zero to see where the grass is generated. Useful for tweaking the guard bands.
        grass.DiscardDataOnLoad:
          hint: |-
            1: Discard grass data on load (disables grass); 0: Keep grass data (requires reloading level)
        grass.Enable:
          hint: |-
            1: Enable Grass; 0: Disable Grass
        grass.GuardBandDiscardMultiplier:
          hint: |-
            Used to control discarding in the grass system. Approximate range, 1-4. Multiplied by the cull distance to control when we discard grass components.
        grass.GuardBandMultiplier:
          hint: |-
            Used to control discarding in the grass system. Approximate range, 1-4. Multiplied by the cull distance to control when we add grass components.
        grass.IgnoreExcludeBoxes:
          hint: |-
            For debugging. Ignores any exclusion boxes.
        grass.MaxAsyncTasks:
          hint: |-
            Used to control the number of hierarchical components created at a time.
        grass.MaxCreatePerFrame:
          hint: |-
            Maximum number of Grass components to create per frame
        grass.MaxInstancesPerComponent:
          hint: |-
            Used to control the number of hierarchical components created. More can be more efficient, but can be hitchy as new components come into range
        grass.MinFramesToKeepGrass:
          hint: |-
            Minimum number of frames before cached grass can be discarded; used to prevent thrashing.
        grass.MinTimeToKeepGrass:
          hint: |-
            Minimum number of seconds before cached grass can be discarded; used to prevent thrashing.
        grass.PrerenderGrassmaps:
          hint: |-
            1: Pre-render grass maps for all components in the editor; 0: Generate grass maps on demand while moving through the editor
        grass.TickInterval:
          hint: |-
            Number of frames between grass ticks.
        grass.UpdateAllOnRebuild:
          hint: |-
        grass.UseHaltonDistribution:
          hint: |-
            Used to control the distribution of grass instances. If non-zero, use a halton sequence.
        grass.UseStreamingManagerForCameras:
          hint: |-
            1: Use Streaming Manager; 0: Use ViewLocationsRenderedLastFrame
        GroomCache.EnableStreaming:
          hint: |-
            Enable groom cache streaming and prebuffering. Do not switch while groom caches are in use.
        health.logHealthSnapshot:
          hint: |-
            Log health snapshot)
        ImageWriteQueue.MaxConcurrency:
          hint: |-
            The maximum number of async image writes allowable at any given time.Default is to use the number of cores available.
        ImageWriteQueue.MaxQueueSize:
          hint: |-
            The maximum number of queued image write tasks allowable before the queue will block when adding more.Default is to use 4 times the number of cores available or 16 when multithreading is disabled on the command line.
        ImgMedia.MipMapDebug:
          hint: |-
            Display debug on mipmaps used by the ImgMedia plugin.
               0: off (default)
               1: on
        InGamePerformanceTracking.Enabled:
          hint: |-
            If in-game performance tracking is enabled. Most games will likely not use or need this so it should be left disabled.
        InGamePerformanceTracking.HistorySize:
          hint: |-
            How many frames in game performance tracking should store in it's history.
        input.DisableHaptics:
          hint: |-
            If greater than zero, no haptic feedback is processed.
        input.GlobalAxisConfigMode:
          hint: |-
            Whether or not to apply Global Axis Config settings. 0 = Default (Mouse Only), 1 = All, 2 = None
        Insights.RecordAllWorldTypes:
          hint: |-
            Gameplay Insights recording by default only records Game and PIE worlds.Toggle this value to 1 to record other world types.
        landscape.BrushFramePadding:
          hint: |-
            The number of frames to wait before pushing a full Landscape update when a brush is calling RequestLandscapeUpdate
        landscape.BrushOptim:
          hint: |-
            This will enable landscape layers optim.
        Landscape.DebugViewMode:
          hint: |-
            Change the view mode of the landscape rendering. Valid Input: 0 = Normal, 2 = DebugLayer, 3 = LayerDensity, 4 = LayerUsage, 5 = LOD Distribution, 6 = WireframeOnTop, 7 = LayerContribution
        landscape.EditLayersLocalMerge.Enable:
          hint: |-
            This will allow the new merge algorithm (that merges layers at the landscape component level) to be used on landscapes that support it. This is a temporary measure while waiting for non-compatible landscapes to be deprecated. 
        landscape.EditLayersLocalMerge.MaxComponentsPerHeightmapResolveBatch:
          hint: |-
            Number of components being rendered in a single batch when resolving heightmaps. The higher the number, the more heightmaps can be resolved in a single batch (and the higher the GPU memory consumption since more transient textures will be needed in memory at a time)
        landscape.EditLayersLocalMerge.MaxComponentsPerWeightmapResolveBatch:
          hint: |-
            Number of components being rendered in a single batch when resolving weightmaps. The higher the number, the more weightmaps can be resolved in a single batch (and the higher the GPU memory consumption since more transient textures will be needed in memory at a time)
        landscape.ForceFlush:
          hint: |-
            This will force a render flush every frame when landscape editing.
        landscape.ForceLayersUpdate:
          hint: |-
            This will force landscape edit layers to be update every frame, rather than when requested only.
        landscape.Optim:
          hint: |-
            This will enable landscape layers optim.
        landscape.OutputDiffBitmap:
          hint: |-
            This will save images for readback textures that have changed in the last layer blend phase. (= 1 Heightmap Diff, = 2 Weightmap Diff, = 3 All Diffs
        landscape.OutputLayersRTContent:
          hint: |-
            This will output the content of render target. This is used for debugging only.
        landscape.OutputLayersWeightmapsRTContent:
          hint: |-
            This will output the content of render target used for weightmap. This is used for debugging only.
        landscape.RenderCaptureLayersNextHeightmapDraws:
          hint: |-
            Trigger N render capture during the next heightmap draw calls.
        landscape.RenderCaptureLayersNextWeightmapDraws:
          hint: |-
            Trigger N render capture during the next weightmap draw calls.
        landscape.ShowDirty:
          hint: |-
            This will highlight the data that has changed during the layer blend phase.
        landscape.SimulatePhysics:
          hint: |-
            This will enable physic simulation on worlds containing landscape.
        landscape.SplineFalloffModulation:
          hint: |-
            Enable Texture Modulation fo Spline Layer Falloff.
        landscape.TrackDirty:
          hint: |-
            This will track the accumulation of data changes during the layer blend phase.
        landscape.ValidateProxyWeightmapUsages:
          hint: |-
            This will validate that weightmap usages in landscape proxies and their components don't get desynchronized with the landscape component layer allocations.
        LayoutUV.TracePackingForInputHash:
          hint: |-
            Activate tracing for the input hash specified in the value.
        levelinstance.debug.forcelevelstreaming:
          hint: |-
            Set to 1 to force Level Instance to be streamed instead of embedded in World Partition grid.
        LevelSequence.DefaultClockSource:
          hint: |-
            Specifies the default clock source for newly created level sequences. 0: Tick, 1: Platform, 2: Audio, 3: RelativeTimecode, 4: Timecode, 5: Custom
        LevelSequence.DefaultDisplayRate:
          hint: |-
            Specifies the default display frame rate for newly created level sequences; also defines frame locked frame rate where sequences are set to be frame locked. Examples: 30 fps, 120/1 (120 fps), 30000/1001 (29.97), 0.01s (10ms).
        LevelSequence.DefaultLockEngineToDisplayRate:
          hint: |-
            0: Playback locked to playback frames
            1: Unlocked playback with sub frame interpolation
        LevelSequence.DefaultTickResolution:
          hint: |-
            Specifies the default tick resolution for newly created level sequences. Examples: 30 fps, 120/1 (120 fps), 30000/1001 (29.97), 0.01s (10ms).
        LevelSequence.InvalidBindingTagWarnings:
          hint: |-
            Whether to emit a warning when invalid object binding tags are used to override bindings or not.
        linker.TreatVerifyImportErrorsAsWarnings:
          hint: |-
            If true, the errors emitted due to verify import failures will be warnings instead.
        LiveCoding.ConsolePath:
          hint: |-
            Path to the live coding console application
        LiveCoding.SourceProject:
          hint: |-
            Path to the project that this target was built from
        LiveLink.Client.MaxNewFrameDataPerUpdate:
          hint: |-
            Maximun number of new frame data that can be added in a single UE frame.
        LiveLink.Client.MaxNewStaticDataPerUpdate:
          hint: |-
            Maximun number of new static data that can be added in a single UE frame.
        LiveLink.Component.EnableLiveLinkEvaluation:
          hint: |-
            Whether LiveLink components should evaluate their subject.
        LiveLink.TimedDataInput.MaxBufferSize:
          hint: |-
            The max size the timed data input is allowed to set the buffer size.
        LiveLink.TimedDataInput.MinBufferSize:
          hint: |-
            The min size the timed data input is allowed to set the buffer size.
        LiveLink.TimedDataInput.NumFramesForSmoothOffset:
          hint: |-
            The fractional number of source frames used an offset to achieve smooth evaluation time.
        LiveLink.TimedDataInput.UpdateClockOffset:
          hint: |-
            By default, clock offset is continuously updated for each source. You can pause it if desired with this cvar and offset will be fixed to its value.
        LLM.LLMHeaderMaxSize:
          hint: |-
            The maximum total number of characters allowed for all of the LLM titles
        LLM.LLMWriteInterval:
          hint: |-
            The number of seconds between each line in the LLM csv (zero to write every frame)
        LLM.TrackPeaks:
          hint: |-
            Track peak memory in each category since process start rather than current frame's value.
        Localization.HangulTextWrappingMethod:
          hint: |-
            0: PerSyllable, 1: PerWord (default).
        Localization.SpanishUsesRAENumberFormat:
          hint: |-
            0: Disabled (CLDR format), 1: Enabled (RAE format, default).
        lod.TemporalLag:
          hint: |-
            This controls the the time lag for temporal LOD, in seconds.
        log.Category:
          hint: |-
            Defines if the categoy is included in each line in the log file and in what form.
              0 = Do not log category
              2 = Log the category (default)
        log.flushInterval:
          hint: |-
            Logging interval in seconds
        log.Timestamp:
          hint: |-
            Defines if time is included in each line in the log file and in what form. Layout: [time][frame mod 1000]
              0 = Do not display log timestamps
              1 = Log time stamps in UTC and frame time (default) e.g. [2015.11.25-21.28.50:803][376]
              2 = Log timestamps in seconds elapsed since GStartTime e.g. [0130.29][420]  3 = Log timestamps in local time and frame time e.g. [2017.08.04-17.59.50:803][420]  4 = Log timestamps with the engine's timecode and frame time e.g. [17:59:50:18][420]
        LogBlueprintComponentInstanceCalls:
          hint: |-
            Log Blueprint Component instance calls; debugging.
        LogGameThreadFNameChurn.Enable:
          hint: |-
            If > 0, then collect sample game thread fname create, periodically print a report of the worst offenders.
        LogGameThreadFNameChurn.PrintFrequency:
          hint: |-
            Number of frames between churn reports.
        LogGameThreadFNameChurn.RemoveAliases:
          hint: |-
            If > 0 then remove aliases from the counting process. This essentialy merges addresses that have the same human readable string. It is slower.
        LogGameThreadFNameChurn.SampleFrequency:
          hint: |-
            Number of fname creates per sample. This is used to prevent churn sampling from slowing the game down too much.
        LogGameThreadFNameChurn.StackIgnore:
          hint: |-
            Number of items to discard from the top of a stack frame.
        LogGameThreadFNameChurn.StackLen:
          hint: |-
            Maximum number of stack frame items to keep. This improves aggregation because calls that originate from multiple places but end up in the same place will be accounted together.
        LogGameThreadFNameChurn.Threshhold:
          hint: |-
            Minimum average number of fname creations per frame to include in the report.
        LogGameThreadMallocChurn.Enable:
          hint: |-
            If > 0, then collect sample game thread malloc, realloc and free, periodically print a report of the worst offenders.
        LogGameThreadMallocChurn.PrintFrequency:
          hint: |-
            Number of frames between churn reports.
        LogGameThreadMallocChurn.RemoveAliases:
          hint: |-
            If > 0 then remove aliases from the counting process. This essentialy merges addresses that have the same human readable string. It is slower.
        LogGameThreadMallocChurn.SampleFrequency:
          hint: |-
            Number of allocs to skip between samples. This is used to prevent churn sampling from slowing the game down too much.
        LogGameThreadMallocChurn.StackIgnore:
          hint: |-
            Number of items to discard from the top of a stack frame.
        LogGameThreadMallocChurn.StackLen:
          hint: |-
            Maximum number of stack frame items to keep. This improves aggregation because calls that originate from multiple places but end up in the same place will be accounted together.
        LogGameThreadMallocChurn.Threshhold:
          hint: |-
            Minimum average number of allocs per frame to include in the report.
        MallocBinned2.FlushThreadCacheMaxWaitTime:
          hint: |-
            The threshold of time before warning about FlushCurrentThreadCache taking too long (seconds).
        MallocBinned3.FlushThreadCacheMaxWaitTime:
          hint: |-
            The threshold of time before warning about FlushCurrentThreadCache taking too long (seconds).
        mass.FullyParallel:
          hint: |-
            Enables mass processing distribution to all available thread (via the task graph)
        mass.LogProcessingGraph:
          hint: |-
            When enabled will log task graph tasks created while dispatching processors to other threads, along with their dependencies
        mass.ParallelGroups:
          hint: |-
            Enables mass processing groups distribution to all available threads (via the task graph)
        mass.PostponedTaskWaitTimeWarningLevel:
          hint: |-
            if waiting for postponed task's dependencies exceeds this number an error will be logged
        massentities.EnableCommandDetailedStats:
          hint: |-
            Set to true create a dedicated stat per type of command.
        MaterialBaking.RenderDocCapture:
          hint: |-
            Determines whether or not to trigger a RenderDoc capture.
            0: Turned Off
            1: Turned On
        MaterialBaking.SaveIntermediateTextures:
          hint: |-
            Determines whether or not to save out intermediate BMP images for each flattened material property.
            0: Turned Off
            1: Turned On
        MaterialBaking.UseMaterialProxyCaching:
          hint: |-
            Determines whether or not Material Proxies should be cached to speed up material baking.
            0: Turned Off
            1: Turned On
        MaterialUtilities.WarmupFrames:
          hint: |-
            Number of frames to render before each capture in order to warmup various rendering systems (VT/Nanite/etc).
        MaxAssetFullPath:
          hint: |-
            Maximum full path name of an asset.
        MediaIO.TimedDataChannel.MaxBufferSize:
          hint: |-
            The max size the MediaIO channels is allowed to set the buffer size.
        MediaUtils.StartupProfile:
          hint: |-
            Startup Media Profile
        memory.logGenericPlatformMemoryStats:
          hint: |-
            Report Platform Memory Stats)
        memory.MemoryPressureCriticalThresholdMB:
          hint: |-
            When the available physical memory drops below this threshold memory stats will consider this to be at critical pressure.
            Where a platform can specifically state it's memory pressure this test maybe ignored.
            0 (default) critical pressure will not use the threshold.
        mmio.enable:
          hint: |-
            If > 0, then enable memory mapped IO on platforms that support it.
        Mobile.EnableUITextScaling:
          hint: |-
            Enables Mobile UI Text Scaling
        modeling.EnablePolyModel:
          hint: |-
            Enable prototype PolyEdit tab
        modeling.EnablePrototypes:
          hint: |-
            Enable unsupported Experimental prototype Modeling Tools
        modeling.EnableVolumeSnapping:
          hint: |-
            Enable snapping to volumes
        modeling.PolyEdit.EdgeLimit:
          hint: |-
            Maximal number of edges that PolyEd and TriEd support. Meshes that would require more than this number of edges to be rendered in PolyEd or TriEd force the tools to be disabled to avoid hanging the editor.
        modeling.VolumeMaxTriCount:
          hint: |-
            Limit on triangle count for Volumes that will be emitted by modeling tools. Meshes above this limit will be auto-simplified.
        modeling.WorldRenderCapture.VTWarmupFrames:
          hint: |-
            Number of frames to render before each capture in order to warmup the VT.
        MovieRenderPipeline.FrameStepDebug:
          hint: |-
            How many frames should the Movie Render Pipeline produce before pausing. Set to zero on launch to stall at the first frame. Debug tool.
            -1: Don't pause after each frame (default)
            0: Process engine ticks but don't progress in the movie rendering pipeline.
            1+: Run this many loops of the movie rendering pipeline before pausing again.
        MovieRenderPipeline.WaveOutput.WriteDelay:
          hint: |-
            How long (in seconds) should the .wav writer stall the main thread to wait for the async write to finish
            before moving on? If your .wav files take a long time to write and they're not finished by the time the
            encoder runs, the encoder may fail.
        MovieScene.LegacyConversionFrameRate:
          hint: |-
            Specifies default tick resolution for UMovieScene data saved before 4.20 (default: 60000fps). Examples: 60000 fps, 120/1 (120 fps), 30000/1001 (29.97), 0.01s (10ms).
        MovieScene.RemoveMutedTracksOnCook:
          hint: |-
            If 1 remove muted tracks on cook, otherwise leave as is.
        n.bNavmeshAllowPartitionedBuildingFromEditor:
          hint: |-
            Enable experimental navmesh partition building.
        n.GNavmeshDebugTileX:
          hint: |-
        n.GNavmeshDebugTileY:
          hint: |-
        n.GNavmeshSynchronousTileGeneration:
          hint: |-
        n.IpNetDriverMaxFrameTimeBeforeAlert:
          hint: |-
            Time to spend processing networking data in a single frame before an alert is raised (in seconds)
            It may get called multiple times in a single frame if additional processing after a previous alert exceeds the threshold again
             default: 1 s
        n.IpNetDriverMaxFrameTimeBeforeLogging:
          hint: |-
            Time to spend processing networking data in a single frame before an output log warning is printed (in seconds)
             default: 10 s
        n.NavmeshUseOodleCompression:
          hint: |-
            Use Oodle for run-time tile cache compression/decompression. Optimized for size in editor, optimized for speed in standalone.
        n.VerifyPeer:
          hint: |-
            Sets libcurl's CURLOPT_SSL_VERIFYPEER option to verify authenticity of the peer's certificate.
              0 = disable (allows self-signed certificates)
              1 = enable [default]
        net.ActorChannelPool:
          hint: |-
            If nonzero, actor channels will be pooled to save memory and object creation cost.
        net.AllowAsyncLoading:
          hint: |-
            Allow async loading of unloaded assets referenced in packets. If false the client will hitch and immediately load the asset, if true the packet will be delayed while the asset is async loaded. net.DelayUnmappedRPCs can be enabled to delay RPCs relying on async loading assets.
        net.AllowClientRemapCacheObject:
          hint: |-
            When enabled, we will allow clients to remap read only cache objects and keep the same NetGUID.
        net.AllowEncryption:
          hint: |-
            If true, the engine will attempt to load an encryption PacketHandler component and fill in the EncryptionToken parameter of the NMT_Hello message based on the ?EncryptionToken= URL option and call callbacks if it's non-empty.
        net.AllowReliableMulticastToNonRelevantChannels:
          hint: |-
            Allow Reliable Server Multicasts to be sent to non-Relevant Actors, as long as their is an existing ActorChannel.
        net.AllowRPCDoSDetectionBlocking:
          hint: |-
            Overrides whether or not RPC DoS Detection RPC blocking is allowed. 0 = disabled, 1 = enabled.
        net.AllowRPCDoSDetectionKicking:
          hint: |-
            Overrides whether or not RPC DoS Detection kicking is enabled. 0 = disabled, 1 = enabled.
        net.CheckNoLoadPackages:
          hint: |-
            If enabled, check the no load flag in GetObjectFromNetGUID before forcing a sync load on packages that are not marked IsFullyLoaded
        Net.CheckPushBPRepIndexAgainstName:
          hint: |-
            When enabled, validates that BP generated values passed to MarkPropertyDirtyFromRepIndex match the actual property data
        net.ContextDebug:
          hint: |-
            Debugging option to set a context string during replication
        net.ControlChannelDestructionInfo:
          hint: |-
            If enabled, send destruction info updates via the control channel instead of creating a new actor channel.0: Old behavior, use an actor channel. 1: New behavior, use the control channel
        net.DebugAppendResolverAddress:
          hint: |-
            If this is set, all IP address resolution methods will add the value of this CVAR to the list of results.This allows for testing resolution functionality across all multiple addresses with the end goal of having a successful result(being the value of this CVAR)
        net.DebugDraw:
          hint: |-
            Draws debug information for network dormancy and relevancy
            1 Enables network debug drawing. 0 disables.
        net.DebugDrawCullDistance:
          hint: |-
            Cull distance for net.DebugDraw. World UnitsMax world units an actor can be away from the local view to draw its dormancy status. Zero disables culling
        net.DebugDualIPs:
          hint: |-
            If true, will duplicate every packet received, and process with a new (deterministic) IP, to emulate receiving client packets from dual IP's - which can happen under real-world network conditions(only supports a single client on the server).
        net.DelayUnmappedRPCs:
          hint: |-
            If true delay received RPCs with unmapped object references until they are received or loaded, if false RPCs will execute immediately with null parameters. This can be used with net.AllowAsyncLoading to avoid null asset parameters during async loads.
        net.DelinquencyNumberOfTopOffendersToTrack:
          hint: |-
            When > 0 , this will be the number of 'TopOffenders' that are tracked by the PackageMap and GuidCache for Queued Actors and Async Loads respectively. net.TrackAsyncLoadingGUIDThreshold / net.TrackQueuedActorThreshold still dictate whether or not any of these items are tracked.
        net.DisableBandwithThrottling:
          hint: |-
            Forces IsNetReady to always return true. Not available in shipping builds.
        net.DisableIPv6:
          hint: |-
            If true, IPv6 will not resolve and its usage will be avoided when possible
        net.DisableRemapScriptActors:
          hint: |-
            When set, disables name remapping of compiled script actors (for networking)
        net.DoPacketOrderCorrection:
          hint: |-
            Whether or not to try to fix 'out of order' packet sequences, by caching packets and waiting for the missing sequence.
        net.DoPropertyChecksum:
          hint: |-
            When true and ENABLE_PROPERTY_CHECKSUMS is defined, checksums of replicated properties are compared on client and server
        net.DormancyEnable:
          hint: |-
            Enables Network Dormancy System for reducing CPU and bandwidth overhead of infrequently updated actors
            1 Enables network dormancy. 0 disables network dormancy.
        net.DormancyHysteresis:
          hint: |-
            When > 0, represents the time we'll wait before letting a channel become fully dormant (in seconds). This can prevent churn when objects are going in and out of dormant more frequently than normal.
        net.DormancyValidate:
          hint: |-
            Validates that dormant actors do not change state while in a dormant state (on server only)0: Dont validate. 1: Validate on wake up. 2: Validate on each net update
        net.EnableCongestionControl:
          hint: |-
            Enables congestion control module.
        net.EnableDetailedScopeCounters:
          hint: |-
            Enables detailed networking scope cycle counters. There are often lots of these which can negatively impact performance.
        net.FilterGuidRemapping:
          hint: |-
            Remove destroyed and parent guids from unmapped list
        net.ForceNetFlush:
          hint: |-
            Immediately flush send buffer when written to (helps trace packet writes - WARNING: May be unstable).
        net.IgnoreNetworkChecksumMismatch:
          hint: |-
            If true, the integrity checksum on packagemap objects will be ignored, which can cause issues with out of sync data
        net.InstantReplayProcessQueuedBunchesMillisecondLimit:
          hint: |-
            Time threshold for processing queued bunches during instant replays. If it takes longer than this in a single frame, wait until the next frame to continue processing queued bunches. For unlimited time, set to 0.
        net.IpConnectionDisableResolution:
          hint: |-
            If enabled, any future ip connections will not use resolution methods.
        net.IpConnectionUseSendTasks:
          hint: |-
            If true, the IpConnection will call the socket's SendTo function in a task graph task so that it can run off the game thread.
        net.IpNetDriverReceiveThreadPollTimeMS:
          hint: |-
            If net.IpNetDriverUseReceiveThread is true, the number of milliseconds to use as the timeout value for FSocket::Wait on the receive thread. A negative value means to wait indefinitely (FSocket::Shutdown should cancel it though).
        net.IpNetDriverReceiveThreadQueueMaxPackets:
          hint: |-
            If net.IpNetDriverUseReceiveThread is true, the maximum number of packets that can be waiting in the queue. Additional packets received will be dropped.
        net.IpNetDriverUseReceiveThread:
          hint: |-
            If true, the IpNetDriver will call the socket's RecvFrom function on a separate thread (not the game thread)
        Net.IsPushModelEnabled:
          hint: |-
            Whether or not Push Model is enabled. This networking mode allows game code to notify the networking system of changes, rather than scraping.
        Net.LogPendingGuidsOnShutdown:
          hint: |-
        Net.LogSkippedRepNotifies:
          hint: |-
            Log when the networking code skips calling a repnotify clientside due to the property value not changing.
        net.LogUnhandledFaults:
          hint: |-
            Whether or not to warn about unhandled net faults (could be deliberate, depending on implementation). 0 = off, 1 = log once, 2 = log always.
        net.MagicHeader:
          hint: |-
            String representing binary bits which are prepended to every packet sent by the game. Max length: 32 bits.
        Net.MakeBpPropertiesPushModel:
          hint: |-
            Whether or not properties declared in Blueprints will be forced to used Push Model
        net.MaxChannelSize:
          hint: |-
            The maximum number of network channels allowed across the entire server
        net.MaxClientGuidRemaps:
          hint: |-
            Max client resolves of unmapped network guids per tick
        net.MaxConnectionsToTickPerServerFrame:
          hint: |-
            When non-zero, the maximum number of channels that will have changed replicated to them per server update
        net.MaxConstructedPartialBunchSizeBytes:
          hint: |-
            The maximum size allowed for Partial Bunches.
        net.MaxNetStringSize:
          hint: |-
            Maximum allowed size for strings sent/received by the netcode (in bytes).
        net.MaxNumberOfAllowedTArrayChangesPerUpdate:
          hint: |-
        net.MaxNumberOfAllowedTArrayDeletionsPerUpdate:
          hint: |-
        net.MaxPlayersOverride:
          hint: |-
            If greater than 0, will override the standard max players count. Useful for testing full servers.
        net.MaxRPCPerNetUpdate:
          hint: |-
            Maximum number of unreliable multicast RPC calls allowed per net update, additional ones will be dropped
        net.Montage.Debug:
          hint: |-
            Prints Replication information about AnimMontages
             0: no print.
             1: Print AnimMontage info on client side as they are played.
        net.NetFaultRecoveryLogQuotaChecks:
          hint: |-
            Whether or not to enable debug logging for quota checks (useful for debugging new net faults used with 'RegisterCounterCategory')
        Net.NetGuidCacheHistoryEnabled:
          hint: |-
            When enabled, allows logging of NetGUIDCache History. Warning, this can eat up a lot of memory, and won't free itself until the Cache is destroyed.
        net.NetServerMoveTimestampExpiredWarningThreshold:
          hint: |-
            Tolerance for ServerMove() to warn when client moves are expired more than this time threshold behind the server.
        net.OodleClientEnableMode:
          hint: |-
            When to enable compression on the client (overrides the 'ClientEnableMode' .ini setting).
        net.OodleMinSizeForCompression:
          hint: |-
            The minimum size an outgoing packet must be, for it to be considered for compression (does not count overhead of handler components which process packets after Oodle).
        net.OodleServerEnableMode:
          hint: |-
            When to enable compression on the server (overrides the 'ServerEnableMode' .ini setting).
        net.OptimizedRemapping:
          hint: |-
            Uses optimized path to remap unmapped network guids
        net.PackageMap.DebugAll:
          hint: |-
            Debugs PackageMap serialization of all objects
        net.PackageMap.DebugObject:
          hint: |-
            Debugs PackageMap serialization of objectPartial name of object to debug
        net.PackageMap.LongLoadThreshhold:
          hint: |-
            Threshhold time in seconds for printing long load warnings in object serialization
        net.PacketHandlerCRCDump:
          hint: |-
            Enables or disables dumping of packet CRC's for every HandlerComponent, Incoming and Outgoing, for debugging.
        net.PacketOrderCorrectionEnableThreshold:
          hint: |-
            The number of 'out of order' packet sequences that need to occur, before correction is enabled.
        net.PacketOrderMaxCachedPackets:
          hint: |-
            (NOTE: Must be power of 2!) The maximum number of packets to cache while waiting for missing packet sequences, before treating missing packets as lost.
        net.PacketOrderMaxMissingPackets:
          hint: |-
            The maximum number of missed packet sequences that is allowed, before treating missing packets as lost.
        net.PartialBunchReliableThreshold:
          hint: |-
            If a bunch is broken up into this many partial bunches are more, we will send it reliable even if the original bunch was not reliable. Partial bunches are atonmic and must all make it over to be used
        net.PingDisplayServerTime:
          hint: |-
            Show server frame time. Not available in shipping builds.
        net.PingExcludeFrameTime:
          hint: |-
            If true, game frame times are subtracted from calculated ping to approximate actual network ping
        net.PingUsePacketRecvTime:
          hint: |-
            Use OS or Receive Thread packet receive time, for calculating the ping. Excludes frame time.
        net.ProcessQueuedBunchesMillisecondLimit:
          hint: |-
            Time threshold for processing queued bunches. If it takes longer than this in a single frame, wait until the next frame to continue processing queued bunches. For unlimited time, set to 0.
        Net.ProfilerUseComparisonTracking:
          hint: |-
        net.PushModelSkipUndirtiedFastArrays:
          hint: |-
            When true, include fast arrays when skipping objects that we can safely see aren't dirty.
        net.PushModelSkipUndirtiedReplication:
          hint: |-
            When true, skip replicating any objects that we can safely see aren't dirty.
        net.PushModelValidateProperties:
          hint: |-
            When true, we will compare all push model properties and warn if they haven't been marked dirty properly.
        net.QuantizeActorLocationOnSpawn:
          hint: |-
            When enabled, we will quantize Location for newly spawned actors to a single decimal of precision.
        net.QuantizeActorScaleOnSpawn:
          hint: |-
            When enabled, we will quantize Scale for newly spawned actors to a single decimal of precision.
        net.QuantizeActorVelocityOnSpawn:
          hint: |-
            When enabled, we will quantize Velocity for newly spawned actors to a single decimal of precision.
        net.RandomizeSequence:
          hint: |-
            Randomize initial packet sequence, can provide some obfuscation
        net.RcvThreadShouldSleepForLongRecvErrors:
          hint: |-
            Whether or not the receive thread should sleep for RecvFrom errors which are expected to last a long time. 0 = don't sleep, 1 = sleep, 2 = exit receive thread.
        net.RcvThreadSleepTimeForWaitableErrorsInSeconds:
          hint: |-
            Time the receive thread will sleep when a waitable error is returned by a socket operation.
        net.RecvMultiCapacity:
          hint: |-
            When RecvMulti is enabled, this is the number of packets it is allocated to handle per call - bigger is better (especially under a DDoS), but keep an eye on memory cost.
        net.Reliable.Debug:
          hint: |-
            Print all reliable bunches sent over the network
             0: no print.
             1: Print bunches as they are sent.
             2: Print reliable bunch buffer each net update
        net.RelinkMappedReferences:
          hint: |-
        Net.RepDriver.Enable:
          hint: |-
            Enables Replication Driver. 0 will fallback to legacy NetDriver implementation.
        net.Replication.DebugProperty:
          hint: |-
            Debugs Replication of property by name, this should be set to the partial name of the property to debug
        Net.RepMovement.DrawDebug:
          hint: |-
        net.ReportGameTickFlushTime:
          hint: |-
            Record and report to the perf tracking system the processing time of the GameNetDriver's TickFlush.
        net.ReportSyncLoads:
          hint: |-
            If enabled, the engine will track objects loaded by the networking system and broadcast FNetDelegates::OnSyncLoadDetected to report them.By default they are logged to the LogNetSyncLoads category.
        net.ReservedNetGuidSize:
          hint: |-
            Reserved size in bytes for NetGUID serialization, used as a placeholder for later serialization
        net.ResetAckStatePostSeamlessTravel:
          hint: |-
            If 1, the server will reset the ack state of the package map after seamless travel. Increases bandwidth usage, but may resolve some issues with GUIDs not being available on clients after seamlessly traveling.
        Net.ReuseReplicatorsForDormantObjects:
          hint: |-
            When true, Server's will persist and attempt to reuse replicators for Dormant Actors and Objects. This can cut down on bandwidth by preventing redundant information from being sent when waking objects from Dormancy.
        net.RPC.Debug:
          hint: |-
            Print all RPC bunches sent over the network
             0: no print.
             1: Print bunches as they are sent.
        net.RPCDoSAnalyticsMaxRPCs:
          hint: |-
            The top 'x' number of RPC's to include in RPC DoS analytics, ranked by RPC rate per Second.
        net.RPCDoSDetectionOverride:
          hint: |-
            Overrides whether or not RPC DoS Detection is enabled per-NetDriver. 0 = disabled, 1 = enabled. Example: net.RPCDoSDetectionOverride=GameNetDriver=1,BeaconNetDriver=0
        net.RPCDoSForcedRPCTracking:
          hint: |-
            Sets a single RPC that, when encountered, forcibly enables RPC tracking (limited to one RPC for performance). Can also specify a random chance, between 0.0 and 1.0, for when encountering the RPC enables tracking, and a length of time for leaving tracking enabled (disables the next tick, otherwise).Example (50% chance for 10 seconds): net.RPCDoSForcedRPCTracking=ServerAdmin,0.5,10
        net.ShareInitialCompareState:
          hint: |-
            If true and net.ShareShadowState is enabled, attempt to also share initial replication compares across connections.
        net.ShareSerializedData:
          hint: |-
            If true, enable shared serialization system used by replication to reduce CPU usage when multiple clients need the same data
        net.ShareShadowState:
          hint: |-
            If true, work done to compare properties will be shared across connections
        net.SkipReplicatorForDestructionInfos:
          hint: |-
            If enabled, skip creation of object replicator in SetChannelActor when we know there is no content payload and we're going to immediately destroy the actor.
        net.SupportFastArrayDelta:
          hint: |-
            Whether or not Fast Array Struct Delta Serialization is enabled.
        net.TickAllOpenChannels:
          hint: |-
            If nonzero, each net connection will tick all of its open channels every tick. Leaving this off will improve performance.
        net.TrackAsyncLoadingGUIDThreshold:
          hint: |-
            When > 0, any objects that take longer than the threshold to async load will be tracked. Threshold in seconds, @see FNetGUIDCache::ConsumeDelinquencyAnalytics. Used for Debugging and Analytics
        net.TrackAsyncLoadingGUIDThresholdOwner:
          hint: |-
            When > 0, if the Net Connection's owning Controller or Pawn is waiting on Async Loads for longer than this threshold, we will fire a CSV Event to track it. Used for Debugging and Profiling
        net.TrackNetSerializeObjectReferences:
          hint: |-
            If true, we will create small layouts for Net Serialize Structs if they have Object Properties. This can prevent some Shadow State GC crashes.
        net.TrackQueuedActorThreshold:
          hint: |-
            When > 0, any actors that spend longer than the threshold with queued bunches will be tracked. Threshold in seconds, @see UPackageMap::ConsumeDelinquencyAnalytics. Used for Debugging and Analytics
        net.TrackQueuedActorThresholdOwner:
          hint: |-
            When > 0, if the Net Connection's owning Controller or Pawn has Queued Bunches for longer than this threshold, we will fire a CSV Event to track it. Used for Debugging and Profiling
        net.UseAdaptiveNetUpdateFrequency:
          hint: |-
            If 1, NetUpdateFrequency will be calculated based on how often actors actually send something when replicating
        Net.UseGranularNetworkTracking:
          hint: |-
            When enabled, Obj List will print out highly detailed information about Network Memory Usage
        Net.UsePackedShadowBuffers:
          hint: |-
            When enabled, FRepLayout will generate shadow buffers that are packed with only the necessary NetProperties, instead of copying entire object state.
        net.UseRecvMulti:
          hint: |-
            If true, and if running on a Unix/Linux platform, multiple packets will be retrieved from the socket with one syscall, improving performance and also allowing retrieval of timestamp information.
        net.UseRecvTimestamps:
          hint: |-
            If true and if net.UseRecvMulti is also true, on a Unix/Linux platform, the kernel timestamp will be retrieved for each packet received, providing more accurate ping calculations.
        net.ValidateReplicatedPropertyRegistration:
          hint: |-
            Warns if replicated properties were not registered in GetLifetimeReplicatedProps.
        net.VerifyShareSerializedData:
          hint: |-
            Debug option to verify shared serialization data during replication
        NetAnalytics.MinimumNumberOfPacketsForBurstTracking:
          hint: |-
            The minimum number of packets that must have been notified (in our out) in order to consider a frame for packet loss by percentage.See NetAnalytics.PercentOfDroppedPacketsToConsiderBurst
        NetAnalytics.NumberOfConsecutiveDroppedPacketsToConsiderBurst:
          hint: |-
            The number of packets lost in a row (in or out) for us to consider the frame as having bursts of packet loss.Not affected by NetAnalytics.MinimumNumberOfPacketsForBurstTracking.
        NetAnalytics.PercentOfDroppedPacketsToConsiderBurst:
          hint: |-
            The percentage of packets lost in a frame (in or out) for us to consider the frame as having bursts of packet loss.
            See NetAnalytics.MinimumNumberOfPacketsForBurstTracking.
        networkversionoverride:
          hint: |-
            Sets network version used for multiplayer 
        np2.EnableDebugRPC:
          hint: |-
            Sends extra debug information to clients about server side input buffering
        np2.NumRedundantCmds:
          hint: |-
            Number of redundant user cmds to send per frame
        NVENC.EnableStats:
          hint: |-
            Whether to enable NVENC stats or not. Default: false.
        NVENC.IntraRefreshCountFrames:
          hint: |-
            The total number of frames within the intra refresh period that should be used as 'intra refresh' frames. Smaller values make stream recovery quicker at the cost of more bandwidth usage. Default: 0.
        NVENC.IntraRefreshPeriodFrames:
          hint: |-
            The total number of frames between each intra refresh. Smallers values will cause intra refresh more often. Default: 0. Values <= 0 will disable intra refresh.
        NVENC.KeyframeInterval:
          hint: |-
            Every N frames an IDR frame is sent. Default: 300. Note: A value <= 0 will disable sending of IDR frames on an interval.
        NVENC.KeyframeQPUseLastQP:
          hint: |-
            If true QP of keyframes is no worse than the last frame transmitted (may cost latency), if false, it may be keyframe QP may be worse if network conditions require it (lower latency/worse quality). Default: true.
        OpenColorIO.ShowShaderCompilerWarnings:
          hint: |-
            When set to 1, will display all warnings from OpenColorIO shader compiles.
        OpenGL.UseEmulatedUBs:
          hint: |-
            If true, enable using emulated uniform buffers on OpenGL ES3.1 mode.
        OSS.DelayAsyncTaskOutQueue:
          hint: |-
            Min total async task time
            Time in secs
        oss.PlatformOverride:
          hint: |-
            Overrides the detected platform of this client for various debugging
            Valid values WIN MAC PSN XBL IOS AND LIN SWT OTHER
        OSS.VoiceLoopback:
          hint: |-
            Enables voice loopback
            1 Enabled. 0 Disabled.
        p.AABBMaxChildrenInLeaf:
          hint: |-
        p.AABBMaxTreeDepth:
          hint: |-
        p.aabbtree.DirtyElementGridCellSize:
          hint: |-
            DirtyElement Grid acceleration structure cell size in cm. 0 or less will disable the feature
        p.aabbtree.DirtyElementMaxCellCapacity:
          hint: |-
            The maximum number of dirty elements that can be added to a single grid cell before spilling to slower flat list
        p.aabbtree.DirtyElementMaxGridCellQueryCount:
          hint: |-
            Maximum grid cells to query (per raycast for example) in DirtyElement grid acceleration structure before falling back to brute force
        p.aabbtree.DirtyElementMaxPhysicalSizeInCells:
          hint: |-
            If a dirty element stradles more than this number of cells, it will no be added to the grid acceleration structure
        p.aabbtree.DynamicTreeBoundingBoxPadding:
          hint: |-
            Additional padding added to bounding boxes for dynamic AABB trees to amortize update cost
        p.aabbtree.DynamicTreeLeafCapacity:
          hint: |-
            Dynamic Tree Leaf Capacity
        p.aabbtree.MaxNonGlobalElementBoundsExtrema:
          hint: |-
            If Min/Max of particle world bounds exceeds this threshold, element is put in global array instead of being used in leaf splitting.
        p.aabbtree.splitataveragecenter:
          hint: |-
            Split AABB tree nodes at the average of the element centers
        p.aabbtree.splitonvarianceaxis:
          hint: |-
            Split AABB tree nodes along the axis with the largest element center variance
        p.aabbtree.updatedirtyelementpayloads:
          hint: |-
            Allow AABB tree elements to update internal payload data when they recieve a payload update
        p.AddFormerBaseVelocityToRootMotionOverrideWhenFalling:
          hint: |-
            To avoid sudden velocity changes when a root motion source moves the pawn from a moving base to free fall, this CVar will enable the FormerBaseVelocityDecayHalfLife property on CharacterMovementComponent.
        p.AggregateGeom.ISPC:
          hint: |-
            Whether to use ISPC optimizations in physics aggregate geometry calculations
        p.AllowCachedOverlaps:
          hint: |-
            Primitive Component physics
            0: disable cached overlaps, 1: enable (default)
        p.AllowDestroyNonNetworkActors:
          hint: |-
            When enabled, allows Clients in Networked Games to destroy non-networked actors (AActor::Role == ROLE_None). Does not change behavior on Servers or Standalone games.
        p.AllowKinematicKinematicConstraints:
          hint: |-
            Do not create constraints between two rigid kinematics.
        p.AllowNotForDedServerPhysicsAssets:
          hint: |-
            Allow 'Not For Dedicated Server' flag on PhysicsAssets
            0: ignore flag, 1: obey flag (default)
        p.AlwaysCreatePhysicsStateConversionHack:
          hint: |-
            Hack to convert actors with query and ignore all to always create physics.
        p.AlwaysHardSnap:
          hint: |-
        p.AlwaysResetPhysics:
          hint: |-
        p.AngleLerp:
          hint: |-
        p.AngularEtherDragOverride:
          hint: |-
            Set an override angular ether drag value. -1.f to disable
        p.AngularVelocityCoefficient:
          hint: |-
        p.AnimDynamics:
          hint: |-
            Enables/Disables anim dynamics node updates.
        p.animdynamics.debugbone:
          hint: |-
            Filters p.animdynamics.showdebug to a specific bone by name.
        p.animdynamics.showdebug:
          hint: |-
            Enable/disable the drawing of animdynamics data.
        p.AnimDynamicsAdaptiveSubstep:
          hint: |-
            Enables/disables adaptive substepping. Adaptive substepping will substep the simulation when it is necessary and maintain a debt buffer for time, always trying to utilise as much time as possible.
        p.AnimDynamicsDetailedStats:
          hint: |-
            When set to 1, will enable more detailed stats.
        p.AnimDynamicsLODThreshold:
          hint: |-
            Max LOD that anim dynamics is allowed to run on. Provides a global threshold that overrides per-node the LODThreshold property. -1 means no override.
        p.AnimDynamicsNumDebtFrames:
          hint: |-
            Number of frames to maintain as time debt when using adaptive substepping, this should be at least 1 or the time debt will never be cleared.
        p.AnimDynamicsRestrictLOD:
          hint: |-
            Forces anim dynamics to be enabled for only a specified LOD, -1 to enable on all LODs.
        p.AnimDynamicsWind:
          hint: |-
            Enables/Disables anim dynamics wind forces globally.
        p.ApplyAsyncSleepState:
          hint: |-
        p.AsyncCharacterMovement:
          hint: |-
            1 enables asynchronous simulation of character movement on physics thread. Toggling this at runtime is not recommended.
        p.AsyncInterpolationMultiplier:
          hint: |-
            How many multiples of the fixed dt should we look behind for interpolation
        p.AsyncPhysicsBlockMode:
          hint: |-
            Setting to 0 blocks on any physics steps generated from past GT Frames, and blocks on none of the tasks from current frame. 1 blocks on everything except the single most recent task (including tasks from current frame). 1 should gurantee we will always have a future output for interpolation from 2 frames in the past.
        p.BasedMovementMode:
          hint: |-
            0 means always on regular tick (default); 1 means only if not deferring updates; 2 means update and save based movement both on regular ticks and post physics when on a physics base.
        p.BoundingVolumeNumCells:
          hint: |-
        p.BPTreeOfGrids:
          hint: |-
            Whether to use a seperate tree of grids for bp
        p.BroadphaseType:
          hint: |-
        p.bUseUnifiedHeightfield:
          hint: |-
            Whether to use the PhysX unified heightfield. This feature of PhysX makes landscape collision consistent with triangle meshes but the thickness parameter is not supported for unified heightfields. 1 enables and 0 disables. Default: 1
        p.Chaos.AABBTransform.ISPC:
          hint: |-
            Whether to use ISPC optimizations when computing AABB transforms
        p.Chaos.AccelerationStructureCacheOverlappingLeaves:
          hint: |-
            Set to 1: Cache the overlapping leaves for faster overlap query, any other value will disable the feature
        p.Chaos.AccelerationStructureSplitStaticDynamic:
          hint: |-
            Set to 1: Sort Dynamic and Static bodies into seperate acceleration structures, any other value will disable the feature
        p.Chaos.AccelerationStructureTimeSlicingMaxBytesCopy:
          hint: |-
            The Maximum number of bytes to copy to the external acceleration structure during Copy Time Slicing
        p.Chaos.AccelerationStructureTimeSlicingMaxQueueSizeBeforeForce:
          hint: |-
            If the update queue reaches this limit, time slicing will be disabled, and the acceleration structure will be built at once
        p.Chaos.AccelerationStructureUseDynamicTree:
          hint: |-
            Use a dynamic BVH tree structure for dynamic objects
        p.chaos.AllowCreatePhysxBodies:
          hint: |-
             0 is off, 1 is on (default)
        p.Chaos.AxialSpring.ISPC:
          hint: |-
            Whether to use ISPC optimizations in AxialSpring constraints
        p.Chaos.AxialSpring.ParallelConstraintCount:
          hint: |-
            If we have more constraints than this, use parallel-for in Apply.
        p.Chaos.BoxCalcBounds.ISPC:
          hint: |-
            Whether to use ISPC optimizations in calculating box bounds in geometry collections
        p.Chaos.CalculateBounds.ISPC:
          hint: |-
            Whether to use ISPC optimizations in CalculateBounds
        p.Chaos.CCD.AllowedDepthBoundsScale:
          hint: |-
            When rolling back to TOI, allow (smallest bound's extent) * AllowedDepthBoundsScale, instead of rolling back to exact TOI w/ penetration = 0.
        p.Chaos.CCD.AllowForceDisable:
          hint: |-
            Allow force disable CCD.
        p.Chaos.CCD.AlwaysSweepRemainingDT:
          hint: |-
            Even if we are out of iterations, do the sweep for remaining dt instead of adjusting V. Could cause tunnelling in some cases, but prevents loss of momentum.
        p.Chaos.CCD.EnableThresholdBoundsScale:
          hint: |-
            CCD is used when object position is changing > smallest bound's extent * BoundsScale. 0 will always Use CCD. Values < 0 disables CCD.
        p.Chaos.CCD.ManualForceDisable:
          hint: |-
            For debugging, manually disable CCD always.
        p.Chaos.CCD.NoCullAllShapePairs:
          hint: |-
            Whether to cull contacts early based on phi for sweeps for all shape pairs (not just convex convex).
        p.Chaos.CCD.OnlyConsiderDynamicStatic:
          hint: |-
            Only enable CCD for dynamic-static pairs.
        p.Chaos.CCD.UseCCD:
          hint: |-
            Global flag to turn CCD on or off. Default is true
        p.Chaos.CCD.UseGenericSweptConvexConstraints:
          hint: |-
            Use generic convex convex swept constraint generation for convex shape pairs which don't have specialized implementations.
        p.Chaos.CCD.UseInitialRotationForSweptUpdate:
          hint: |-
            Experimental : Use R instead of Q for SweptUpdate. Will lead to incorrect results in some cases.
        p.Chaos.Collision.AABBBoundsCheck:
          hint: |-
        p.Chaos.Collision.AllowLevelsetManifolds:
          hint: |-
            Use incremental manifolds for levelset-levelset collision. This does not work well atm - too much rotation in the small pieces
        p.Chaos.Collision.AllowParticleTracking:
          hint: |-
            Allow particles to track their collisions constraints when their DoBufferCollisions flag is enable [def:true]
        p.Chaos.Collision.AntiJitterContactMovementAllowance:
          hint: |-
            If a contact is close to where it was during a previous iteration, we will assume it is the same contact that moved (to reduce jitter). Expressed as the fraction of movement distance and Centre of Mass distance to the contact point
        p.Chaos.Collision.CCD.AllowClipping:
          hint: |-
            This will clip the CCD object at colliding positions when computation budgets run out. Default is true. Turning this option off might cause tunneling.
        p.Chaos.Collision.CCD.ConstraintMaxProcessCount:
          hint: |-
            The max number of times each constraint can be resolved when applying CCD constraints. Default is 2. The larger this number is, the more fully CCD constraints are resolved.
        p.Chaos.Collision.CCD.EnableResweep:
          hint: |-
            Enable resweep for CCD. Resweeping allows CCD to catch more secondary collisions but also is more costly. Default is true.
        p.Chaos.Collision.CCD.UseTightBoundingBox:
          hint: |-
        p.Chaos.Collision.CheckManifoldComplete:
          hint: |-
        p.Chaos.Collision.ClipTolerance:
          hint: |-
        p.Chaos.Collision.Color.MinParticles:
          hint: |-
        p.Chaos.Collision.ConstraintStiffnessModifier:
          hint: |-
        p.Chaos.Collision.ConvexZeroMargin:
          hint: |-
        p.Chaos.Collision.CullDistanceReferenceSize:
          hint: |-
        p.Chaos.Collision.EdgePrunePlaneDistance:
          hint: |-
        p.Chaos.Collision.EnableBoundsChecks:
          hint: |-
        p.Chaos.Collision.EnableCollisionManager:
          hint: |-
            Enable Chaos's Collision Manager for ignoring collisions between rigid bodies. [def:1]
        p.Chaos.Collision.EnableEdgePrune:
          hint: |-
        p.Chaos.Collision.EnableManifoldGJKInject:
          hint: |-
        p.Chaos.Collision.EnableManifoldGJKReplace:
          hint: |-
        p.Chaos.Collision.EnergyClampEnabled:
          hint: |-
            Whether to use energy clamping in collision apply step
        p.Chaos.Collision.EPAEpsilon:
          hint: |-
        p.Chaos.Collision.GBFCharacteristicTimeRatio:
          hint: |-
            The ratio between characteristic time and Dt
        p.Chaos.Collision.GJKEpsilon:
          hint: |-
        p.Chaos.Collision.Manifold.Apply.ImpulseTolerance:
          hint: |-
        p.Chaos.Collision.Manifold.Apply.MaxStiffness:
          hint: |-
        p.Chaos.Collision.Manifold.Apply.MinStiffness:
          hint: |-
        p.Chaos.Collision.Manifold.Apply.NegativeIncrementalImpulse:
          hint: |-
        p.Chaos.Collision.Manifold.CapsuleAxisAlignedThreshold:
          hint: |-
        p.Chaos.Collision.Manifold.CapsuleDeepPenetrationFraction:
          hint: |-
        p.Chaos.Collision.Manifold.CapsuleRadialContactFraction:
          hint: |-
        p.Chaos.Collision.Manifold.CullDistanceMarginMultiplier:
          hint: |-
        p.Chaos.Collision.Manifold.EdgeNormalThreshold:
          hint: |-
        p.Chaos.Collision.Manifold.EnableFrictionRestore:
          hint: |-
        p.Chaos.Collision.Manifold.EnableGjkWarmStart:
          hint: |-
        p.Chaos.Collision.Manifold.ForceOneShotManifoldEdgeEdgeCaseZeroCullDistance:
          hint: |-
            If enabled, if one shot manifold hits edge/edge case, we will force a cull distance of zero. That means edge/edge contacts will be thrown out if separated at all. Only applies to Convex/Convex oneshot impl.
        p.Chaos.Collision.Manifold.FrictionPositionTolerance:
          hint: |-
        p.Chaos.Collision.Manifold.MatchNormalTolerance:
          hint: |-
            A tolerance on the normal dot product used to determine if two contact points are the same
        p.Chaos.Collision.Manifold.MatchPositionTolerance:
          hint: |-
            A tolerance as a fraction of object size used to determine if two contact points are the same
        p.Chaos.Collision.Manifold.MinFaceSearchDistance:
          hint: |-
        p.Chaos.Collision.Manifold.PlaneContactNormalEpsilon:
          hint: |-
            Normal tolerance used to distinguish face contacts from edge-edge contacts
        p.Chaos.Collision.Manifold.PushOut.MaxStiffness:
          hint: |-
        p.Chaos.Collision.Manifold.PushOut.MinStiffness:
          hint: |-
        p.Chaos.Collision.Manifold.PushOut.NegativePushOut:
          hint: |-
        p.Chaos.Collision.Manifold.PushOut.PositionCorrection:
          hint: |-
        p.Chaos.Collision.Manifold.PushOut.PositionTolerance:
          hint: |-
        p.Chaos.Collision.Manifold.PushOut.Restitution:
          hint: |-
        p.Chaos.Collision.Manifold.PushOut.StaticFriction:
          hint: |-
        p.Chaos.Collision.Manifold.PushOut.VelocityCorrectionMode:
          hint: |-
            0 = No Velocity Correction; 1 = Normal Velocity Correction; 2 = Normal + Tangential Velocity Correction
        p.Chaos.Collision.Manifold.SphereCapsuleSizeThreshold:
          hint: |-
        p.Chaos.Collision.Manifold.TriangleConvexMarginMultiplier:
          hint: |-
        p.Chaos.Collision.Manifold.TriangleNormalThreshold:
          hint: |-
        p.Chaos.Collision.MarginFraction:
          hint: |-
            Override the collision margin fraction set in Physics Settings (if >= 0)
        p.Chaos.Collision.MarginMax:
          hint: |-
            Override the max collision margin set in Physics Settings (if >= 0)
        p.Chaos.Collision.MinCullDistanceScale:
          hint: |-
        p.Chaos.Collision.PrevVelocityRestitutionEnabled:
          hint: |-
            If enabled restitution will be calculated on previous frame velocities instead of current frame velocities
        p.Chaos.Collision.RelaxationEnabled:
          hint: |-
            Whether to reduce applied impulses during iterations for improved solver stability but reduced convergence
        p.Chaos.Collision.ShapesArrayMode:
          hint: |-
        p.Chaos.Collision.SphereBoundsCheck:
          hint: |-
        p.Chaos.Collision.UseAccumulatedImpulseClipSolve:
          hint: |-
            Use experimental Accumulated impulse clipped contact solve
        p.Chaos.Collision.UseGJK2:
          hint: |-
        p.Chaos.Collision.UseShockPropagation:
          hint: |-
        p.Chaos.CollisionStore.Enabled:
          hint: |-
        p.Chaos.Constraints.AlwaysAddSweptConstraints:
          hint: |-
            Since GJKContactPointSwept returns infinity for it's contact data when not hitting anything, some contacts are discarded prematurely. This flag will cause contact points considered for sweeps to never be discarded.
        p.Chaos.Constraints.DetailedStats:
          hint: |-
            When set to 1, will enable more detailed stats.
        p.Chaos.Convex.UseTConvexHull3Builder:
          hint: |-
            Use the newer Geometry Tools code path for generating convex hulls.[def:false]
        p.Chaos.ConvexGeometryCheckEnable:
          hint: |-
            Perform convex geometry complexity check for Chaos physics.
        p.Chaos.ConvexParticlesWarningThreshold:
          hint: |-
            Threshold beyond which we warn about collision geometry complexity.
        p.Chaos.DampVelocity.ISPC:
          hint: |-
            Whether to use ISPC optimizations in per particle damp velocity calculation
        p.Chaos.DebugDraw.ColorBoundsByShapeType:
          hint: |-
            Whether to use shape type to define the color of the bounds instead of using the particle state (if multiple shapes , will use the first one)
        p.Chaos.DebugDraw.ColorShapesByIsland:
          hint: |-
            Whether to use particle island to define the color of the shapes instead of using the particle state 
        p.Chaos.DebugDraw.ColorShapesByShapeType:
          hint: |-
            Whether to use shape type to define the color of the shapes instead of using the particle state 
        p.Chaos.DebugDraw.ConvexExplodeDistance:
          hint: |-
            Explode convex edges by this amount (useful for looking at convex integrity)
        p.Chaos.DebugDraw.Enabled:
          hint: |-
            Whether to debug draw low level physics solver information
        p.Chaos.DebugDraw.MaxLines:
          hint: |-
            Set the maximum number of debug draw lines that can be rendered (to limit perf drops)
        p.Chaos.DebugDraw.Mode:
          hint: |-
            Where to send debug draw commands. 0 = UE Debug Draw; 1 = VisLog; 2 = Both
        p.Chaos.DebugDraw.Radius:
          hint: |-
            Set the radius from the camera where debug draw capture stops (0 means infinite)
        p.Chaos.DebugDraw.ShowCollisionParticles:
          hint: |-
            Whether to show the collision particles if present
        p.Chaos.DebugDraw.ShowContactGraph:
          hint: |-
            Whether to show the contactgraph when drawing islands
        p.Chaos.DebugDraw.ShowContactGraphUnused:
          hint: |-
            Whether to show the unused edges contactgraph when drawing islands (collisions with no impulse)
        p.Chaos.DebugDraw.ShowContactGraphUsed:
          hint: |-
            Whether to show the used edges contactgraph when drawing islands (collisions with impulse)
        p.Chaos.DebugDraw.ShowContactIterations:
          hint: |-
            Whether to show an indicator of how many iterations a contact was active for
        p.Chaos.DebugDraw.ShowConvexVertices:
          hint: |-
            Whether to show the vertices of convex shapes
        p.Chaos.DebugDraw.ShowCoreShapes:
          hint: |-
            Whether to show the core (margin-reduced) shape where applicable
        p.Chaos.DebugDraw.ShowExactCoreShapes:
          hint: |-
            Whether to show the exact core shape. NOTE: Extremely expensive and should only be used on a small scene with a couple convex shapes in it
        p.Chaos.DebugDraw.ShowInactiveContacts:
          hint: |-
            Whether to show inactive contacts (ones that contributed no impulses or pushout)
        p.Chaos.DebugDraw.ShowIslands:
          hint: |-
            Whether to show the iosland boxes when drawing islands (if you want only the contact graph)
        p.Chaos.DebugDraw.ShowPIEClient:
          hint: |-
            When running in PIE mode, show the client debug draw
        p.Chaos.DebugDraw.ShowPIEServer:
          hint: |-
            When running in PIE mode, show the server debug draw
        p.Chaos.DebugDraw.ShowShapeBounds:
          hint: |-
            Whether to show the bounds of each shape in DrawShapes
        p.Chaos.DebugDraw.SingleActor:
          hint: |-
            If true, then we draw for the actor the camera is looking at.
        p.Chaos.DebugDraw.SingleActorMaxRadius:
          hint: |-
            Set the max radius to draw around the single actor.
        p.Chaos.DebugDraw.SingleActorTraceLength:
          hint: |-
            Set the trace length from the camera that is used to select the single actor.
        p.chaos.DebugDrawAwake:
          hint: |-
            Draw particles that are awake
        p.Chaos.DedicatedThreadEnabled:
          hint: |-
            Enables a dedicated physics task/thread for Chaos tasks.0: Disabled1: Enabled
        p.Chaos.DisableCollisionParallelFor:
          hint: |-
            Disable parallel execution for Chaos Collisions (also disabled by DisableParticleParallelFor)
        p.Chaos.DisableParticleParallelFor:
          hint: |-
            Disable parallel execution for Chaos Particles (Collisions, 
        p.Chaos.DisablePhysicsParallelFor:
          hint: |-
            Disable parallel execution in Chaos Evolution
        P.Chaos.DrawHierarchy.Bounds:
          hint: |-
            Enable / disable drawing of the physics hierarchy bounds
        P.Chaos.DrawHierarchy.CellElementThresh:
          hint: |-
            Num elements to consider "high" for cell colouring when rendering.
        P.Chaos.DrawHierarchy.Cells:
          hint: |-
            Enable / disable drawing of the physics hierarchy cells
        P.Chaos.DrawHierarchy.DrawEmptyCells:
          hint: |-
            Whether to draw cells that are empty when cells are enabled.
        P.Chaos.DrawHierarchy.Enable:
          hint: |-
            Enable / disable drawing of the physics hierarchy
        P.Chaos.DrawHierarchy.ObjectBounds:
          hint: |-
            Enable / disable drawing of the physics hierarchy object bounds
        p.Chaos.DumpHierElementBuckets:
          hint: |-
            Distribution buckets for dump hierarchy stats command
        p.Chaos.GetSimData.ISPC:
          hint: |-
            Whether to use ISPC optimizations when getting simulation data
        p.Chaos.ImmPhys.BoundsExtension:
          hint: |-
            Bounds are grown by this fraction of their size (should be >= 0.0)
        p.Chaos.ImmPhys.Collision.CullDistance:
          hint: |-
            Set the collision CullDistance (if >= 0)
        p.Chaos.ImmPhys.Collision.DeferNarrowPhase:
          hint: |-
            [Legacy Solver] Create contacts for all broadphase pairs, perform NarrowPhase later.
        p.Chaos.ImmPhys.Collision.Enabled:
          hint: |-
            Enable/Disable collisions in Immediate Physics.
        p.Chaos.ImmPhys.Collision.MaxDepenetrationVelocity:
          hint: |-
            Set the collision Max Depenetration Velocity (if >= 0)
        p.Chaos.ImmPhys.Collision.PairIterations:
          hint: |-
            [Legacy Solver] Override collision pair iterations (if >= 0)
        p.Chaos.ImmPhys.Collision.Priority:
          hint: |-
            Set the Collision constraint sort order (Joints have priority 0)
        p.Chaos.ImmPhys.Collision.RestitutionEnabled:
          hint: |-
            Collision Restitution Enable/Disable
        p.Chaos.ImmPhys.Collision.RestitutionThresholdMultiplier:
          hint: |-
            Collision Restitution Threshold (Acceleration) = Multiplier * Gravity
        p.Chaos.ImmPhys.Collision.UseManifolds:
          hint: |-
            [Legacy Solver] Enable/Disable use of manifoldes in collision.
        p.Chaos.ImmPhys.DebugDraw.AngVelScale:
          hint: |-
            If >0 show angular velocity when drawing particle transforms.
        p.Chaos.ImmPhys.DebugDraw.ArrowSize:
          hint: |-
            ArrowSize.
        p.Chaos.ImmPhys.DebugDraw.BodyAxisLen:
          hint: |-
            BodyAxisLen.
        p.Chaos.ImmPhys.DebugDraw.ConstraintAxisLen:
          hint: |-
            ConstraintAxisLen.
        p.Chaos.ImmPhys.DebugDraw.ContactInfoWidth:
          hint: |-
            ContactInfoWidth.
        p.Chaos.ImmPhys.DebugDraw.ContactLen:
          hint: |-
            ContactLen.
        p.Chaos.ImmPhys.DebugDraw.ContactOwnerWidth:
          hint: |-
            ContactOwnerWidth.
        p.Chaos.ImmPhys.DebugDraw.ContactPhiWidth:
          hint: |-
            ContactPhiWidth.
        p.Chaos.ImmPhys.DebugDraw.ContactWidth:
          hint: |-
            ContactWidth.
        p.Chaos.ImmPhys.DebugDraw.ImpulseScale:
          hint: |-
            If >0 show impulses when drawing collisions.
        p.Chaos.ImmPhys.DebugDraw.JointFeatures.ActorConnector:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.ImmPhys.DebugDraw.JointFeatures.Axes:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.ImmPhys.DebugDraw.JointFeatures.Color:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.ImmPhys.DebugDraw.JointFeatures.CoMConnector:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.ImmPhys.DebugDraw.JointFeatures.Index:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.ImmPhys.DebugDraw.JointFeatures.Island:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.ImmPhys.DebugDraw.JointFeatures.Level:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.ImmPhys.DebugDraw.JointFeatures.Stretch:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.ImmPhys.DebugDraw.LineThickness:
          hint: |-
            LineThickness.
        p.Chaos.ImmPhys.DebugDraw.PushOutScale:
          hint: |-
            If >0 show pushouts when drawing collisions.
        p.Chaos.ImmPhys.DebugDraw.Scale:
          hint: |-
            Scale applied to all Chaos Debug Draw line lengths etc.
        p.Chaos.ImmPhys.DebugDraw.ShapeLineThicknessScale:
          hint: |-
            Shape lineThickness multiplier.
        p.Chaos.ImmPhys.DebugDraw.VelScale:
          hint: |-
            If >0 show velocity when drawing particle transforms.
        p.Chaos.ImmPhys.DebugDrawBounds:
          hint: |-
            Whether to draw bounds when debug drawing.
        p.Chaos.ImmPhys.DebugDrawCollisions:
          hint: |-
            Whether to draw collisions when debug drawing.
        p.Chaos.ImmPhys.DebugDrawJoints:
          hint: |-
            Whether to draw joints when debug drawing.
        p.Chaos.ImmPhys.DebugDrawOnSimulate:
          hint: |-
            Enables debug drawing after the simulation completes.
        p.Chaos.ImmPhys.DebugDrawParticles:
          hint: |-
            Whether to draw particles when debug drawing.
        p.Chaos.ImmPhys.DebugDrawShapes:
          hint: |-
            Whether to draw shapes when debug drawing.
        p.Chaos.ImmPhys.DebugDrawShowDynamics:
          hint: |-
            Show dynamics if shape debug draw is enabled
        p.Chaos.ImmPhys.DebugDrawShowKinematics:
          hint: |-
            Show kinematics if shape debug draw is enabled
        p.Chaos.ImmPhys.DebugDrawShowStatics:
          hint: |-
            Show statics if shape debug draw is enabled
        p.Chaos.ImmPhys.DebugDrawSimulationSpace:
          hint: |-
            Whether to draw the simulation frame of reference, acceleration and velocity when debug drawing.
        p.Chaos.ImmPhys.DeltaTimeCount:
          hint: |-
            The number of ticks over which the moving average is calculated
        p.Chaos.ImmPhys.DisableInactiveByIndex:
          hint: |-
            Disable bodies that are no longer active based on the index, rather than just count.
        p.Chaos.ImmPhys.FixedStepTime:
          hint: |-
            Override fixed step time mode: fixed step time (if positive); variable time mode (if zero); asset defined (if negative)
        p.Chaos.ImmPhys.FixedStepTolerance:
          hint: |-
            Time remainder required to add a new step (fraction of FixedStepTime)
        p.Chaos.ImmPhys.InitialStepTime:
          hint: |-
            Initial step time (then calculated from rolling average)
        p.Chaos.ImmPhys.Iterations:
          hint: |-
            [Legacy Solver] Override number of constraint solver loops in immediate physics (if >= 0)
        p.Chaos.ImmPhys.Joint.AngleTolerance:
          hint: |-
            AngleTolerance.
        p.Chaos.ImmPhys.Joint.AngularDriveDamping:
          hint: |-
            6Dof joint drive damping override (if > 0).
        p.Chaos.ImmPhys.Joint.AngularDriveStiffness:
          hint: |-
            6Dof joint drive stiffness override (if > 0).
        p.Chaos.ImmPhys.Joint.AngularProjection:
          hint: |-
            6Dof joint projection amount override (if >= 0).
        p.Chaos.ImmPhys.Joint.EnableDrives:
          hint: |-
            EnableDrives.
        p.Chaos.ImmPhys.Joint.EnableSwingLimits:
          hint: |-
            EnableSwingLimits.
        p.Chaos.ImmPhys.Joint.EnableTwistLimits:
          hint: |-
            EnableTwistLimits.
        p.Chaos.ImmPhys.Joint.LinearDriveDamping:
          hint: |-
            6Dof joint drive damping override (if > 0).
        p.Chaos.ImmPhys.Joint.LinearDriveStiffness:
          hint: |-
            6Dof joint drive stiffness override (if > 0).
        p.Chaos.ImmPhys.Joint.LinearProjection:
          hint: |-
            6Dof joint projection amount override (if >= 0).
        p.Chaos.ImmPhys.Joint.MaxInertiaRatio:
          hint: |-
            6Dof joint MaxInertiaRatio (if > 0)
        p.Chaos.ImmPhys.Joint.MinParentMassRatio:
          hint: |-
            6Dof joint MinParentMassRatio (if > 0)
        p.Chaos.ImmPhys.Joint.NumShockPropagationIterations:
          hint: |-
            How many iterations to run shock propagation for
        p.Chaos.ImmPhys.Joint.PairIterations:
          hint: |-
            [Legacy Solver] Override joint pair iterations (if >= 0)
        p.Chaos.ImmPhys.Joint.PositionTolerance:
          hint: |-
            PositionTolerance.
        p.Chaos.ImmPhys.Joint.PushOutPairIterations:
          hint: |-
            [Legacy Solver] Override joint push-out pair iterations (if >= 0)
        p.Chaos.ImmPhys.Joint.ShockPropagation:
          hint: |-
            6Dof joint shock propagation override (if >= 0).
        p.Chaos.ImmPhys.Joint.SoftLinearStiffness:
          hint: |-
            6Dof joint soft linear stiffness override (if > 0).
        p.Chaos.ImmPhys.Joint.SoftSwingDamping:
          hint: |-
            6Dof joint SoftSwing damping override (if > 0).
        p.Chaos.ImmPhys.Joint.SoftSwingStiffness:
          hint: |-
            6Dof joint SoftSwing stiffness override (if > 0).
        p.Chaos.ImmPhys.Joint.SoftTwistDamping:
          hint: |-
            6Dof joint SoftTwist damping override (if > 0).
        p.Chaos.ImmPhys.Joint.SoftTwistStiffness:
          hint: |-
            6Dof joint SoftTwist stiffness override (if > 0).
        p.Chaos.ImmPhys.Joint.SolvePositionLast:
          hint: |-
            Should we solve joints in position-then-rotation order (false) rotation-then-position order (true, default)
        p.Chaos.ImmPhys.Joint.Stiffness:
          hint: |-
            6Dof joint stiffness override (if > 0).
        p.Chaos.ImmPhys.Joint.SwingTwistAngleTolerance:
          hint: |-
            SwingTwistAngleTolerance.
        p.Chaos.ImmPhys.Joint.UseLinearSolver:
          hint: |-
            Use linear version of joint solver. (default is true
        p.Chaos.ImmPhys.MinStepTime:
          hint: |-
            If non-zero, then if step time is lower than this, go into fixed step mode with this timestep.
        p.Chaos.ImmPhys.NumSteps:
          hint: |-
            Override num steps (if not zero)
        p.Chaos.ImmPhys.PositionIterations:
          hint: |-
            Override number of position iteration loops in immediate physics (if >= 0)
        p.Chaos.ImmPhys.ProjectionIterations:
          hint: |-
            Override number of projection iteration loops in immediate physics (if >= 0)
        p.Chaos.ImmPhys.PushOutIterations:
          hint: |-
            [Legacy Solver] Override number of solver push-out loops (if >= 0)
        p.Chaos.ImmPhys.SimSpaceCentrifugalAlpha:
          hint: |-
            Settings for simulation space system for rigid body nodes
        p.Chaos.ImmPhys.SimSpaceCoriolisAlpha:
          hint: |-
            Settings for simulation space system for rigid body nodes
        p.Chaos.ImmPhys.SimSpaceEulerAlpha:
          hint: |-
            Settings for simulation space system for rigid body nodes
        p.Chaos.ImmPhys.SolverType:
          hint: |-
            0 = None; 1 = GbfPbd; 2 = Pbd; 3 = QuasiPbd
        p.Chaos.ImmPhys.StepTime:
          hint: |-
            Override step time (if not zero)
        p.Chaos.ImmPhys.VelocityIterations:
          hint: |-
            Override number of velocity iteration loops in immediate physics (if >= 0)
        p.Chaos.InnerParallelForBatchSize:
          hint: |-
            Set the batch size threshold for inner parallel fors
        p.Chaos.Islands.DisableColors:
          hint: |-
        p.Chaos.Islands.DisableLevels:
          hint: |-
        p.Chaos.Joint.AngularVelocityThresholdToApplyRestitution:
          hint: |-
            Apply restitution only if initial velocity is higher than this threshold (used in Quasipbd)
        p.Chaos.Joint.DegenerateRotationLimit:
          hint: |-
            Cosine of the swing angle that is considered degerenerate (default Cos(176deg))
        p.Chaos.Joint.DisableSoftLimits:
          hint: |-
            Disable soft limits (for debugging only)
        p.Chaos.Joint.ISPC:
          hint: |-
            Whether to use ISPC optimizations in the Joint Solver
        p.Chaos.Joint.LinearVelocityThresholdToApplyRestitution:
          hint: |-
            Apply restitution only if initial velocity is higher than this threshold (used in Quasipbd)
        p.Chaos.Joint.MultiDimension:
          hint: |-
        p.Chaos.Joint.Plasticity.ClampToLimits:
          hint: |-
            Clamp drive position targets to defined limits after plasticity computation
        p.Chaos.Joint.VelProjectionAlpha:
          hint: |-
            How much of the velocity correction to apply during projection. Equivalent to (1-damping) for projection velocity delta
        p.Chaos.JointConstraint.AngularBreakScale:
          hint: |-
            Conversion factory for Angular Break Theshold.
        p.Chaos.JointConstraint.AngularDriveDampingScale:
          hint: |-
            Conversion factor for Angular drive damping.
        p.Chaos.JointConstraint.AngularDriveStiffnessScale:
          hint: |-
            Conversion factor for Angular drive stiffness.
        p.Chaos.JointConstraint.JointStiffness:
          hint: |-
            Hard-joint solver stiffness.
        p.Chaos.JointConstraint.LinaearDriveDampingScale:
          hint: |-
            Conversion factor for Linear drive damping.
        p.Chaos.JointConstraint.LinearBreakScale:
          hint: |-
            Conversion factory for Linear Break Theshold.
        p.Chaos.JointConstraint.LinearDriveStiffnessScale:
          hint: |-
            Conversion factor for Linear drive stiffness.
        p.Chaos.JointConstraint.SoftAngularDampingScale:
          hint: |-
            Conversion factor for soft-joint damping.
        p.Chaos.JointConstraint.SoftAngularForceMode:
          hint: |-
            Soft Angular constraint force mode (0: Acceleration; 1: Force
        p.Chaos.JointConstraint.SoftAngularStiffnessScale:
          hint: |-
            Conversion factor for soft-joint stiffness.
        p.Chaos.JointConstraint.SoftLinearDampingScale:
          hint: |-
            Conversion factor for soft-joint damping.
        p.Chaos.JointConstraint.SoftLinearForceMode:
          hint: |-
            Soft Linear constraint force mode (0: Acceleration; 1: Force
        p.Chaos.JointConstraint.SoftLinearStiffnessScale:
          hint: |-
            Conversion factor for soft-joint stiffness.
        p.Chaos.LargeBatchSize:
          hint: |-
            Large batch size for chaos parallel loops
        p.Chaos.LongRange.ISPC:
          hint: |-
            Whether to use ISPC optimizations in long range constraints
        p.Chaos.MaxInflationScale:
          hint: |-
            A limit on the bounds used to detect collisions when CCD is disabled. The bounds limit is this scale multiplied by the object's max dimension
        p.Chaos.MaxNumWorkers:
          hint: |-
            Set the max number of workers for physics
        p.chaos.MinContactSpeedForStrainEval:
          hint: |-
            Minimum speed at the contact before accumulating for strain eval 
        p.Chaos.MinEvolution.ForceMaxConstraintIterations:
          hint: |-
            Whether to force constraints to always use the worst-case maximum number of iterations
        p.Chaos.MinEvolution.RewindLerp:
          hint: |-
            If rewinding (fixed dt mode) use Backwards-Lerp as opposed to Backwards Velocity
        p.chaos.MinImpulseForStrainEval:
          hint: |-
            Minimum accumulated impulse before accumulating for strain eval 
        p.Chaos.MinRangeBatchSize:
          hint: |-
            Set the min range batch size for parallel for
        p.Chaos.OneSidedHeightField:
          hint: |-
            When enabled, extra steps will ensure that FHeightField::GJKContactPointImp never results in internal-facing contact data.
        p.Chaos.OneSidedHeightfieldAlwaysSweep:
          hint: |-
            When enabled, always use a sweep to ensure FHeightField::GJKContactPointImp never results 	in internal-facing contact data. Else, we only sweep if we detect an inward facing normal. Note that the sweep results can be inaccurate in some cases.
        p.Chaos.PBDCollisionSolver.Position.MinInvMassScale:
          hint: |-
        p.Chaos.PBDCollisionSolver.Position.PositionTolerance:
          hint: |-
        p.Chaos.PBDCollisionSolver.Position.RotationTolerance:
          hint: |-
        p.Chaos.PBDCollisionSolver.Position.SolveEnabled:
          hint: |-
        p.Chaos.PBDCollisionSolver.Position.StaticFriction.Stiffness:
          hint: |-
        p.Chaos.PBDCollisionSolver.VectorRegister:
          hint: |-
        p.Chaos.PBDCollisionSolver.Velocity.AveragePointEnabled:
          hint: |-
        p.Chaos.PBDCollisionSolver.Velocity.FrictionEnabled:
          hint: |-
        p.Chaos.PBDCollisionSolver.Velocity.MinInvMassScale:
          hint: |-
        p.Chaos.PBDCollisionSolver.Velocity.SolveEnabled:
          hint: |-
        p.Chaos.PBDEvolution.FastPositionBasedFriction:
          hint: |-
        p.Chaos.PBDEvolution.MinParallelBatchSize:
          hint: |-
        p.Chaos.PBDEvolution.ParalleIntegrate:
          hint: |-
            Run the integration step in parallel for.
        p.Chaos.PBDEvolution.UseNestedParallelFor:
          hint: |-
        p.Chaos.PBDEvolution.UseSmoothTimeStep:
          hint: |-
        p.Chaos.PBDEvolution.WriteCCDContacts:
          hint: |-
            Write CCD collision contacts and normals potentially causing the CCD collision threads to lock, allowing for debugging of these contacts.
        p.Chaos.PBDLongRangeConstraints.MinParallelBatchSize:
          hint: |-
            The minimum number of long range tethers in a batch to process in parallel.
        p.Chaos.PerformGeometryReduction:
          hint: |-
            Perform convex geometry simplification to increase performance in Chaos physics.
        p.Chaos.PerParticleCollision.ISPC:
          hint: |-
            Whether to use ISPC optimizations in per particle collisions
        p.Chaos.PerParticleCollision.ISPC.FastFriction:
          hint: |-
            Faster friction ISPC
        p.Chaos.PerParticleCollision.ISPC.ParallelBatchSize:
          hint: |-
            Parallel batch size for ISPC
        p.Chaos.PostIterationUpdates.ISPC:
          hint: |-
            Whether to use ISPC optimizations in PBD Post iteration updates
        p.Chaos.PreSimulationTransforms.ISPC:
          hint: |-
            Whether to use ISPC optimizations in ApplySimulationTransforms
        p.Chaos.ShockPropagation.Position.PerLevelIterations:
          hint: |-
        p.Chaos.ShockPropagation.Velocity.PerLevelIterations:
          hint: |-
        p.Chaos.Simulation.ApplySolverProjectSettings:
          hint: |-
            Whether to apply the solver project settings on spawning a solver
        P.Chaos.Simulation.Enable:
          hint: |-
            Enable / disable chaos simulation. If disabled, physics will not tick.
        p.Chaos.SkinPhysicsMesh.ISPC:
          hint: |-
            Whether to use ISPC optimizations on skinned physics meshes
        p.Chaos.SmallBatchSize:
          hint: |-
            Small batch size for chaos parallel loops
        p.Chaos.SmoothedPositionLerpRate:
          hint: |-
            The interpolation rate for the smoothed position calculation. Used for sleeping.
        p.Chaos.Solver.CleanupCommandsOnDestruction:
          hint: |-
            Whether or not to run internal command queue cleanup on solver destruction (0 = no cleanup, >0 = cleanup all commands)
        p.Chaos.Solver.Collision.AllowManifoldUpdate:
          hint: |-
            Enable/Disable reuse of manifolds between ticks (for small movement).
        p.Chaos.Solver.Collision.CullDistance:
          hint: |-
            Override cull distance (if >= 0)
        p.Chaos.Solver.Collision.DeferNarrowPhase:
          hint: |-
            Create contacts for all broadphase pairs, perform NarrowPhase later.
        p.Chaos.Solver.Collision.Iterations:
          hint: |-
            Override number of collision iterations per solver iteration (-1 to use config)
        p.Chaos.Solver.Collision.MaxPushOutVelocity:
          hint: |-
            Override max pushout velocity (if >= 0)
        p.Chaos.Solver.Collision.PositionFrictionIterations:
          hint: |-
            Override number of position iterations where friction is applied (if >= 0)
        p.Chaos.Solver.Collision.PositionShockPropagationIterations:
          hint: |-
            Override number of position iterations where shock propagation is applied (if >= 0)
        p.Chaos.Solver.Collision.Priority:
          hint: |-
            Set constraint priority. Larger values are evaluated later [def:0]
        p.Chaos.Solver.Collision.PushOutIterations:
          hint: |-
            Override number of collision iterations per solver iteration (-1 to use config)
        p.Chaos.Solver.Collision.UseManifolds:
          hint: |-
            Enable/Disable use of manifolds in collision.
        p.Chaos.Solver.Collision.VelocityFrictionIterations:
          hint: |-
            Override number of velocity iterations where friction is applied (if >= 0)
        p.Chaos.Solver.Collision.VelocityShockPropagationIterations:
          hint: |-
            Override number of velocity iterations where shock propagation is applied (if >= 0)
        p.Chaos.Solver.DebugDraw.AngVelScale:
          hint: |-
            If >0 show angular velocity when drawing particle transforms.
        p.Chaos.Solver.DebugDraw.ArrowSize:
          hint: |-
            ArrowSize.
        p.Chaos.Solver.DebugDraw.BodyAxisLen:
          hint: |-
            BodyAxisLen.
        p.Chaos.Solver.DebugDraw.Cluster.Constraints:
          hint: |-
            Draw Active Cluster Constraints (0 = never; 1 = end of frame).
        p.Chaos.Solver.DebugDraw.ConstraintAxisLen:
          hint: |-
            ConstraintAxisLen.
        p.Chaos.Solver.DebugDraw.ContactInfoWidth:
          hint: |-
            ContactInfoWidth.
        p.Chaos.Solver.DebugDraw.ContactLen:
          hint: |-
            ContactLen.
        p.Chaos.Solver.DebugDraw.ContactOwnerWidth:
          hint: |-
            ContactOwnerWidth.
        p.Chaos.Solver.DebugDraw.ContactPhiWidth:
          hint: |-
            ContactPhiWidth.
        p.Chaos.Solver.DebugDraw.ContactWidth:
          hint: |-
            ContactWidth.
        p.Chaos.Solver.DebugDraw.ImpulseScale:
          hint: |-
            If >0 show impulses when drawing collisions.
        p.Chaos.Solver.DebugDraw.InertiaScale:
          hint: |-
            When DebugDrawTransforms is enabled, show the mass-normalized inertia matrix scaled by this amount.
        p.Chaos.Solver.DebugDraw.JointFeatures.ActorConnector:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.Solver.DebugDraw.JointFeatures.Axes:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.Solver.DebugDraw.JointFeatures.Color:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.Solver.DebugDraw.JointFeatures.CoMConnector:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.Solver.DebugDraw.JointFeatures.Index:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.Solver.DebugDraw.JointFeatures.Island:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.Solver.DebugDraw.JointFeatures.Level:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.Solver.DebugDraw.JointFeatures.Stretch:
          hint: |-
            Joint features mask (see FDebugDrawJointFeatures).
        p.Chaos.Solver.DebugDraw.LineThickness:
          hint: |-
            LineThickness.
        p.Chaos.Solver.DebugDraw.PointSize:
          hint: |-
            Point size.
        p.Chaos.Solver.DebugDraw.PushOutScale:
          hint: |-
            If >0 show pushouts when drawing collisions.
        p.Chaos.Solver.DebugDraw.Scale:
          hint: |-
            Scale applied to all Chaos Debug Draw line lengths etc.
        p.Chaos.Solver.DebugDraw.ShapeLineThicknessScale:
          hint: |-
            Shape lineThickness multiplier.
        p.Chaos.Solver.DebugDraw.ShowComplex:
          hint: |-
            Whether to show complex collision is shape drawing is enabled
        p.Chaos.Solver.DebugDraw.ShowDynamics:
          hint: |-
            If DebugDrawShapes is enabled, whether to show dynamic objects
        p.Chaos.Solver.DebugDraw.ShowKinematics:
          hint: |-
            If DebugDrawShapes is enabled, whether to show kinematic objects
        p.Chaos.Solver.DebugDraw.ShowLevelSet:
          hint: |-
            Whether to show levelset collision is shape drawing is enabled
        p.Chaos.Solver.DebugDraw.ShowSimple:
          hint: |-
            Whether to show simple collision is shape drawing is enabled
        p.Chaos.Solver.DebugDraw.ShowStatics:
          hint: |-
            If DebugDrawShapes is enabled, whether to show static objects
        p.Chaos.Solver.DebugDraw.VelScale:
          hint: |-
            If >0 show velocity when drawing particle transforms.
        p.Chaos.Solver.DebugDrawBounds:
          hint: |-
            Draw bounding volumes inside the broadphase (0 = never; 1 = end of frame).
        p.Chaos.Solver.DebugDrawCollidingShapes:
          hint: |-
            Draw Shapes that have collisions on them (0 = never; 1 = end of frame).
        p.Chaos.Solver.DebugDrawCollisions:
          hint: |-
            Draw Collisions (0 = never; 1 = end of frame).
        p.Chaos.Solver.DebugDrawIslands:
          hint: |-
            Draw solver islands (0 = never; 1 = end of frame).
        p.Chaos.Solver.DebugDrawJoints:
          hint: |-
            Draw joints
        p.Chaos.Solver.DebugDrawShapes:
          hint: |-
            Draw Shapes (0 = never; 1 = end of frame).
        p.Chaos.Solver.DebugDrawSpatialAccelerationStructure:
          hint: |-
            Draw spatial acceleration structure
        p.Chaos.Solver.DebugDrawSpatialAccelerationStructure.ShowLeaves:
          hint: |-
            Show spatial acceleration structure leaves when its debug draw is enabled
        p.Chaos.Solver.DebugDrawSpatialAccelerationStructure.ShowNodes:
          hint: |-
            Show spatial acceleration structure nodes when its debug draw is enabled
        p.Chaos.Solver.DebugDrawSuspension:
          hint: |-
            Draw Suspension (0 = never; 1 = end of frame).
        p.Chaos.Solver.DebugDrawTransforms:
          hint: |-
            Draw particle transforms (0 = never; 1 = end of frame).
        p.Chaos.Solver.Deterministic:
          hint: |-
            Override determinism. 0: disabled; 1: enabled; -1: default(disabled)
        p.Chaos.Solver.IslandGroupsMultiplier:
          hint: |-
            Total number of island groups in the solver will be NumThreads * IslandGroupsMultiplier.[def:1]
        p.Chaos.Solver.Iterations:
          hint: |-
            Override number of solver iterations (-1 to use config)
        p.Chaos.Solver.Joint.AngleTolerance:
          hint: |-
            AngleTolerance.
        p.Chaos.Solver.Joint.MaxInertiaRatio:
          hint: |-
            6Dof joint MaxInertiaRatio (if > 0)
        p.Chaos.Solver.Joint.MaxSolverStiffness:
          hint: |-
            Solver stiffness on last iteration, increases each iteration from MinSolverStiffness.
        p.Chaos.Solver.Joint.MinParentMassRatio:
          hint: |-
            6Dof joint MinParentMassRatio (if > 0)
        p.Chaos.Solver.Joint.MinSolverStiffness:
          hint: |-
            Solver stiffness on first iteration, increases each iteration toward MaxSolverStiffness.
        p.Chaos.Solver.Joint.NumIterationsAtMaxSolverStiffness:
          hint: |-
            How many iterations we want at MaxSolverStiffness.
        p.Chaos.Solver.Joint.NumShockPropagationIterations:
          hint: |-
            How many iterations to enable SHockProagation for.
        p.Chaos.Solver.Joint.PairIterations:
          hint: |-
            Override number of iterations per joint pair during a solver iteration (-1 to use config)
        p.Chaos.Solver.Joint.PositionTolerance:
          hint: |-
            PositionTolerance.
        p.Chaos.Solver.Joint.Priority:
          hint: |-
            Set constraint priority. Larger values are evaluated later [def:0]
        p.Chaos.Solver.Joint.PushOutPairIterations:
          hint: |-
            Override number of push out iterations per joint during a solver iteration (-1 to use config)
        p.Chaos.Solver.Joint.ShockPropagation:
          hint: |-
            6Dof joint shock propagation override (if >= 0).
        p.Chaos.Solver.Joint.SolvePositionFirst:
          hint: |-
            Should we solve joints in position-then-rotation order (true) rotation-then-position order (false, default)
        p.Chaos.Solver.Joint.TransferCollisions:
          hint: |-
            Allows joints to apply collisions to the parent from the child when the Joints TransferCollisionScale is not 0 [def:true]
        p.Chaos.Solver.Joint.TransferCollisionsDebugTestAgainstMaxClamp:
          hint: |-
            Force all joint collision constraint settings to max clamp value to validate stability [def:false]
        p.Chaos.Solver.Joint.TransferCollisionsKinematicScale:
          hint: |-
            Scale to apply to collision transfers between kinematic bodies [def:1.0]
        p.Chaos.Solver.Joint.TransferCollisionsLimit:
          hint: |-
            Maximum number of constraints that are allowed to transfer to the parent. Lowering this will improve performance but reduce accuracy. [def:INT_MAX]
        p.Chaos.Solver.Joint.TransferCollisionsStiffnessClamp:
          hint: |-
            Clamp of maximum value of the stiffness clamp[def:1.0]
        p.Chaos.Solver.Joint.UseLinearSolver:
          hint: |-
            Use linear version of joint solver. (default is true
        p.Chaos.Solver.ParticlePoolNumFrameUntilShrink:
          hint: |-
            Num Frame until we can potentially shrink the pool
        p.Chaos.Solver.PushoutIterations:
          hint: |-
            Override number of solver pushout iterations (-1 to use config)
        p.Chaos.Solver.SleepEnabled:
          hint: |-
        p.Chaos.Solver.SolverType:
          hint: |-
            0 = None; 1 = GbfPbd; 2 = Pbd; 3 = QuasiPbd
        p.Chaos.Solver.Suspension.Priority:
          hint: |-
            Set constraint priority. Larger values are evaluated later [def:0]
        p.Chaos.Solver.UseParticlePool:
          hint: |-
            Whether or not to use dirty particle pool (Optim)
        p.Chaos.Spherical.ISPC:
          hint: |-
            Whether to use ISPC optimizations in spherical constraints
        p.Chaos.Spring.ISPC:
          hint: |-
            Whether to use ISPC optimizations in Spring constraints
        p.Chaos.Spring.ParallelConstraintCount:
          hint: |-
            If we have more constraints than this, use parallel-for in Apply.
        p.Chaos.SQ.DrawDebugVisitorQueries:
          hint: |-
            Draw bounds of objects visited by visitors in scene queries.
        p.Chaos.Suspension.DebugDraw.Hardstop:
          hint: |-
            Debug draw suspension hardstop manifold
        p.Chaos.Suspension.Hardstop.Enabled:
          hint: |-
            Enable/Disable Hardstop part of suspension constraint
        p.Chaos.Suspension.MaxPushout:
          hint: |-
            Chaos Suspension Max Pushout Value
        p.Chaos.Suspension.MaxPushoutVelocity:
          hint: |-
            Chaos Suspension Max Pushout Velocity Value
        p.Chaos.Suspension.Spring.Enabled:
          hint: |-
            Enable/Disable Spring part of suspension constraint
        p.Chaos.Suspension.VelocitySolve:
          hint: |-
            Enable/Disable VelocitySolve
        P.Chaos.SyncKinematicOnGameThread:
          hint: |-
            If set to 1, if a kinematic is flagged to send position back to game thread, move component, if 0, do not.
        p.Chaos.Thread.DesiredHz:
          hint: |-
            Desired update rate of the dedicated physics thread in Hz/FPS (Default 60.0f)
        p.Chaos.Thread.WaitThreshold:
          hint: |-
            Desired wait time in ms before the game thread stops waiting to sync physics and just takes the last result. (default 16ms)
        p.Chaos.Timestep.VariableCapped.Cap:
          hint: |-
            Time in seconds to set as the cap when using a ranged timestep for Chaos.
        p.Chaos.TriangleMesh.ISPC:
          hint: |-
            Whether to use ISPC optimizations in triangle mesh calculations
        p.Chaos.TriMeshPerPolySupport:
          hint: |-
            Disabling removes memory cost of vertex map on triangle mesh. Note: Changing at runtime will not work.
        P.Chaos.UpdateKinematicsOnDeferredSkelMeshes:
          hint: |-
            Whether to defer update kinematics for skeletal meshes.
        p.Chaos.UseContactGraphGBF:
          hint: |-
        p.chaos.UseContactSpeedForStrainEval:
          hint: |-
            Whether to use contact speed to discard contacts when updating cluster strain (true: use speed, false: use impulse)
        p.Chaos.UseRBANForDefaultPhysicsAssetSolverType:
          hint: |-
            Boolean to use RBAN for default physics asset solver type (false by default)
        p.Chaos.VelocityField.ISPC:
          hint: |-
            Whether to use ISPC optimizations in velocity field calculations
        p.Chaos.VisualDebuggerEnable:
          hint: |-
            Enable/Disable pushing/saving data to the visual debugger
        p.ChaosCloth.DebugDrawAmimNormals:
          hint: |-
            Whether to debug draw the animated/kinematic Cloth normals
        p.ChaosCloth.DebugDrawAnimDrive:
          hint: |-
            Whether to debug draw the Chaos Cloth anim drive
        p.ChaosCloth.DebugDrawAnimMeshWired:
          hint: |-
            Whether to debug draw the animated/kinematic Cloth wireframe meshes
        p.ChaosCloth.DebugDrawBackstopDistances:
          hint: |-
            Whether to debug draw the Chaos Cloth backstop distances
        p.ChaosCloth.DebugDrawBackstops:
          hint: |-
            Whether to debug draw the Chaos Cloth backstops
        p.ChaosCloth.DebugDrawBendingConstraint:
          hint: |-
            Whether to debug draw the Chaos Cloth bending constraint
        p.ChaosCloth.DebugDrawBounds:
          hint: |-
            Whether to debug draw the Chaos Cloth bounds
        p.ChaosCloth.DebugDrawCollision:
          hint: |-
            Whether to debug draw the Chaos Cloth collisions
        p.ChaosCloth.DebugDrawFaceNormals:
          hint: |-
            Whether to debug draw the Chaos Cloth face normals
        p.ChaosCloth.DebugDrawGravity:
          hint: |-
            Whether to debug draw the Chaos Cloth gravity acceleration vector
        p.ChaosCloth.DebugDrawInversedFaceNormals:
          hint: |-
            Whether to debug draw the Chaos Cloth inversed face normals
        p.ChaosCloth.DebugDrawLocalSpace:
          hint: |-
            Whether to debug draw the Chaos Cloth local space
        p.ChaosCloth.DebugDrawLongRangeConstraint:
          hint: |-
            Whether to debug draw the Chaos Cloth long range constraint (aka tether constraint)
        p.ChaosCloth.DebugDrawMaxDistances:
          hint: |-
            Whether to debug draw the Chaos Cloth max distances
        p.ChaosCloth.DebugDrawPhysMeshWired:
          hint: |-
            Whether to debug draw the Chaos Cloth wireframe meshes
        p.ChaosCloth.DebugDrawPointNormals:
          hint: |-
            Whether to debug draw the Chaos Cloth point normals
        p.ChaosCloth.DebugDrawSelfCollision:
          hint: |-
            Whether to debug draw the Chaos Cloth self collision information
        p.ChaosCloth.DebugDrawWindForces:
          hint: |-
            Whether to debug draw the Chaos Cloth wind forces
        p.ChaosCloth.LegacyDisablesAccurateWind:
          hint: |-
            Whether using the Legacy wind model switches off the accurate wind model, or adds up to it
        p.ChaosCloth.Solver.DebugHitchInterval:
          hint: |-
            Hitch interval in frames. Create artificial hitches to debug simulation jitter. 0 to disable
        p.ChaosCloth.Solver.DebugHitchLength:
          hint: |-
            Hitch length in ms. Create artificial hitches to debug simulation jitter. 0 to disable
        p.ChaosCloth.Solver.DisableCollision:
          hint: |-
            Disable all collision particles. Needs reset of the simulation (p.ChaosCloth.Reset).
        p.ChaosCloth.Solver.DisableTimeDependentNumIterations:
          hint: |-
            Make the number of iterations independent from the time step.
        p.ChaosCloth.Solver.MinParallelBatchSize:
          hint: |-
            The minimum number of particle to process in parallel batch by the solver.
        p.ChaosCloth.Solver.ParallelClothPostUpdate:
          hint: |-
            Pre-transform the cloth particles for each cloth in parallel.
        p.ChaosCloth.Solver.ParallelClothPreUpdate:
          hint: |-
            Pre-transform the cloth particles for each cloth in parallel.
        p.ChaosCloth.Solver.ParallelClothUpdate:
          hint: |-
            Skin the physics mesh and do the other cloth update for each cloth in parallel.
        p.ChaosCloth.Solver.UseImprovedTimeStepSmoothing:
          hint: |-
            Use the time step smoothing on input forces only rather than on the entire cloth solver, in order to avoid miscalculating velocities.
        p.ChaosCloth.UseOptimizedTaperedCapsule:
          hint: |-
            Use the optimized TaperedCapsule code instead of using a tapered cylinder and two spheres
        p.ChaosClothEditor.DebugDrawAnimDrive:
          hint: |-
            Draws the current skinned reference mesh for the simulation which anim drive will attempt to reach if enabled
        p.ChaosClothEditor.DebugDrawAnimMeshWired:
          hint: |-
            Draws the current animated mesh input in wireframe
        p.ChaosClothEditor.DebugDrawAnimNormals:
          hint: |-
            Draws the current point normals for the animated mesh
        p.ChaosClothEditor.DebugDrawBackstopDistances:
          hint: |-
            Draws the backstop distance offset for each simulation particle
        p.ChaosClothEditor.DebugDrawBackstops:
          hint: |-
            Draws the backstop radius and position for each simulation particle
        p.ChaosClothEditor.DebugDrawBendingConstraint:
          hint: |-
            Draws the bending spring constraints
        p.ChaosClothEditor.DebugDrawCollision:
          hint: |-
            Draws the collision bodies the simulation is currently using
        p.ChaosClothEditor.DebugDrawElementIndices:
          hint: |-
            Draws the element's (triangle or other) indices as instantiated by the solver
        p.ChaosClothEditor.DebugDrawLocalSpace:
          hint: |-
            Draws the local space reference bone
        p.ChaosClothEditor.DebugDrawLongRangeConstraint:
          hint: |-
            Draws the long range attachment constraint distances
        p.ChaosClothEditor.DebugDrawMaxDistances:
          hint: |-
            Draws the current max distances for the sim particles as a line along its normal
        p.ChaosClothEditor.DebugDrawMaxDistanceValues:
          hint: |-
            Draws the current max distances as numbers
        p.ChaosClothEditor.DebugDrawParticleIndices:
          hint: |-
            Draws the particle indices as instantiated by the solver
        p.ChaosClothEditor.DebugDrawPhysMeshShaded:
          hint: |-
            Draws the current physical result as a doubled sided flat shaded mesh
        p.ChaosClothEditor.DebugDrawPhysMeshWired:
          hint: |-
            Draws the current physical mesh result in wireframe
        p.ChaosClothEditor.DebugDrawPointNormals:
          hint: |-
            Draws the current point normals for the simulation mesh
        p.ChaosClothEditor.DebugDrawSelfCollision:
          hint: |-
            Draws the self collision thickness/debugging information
        p.ChaosClothEditor.DebugDrawWindForces:
          hint: |-
            Draws the Wind drag and lift forces
        p.ChaosNonMovingKinematicUpdateOptimization:
          hint: |-
            When enabled (1), keep track of moving kinematics and only call ApplyKinematicTargets for those ones. [def:1]
        p.ChaosNumContactIterationsOverride:
          hint: |-
            Override for num contact iterations if >= 0. [def:-1]
        p.ChaosNumPushOutIterationsOverride:
          hint: |-
            Override for num push out iterations if >= 0 [def:-1]
        p.ChaosRigidsEvolutionApplyAllowEarlyOut:
          hint: |-
            Allow Chaos Rigids Evolution apply iterations to early out when resolved.[def:1]
        p.ChaosRigidsEvolutionApplyPushoutAllowEarlyOut:
          hint: |-
            Allow Chaos Rigids Evolution apply-pushout iterations to early out when resolved.[def:1]
        p.ChaosSolverCollisionDefaultAngularSleepThreshold:
          hint: |-
            Default angular threshold for sleeping.[def:0.0087]
        p.ChaosSolverCollisionDefaultLinearSleepThreshold:
          hint: |-
            Default linear threshold for sleeping.[def:0.001]
        p.ChaosSolverCollisionDefaultSleepCounterThreshold:
          hint: |-
            Default counter threshold for sleeping.[def:20]
        p.ChaosSolverEnableJointConstraints:
          hint: |-
            Enable Joint Constraints defined within the Physics Asset Editor
        p.CharacterStuckWarningPeriod:
          hint: |-
            How often (in seconds) we are allowed to log a message about being stuck in geometry.
            <0: Disable, >=0: Enable and log this often, in seconds.
        p.checkbox:
          hint: |-
        p.ClientAuthorityThresholdOnBaseChange:
          hint: |-
            When a pawn moves onto or off of a moving base, this can cause an abrupt correction. In these cases, trust the client up to this distance away from the server component location.
        p.ClosestIntersectionStepSizeMultiplier:
          hint: |-
            When raycasting we use this multiplier to substep the travel distance along the ray. Smaller number gives better accuracy at higher cost
        p.Cloth.DefaultClothingSimulationFactoryClass:
          hint: |-
            The class name of the default clothing simulation factory.
            Known providers are:
            ChaosClothingSimulationFactory
        p.Cloth.MaxDeltaTimeTeleportMultiplier:
          hint: |-
            A multiplier of the MaxPhysicsDelta time at which we will automatically just teleport cloth to its new location
             default: 1.5
        p.Cloth.ResetAfterTeleport:
          hint: |-
            Require p.Cloth.TeleportOverride. Reset the clothing after moving the clothing position (called teleport).
             Default: true.
        p.Cloth.TeleportDistanceThreshold:
          hint: |-
            Require p.Cloth.TeleportOverride. Conduct teleportation if the character's movement is greater than this threshold in 1 frame.
             Zero or negative values will skip the check.
             Default: 300.
        p.Cloth.TeleportOverride:
          hint: |-
            Force console variable teleport override values over skeletal mesh properties.
             Default: false.
        p.Cloth.TeleportRotationThreshold:
          hint: |-
            Require p.Cloth.TeleportOverride. Rotation threshold in degrees, ranging from 0 to 180.
             Conduct teleportation if the character's rotation is greater than this threshold in 1 frame.
             Zero or negative values will skip the check.
             Default 0.
        p.ClothPhysics:
          hint: |-
            If 1, physics cloth will be used for simulation.
        p.ClothPhysics.UseTaskThread:
          hint: |-
            If 1, run cloth on the task thread. If 0, run on game thread.
        p.ClothPhysics.WaitForParallelClothTask:
          hint: |-
            If 1, always wait for cloth task completion in the Cloth Tick function. If 0, wait at end-of-frame updates instead if allowed by component settings
        p.ClusterDistanceThreshold:
          hint: |-
            How close a cluster child must be to a contact to break off
        p.ClusterSnapDistance:
          hint: |-
        p.CollisionAngularFriction:
          hint: |-
            Collision angular friction for all contacts if >= 0
        p.CollisionBoundsVelocityInflation:
          hint: |-
            Collision velocity inflation for speculatibe contact generation.[def:2.0]
        p.CollisionCanAlwaysDisableContacts:
          hint: |-
            Collision culling will always be able to permanently disable contacts
        p.CollisionCanNeverDisableContacts:
          hint: |-
            Collision culling will never be able to permanently disable contacts
        p.CollisionDisableCulledContacts:
          hint: |-
            Allow the PBDRigidsEvolutionGBF collision constraints to throw out contacts mid solve if they are culled.
        p.CollisionFriction:
          hint: |-
            Collision friction for all contacts if >= 0
        p.CollisionParticlesBVHDepth:
          hint: |-
            The maximum depth for collision particles bvh
        p.CollisionParticlesMax:
          hint: |-
            Maximum number of particles after simplicial pruning
        p.CollisionParticlesMin:
          hint: |-
            Minimum number of particles after simplicial pruning (assuming it started with more)
        p.CollisionParticlesPerObjectFractionDefault:
          hint: |-
            Fraction of verts
        p.CollisionParticlesSpatialDivision:
          hint: |-
            Spatial bucketing to cull collision particles.
        p.CollisionParticlesUseImplicitCulling:
          hint: |-
            Use the implicit to cull interior vertices.
        p.CollisionRestitution:
          hint: |-
            Collision restitution for all contacts if >= 0
        p.CollisionRestitutionThreshold:
          hint: |-
            Collision restitution threshold override if >= 0 (units of acceleration)
        p.ComputeClusterCollisionStrains:
          hint: |-
            Whether to use collision constraints when processing clustering.
        p.ConstraintAngularDampingScale:
          hint: |-
            The multiplier of constraint angular damping in simulation. Default: 100000
        p.ConstraintAngularStiffnessScale:
          hint: |-
            The multiplier of constraint angular stiffness in simulation. Default: 100000
        p.ConstraintBPBVHDepth:
          hint: |-
            The maximum depth for constraint bvh
        p.ConstraintLinearDampingScale:
          hint: |-
            The multiplier of constraint linear damping in simulation. Default: 1
        p.ConstraintLinearStiffnessScale:
          hint: |-
            The multiplier of constraint linear stiffness in simulation. Default: 1
        p.ContactOffsetFactor:
          hint: |-
            Multiplied by min dimension of object to calculate how close objects get before generating contacts. < 0 implies use project settings. Default: 0.01
        p.DeactivateClusterChildren:
          hint: |-
            If children should be decativated when broken and put into another cluster.
        p.DebugTimeDiscrepancy:
          hint: |-
            Whether to log detailed Movement Time Discrepancy values for testing0: Disable, 1: Enable Detection logging, 2: Enable Detection and Resolution logging
        p.DefaultCollisionFriction:
          hint: |-
            Collision friction default value if no materials are found.
        p.DefaultCollisionRestitution:
          hint: |-
            Collision restitution default value if no materials are found.
        p.DisableParticleUpdateVelocityParallelFor:
          hint: |-
            Disable Particle Update Velocity ParallelFor and run the update on a single thread
        p.DisableQueryOnlyActors:
          hint: |-
            If QueryOnly is used, actors are marked as simulation disabled. This is NOT compatible with origin shifting at the moment.
        p.DisableThreshold2:
          hint: |-
            Disable threshold frames to transition to sleeping
        p.EnableCollisions:
          hint: |-
            Enable/Disable collisions on the Chaos solver.
        p.EnableDeferredPhysicsCreation:
          hint: |-
            Enables/Disables deferred physics creation.
        p.EnableDynamicPerBodyFilterHacks:
          hint: |-
            Enables/Disables the use of a set of game focused hacks - allowing users to modify skel body collision dynamically (changes the behavior of per-body collision filtering).
        p.EnableFastOverlapCheck:
          hint: |-
            Enable fast overlap check against sweep hits, avoiding UpdateOverlaps (for the swept component).
        p.EnableKinematicDeferralPrePhysicsCondition:
          hint: |-
            If is 1, and deferral would've been disallowed due to EUpdateTransformFlags, allow if in PrePhysics tick. If 0, condition is unchanged.
        p.EnableKinematicDeferralStartPhysicsCondition:
          hint: |-
            If is 1, allow kinematics to be deferred in start physics (probably only called from replication tick). If 0, no deferral in startphysics.
        p.EnableMeshClean:
          hint: |-
            Enable/Disable mesh cleanup during cook.
        p.EnableMultiplayerWorldOriginRebasing:
          hint: |-
            Enable world origin rebasing for multiplayer, meaning that servers and clients can have different world origin locations.
        p.EnableResimCache:
          hint: |-
            If enabled, provides a resim cache to speed up certain computations
        p.EnableSkeletalMeshConstraints:
          hint: |-
            Enable skeletal mesh constraints defined within the Physics Asset Editor
        p.EncroachEpsilon:
          hint: |-
            Epsilon value used during encroachment checking for shape components
            0: use full sized shape. > 0: shrink shape size by this amount (world units)
        p.EnsureUnweldModifiesGTOnly:
          hint: |-
            Ensure if unweld modifies geometry shared with physics thread
        p.ErrorAccumulationDistanceSq:
          hint: |-
        p.ErrorAccumulationSeconds:
          hint: |-
        p.ErrorAccumulationSimilarity:
          hint: |-
        p.ErrorPerAngularDifference:
          hint: |-
        p.ErrorPerLinearDifference:
          hint: |-
        p.FindAllIntersectionsSingleThreaded:
          hint: |-
        p.FixBadAccelerationStructureRemoval:
          hint: |-
        p.FixReplayOverSampling:
          hint: |-
            If 1, remove invalid replay samples that can occur due to oversampling (sampling at higher rate than physics is being ticked)
        p.ForceDisableAsyncPhysics:
          hint: |-
            Whether to force async physics off regardless of other settings
        p.ForceJumpPeakSubstep:
          hint: |-
            If 1, force a jump substep to always reach the peak position of a jump, which can often be cut off as framerate lowers.
        p.ForceNoCollisionIntoSQ:
          hint: |-
            When enabled, all particles end up in sq structure, even ones with no collision
        p.ForceStandardSQ:
          hint: |-
            If enabled, we force the standard scene query even if custom SQ structure is enabled
        p.gc.logcachereduction:
          hint: |-
            Logs amount of data removed from a cache after processing
        p.gc.ReportHighParticleFraction:
          hint: |-
            Report any objects with particle fraction above this threshold
        p.gc.ReportNoLevelsetCluster:
          hint: |-
            Report any cluster objects without levelsets
        p.GeometryCollection.AlwaysGenerateGTCollisionForClusters:
          hint: |-
            When enabled, always generate a game thread side collision for clusters.[def: true]
        p.GeometryCollection.EnabledNestedChildTransformUpdates:
          hint: |-
            Enable updates for driven, disabled, child bodies. Used for line trace results against geometry collections.[def: true]
        p.GeometryCollectionAssetForceStripOnCook:
          hint: |-
            Bypass the construction of simulation properties when all bodies are simply cached. for playback.
        p.GeometryCollectionCollideAll:
          hint: |-
            Bypass the collision matrix and make geometry collections collide against everything
        p.GeometryCollectionDisableGravity:
          hint: |-
            Disable gravity for geometry collections
        p.GeometryCollectionEnableForcedConvexGenerationInSerialize:
          hint: |-
            Enable generation of convex geometry on older destruction files.[def:true]
        p.GeometryCollectionNavigationSizeThreshold:
          hint: |-
            Size in CM used as a threshold for whether a geometry in the collection is collected and exported for navigation purposes. Measured as the diagonal of the leaf node bounds.
        p.GeometryCollectionSingleThreadedBoundsCalculation:
          hint: |-
            [Debug Only] Single threaded bounds calculation. [def:false]
        p.HackMaxAngularVelocity:
          hint: |-
            Max cap on angular velocity: rad/s. This is only a temp solution and should not be relied on as a feature. -1.f to disable
        p.HackMaxVelocity2:
          hint: |-
            Max cap on velocity: cm/s. This is only a temp solution and should not be relied on as a feature. -1.f to disable
        p.HitDistanceTolerance:
          hint: |-
            Tolerance for hit distance for overlap test in PrimitiveComponent movement.
            Hits that are less than this distance are ignored.
        p.IgnoreAnalyticCollisionsOverride:
          hint: |-
            Overrides the default for ignroing analytic collsions.
        p.InitialOverlapTolerance:
          hint: |-
            Tolerance for initial overlapping test in PrimitiveComponent movement.
            Normals within this tolerance are ignored if moving out of the object.
            Dot product of movement direction and surface normal.
        p.IterationsPerTimeSlice:
          hint: |-
        p.LevelSetAvgAngleErrorTolerance:
          hint: |-
            Average error in of the mesh normal and computed normal on the level set.
        p.LevelSetAvgDistErrorTolerance:
          hint: |-
            Error tolerance for average distance between the triangles and generated levelset.  Note this is a fraction of the average bounding box dimensions.
        p.LevelSetFailureOnHighError:
          hint: |-
            Set level sets with high error to null in the solver
        p.LevelsetGhostCells:
          hint: |-
            Increase the level set grid by this many ghost cells
        p.LevelSetMaxDistErrorTolerance:
          hint: |-
            Max error for the highest error triangle generated from a levelset.  Note this is a fraction of the average bounding box dimensions.
        p.LevelSetOutputFailedDebugData:
          hint: |-
            Output debug obj files for level set and mesh when error tolerances are too high
        p.LevelsetOverlapCapsuleSamples:
          hint: |-
            Number of spiral points to generate for levelset-capsule overlaps
        p.LevelsetOverlapSphereSamples:
          hint: |-
            Number of spiral points to generate for levelset-sphere overlaps
        p.LinearEtherDragOverride:
          hint: |-
            Set an override linear ether drag value. -1.f to disable
        p.LinearVelocityCoefficient:
          hint: |-
        p.LogCorruptMap:
          hint: |-
        p.LogDirtyParticles:
          hint: |-
            Logs out which particles are dirty every frame
        p.MaxBoundsForTree:
          hint: |-
            The max bounds before moving object into a large objects structure. Only applies on object registration
        p.MaxChildrenInLeaf:
          hint: |-
        p.MaxContactOffset:
          hint: |-
            Max value of contact offset, which controls how close objects get before generating contacts. < 0 implies use project settings. Default: 1.0
        p.MaxDirtyElements:
          hint: |-
            The max number of dirty elements. This forces a flush which is very expensive
        p.MaxFallingCorrectionLeash:
          hint: |-
            When airborne, some distance between the server and client locations may remain to avoid sudden corrections as clients jump from moving bases. This value is the maximum allowed distance.
        p.MaxFallingCorrectionLeashBuffer:
          hint: |-
            To avoid constant corrections, when an airborne server and client are further than p.MaxFallingCorrectionLeash cm apart, they'll be pulled in to that distance minus this value.
        p.MaxLevelsetDimension:
          hint: |-
            The maximum number of cells on a single level set axis
        p.MaxLinearHardSnapDistance:
          hint: |-
        p.MaxPayloadSize:
          hint: |-
        p.MaxRestoredStateError:
          hint: |-
        p.MaxTreeDepth:
          hint: |-
        p.MinCleanedPointsBeforeRemovingInternals:
          hint: |-
            If we only have this many clean points, don't bother removing internal points as the object is likely very small
        p.MinLevelsetDimension:
          hint: |-
            The minimum number of cells on a single level set axis
        p.MinLevelsetSize:
          hint: |-
            The minimum size on the smallest axis to use a level set
        p.MoveIgnoreFirstBlockingOverlap:
          hint: |-
            Whether to ignore the first blocking overlap in SafeMoveUpdatedComponent (if moving out from object and starting in penetration).
            The 'p.InitialOverlapTolerance' setting determines the 'move out' rules, but by default we always try to depenetrate first (not ignore the hit).
            0: Disable (do not ignore), 1: Enable (ignore)
        p.NetCorrectionLifetime:
          hint: |-
            How long a visualized network correction persists.
            Time in seconds each visualized network correction persists.
        p.NetEnableListenServerSmoothing:
          hint: |-
            Whether to enable mesh smoothing on listen servers for the local view of remote clients.
            0: Disable, 1: Enable
        p.NetEnableMoveCombining:
          hint: |-
            Whether to enable move combining on the client to reduce bandwidth by combining similar moves.
            0: Disable, 1: Enable
        p.NetEnableMoveCombiningOnStaticBaseChange:
          hint: |-
            Whether to allow combining client moves when moving between static geometry.
            0: Disable, 1: Enable
        p.NetEnableSkipProxyPredictionOnNetUpdate:
          hint: |-
            Whether to allow proxies to skip prediction on frames with a network position update, if bNetworkSkipProxyPredictionOnNetUpdate is also true on the movement component.
            0: Disable, 1: Enable
        p.NetForceClientAdjustmentPercent:
          hint: |-
            Percent of ServerCheckClientError checks to return true regardless of actual error.
            Useful for testing client correction code.
            <=0: Disable, 0.05: 5% of checks will return failed, 1.0: Always send client adjustments
        p.NetForceClientServerMoveLossDuration:
          hint: |-
            Duration in seconds for client to drop ServerMove calls when NetForceClientServerMoveLossPercent check passes.
            Useful for testing server force correction code.
            Duration of zero means single frame loss.
        p.NetForceClientServerMoveLossPercent:
          hint: |-
            Percent of ServerMove calls for client to not send.
            Useful for testing server force correction code.
            <=0: Disable, 0.05: 5% of checks will return failed, 1.0: never send server moves
        p.NetMoveCombiningAttachedLocationTolerance:
          hint: |-
            Tolerance for relative location attachment change when combining moves. Small tolerances allow for very slight jitter due to transform updates.
        p.NetMoveCombiningAttachedRotationTolerance:
          hint: |-
            Tolerance for relative rotation attachment change when combining moves. Small tolerances allow for very slight jitter due to transform updates.
        p.NetPackedMovementMaxBits:
          hint: |-
            Max number of bits allowed in each packed movement RPC. Used to protect against bad data causing the server to allocate too much memory.
        p.NetPingExtrapolation:
          hint: |-
        p.NetPingLimit:
          hint: |-
        p.NetShowCorrections:
          hint: |-
            Whether to draw client position corrections (red is incorrect, green is corrected).
            0: Disable, 1: Enable
        p.NetStationaryRotationTolerance:
          hint: |-
            Tolerance for GetClientNetSendDeltaTime() to remain throttled when small control rotation changes occur.
        p.NetUseClientTimestampForReplicatedTransform:
          hint: |-
            If enabled, use client timestamp changes to track the replicated transform timestamp, otherwise uses server tick time as the timestamp.
            Game session usually needs to be restarted if this is changed at runtime.
            0: Disable, 1: Enable
        p.NetUsePackedMovementRPCs:
          hint: |-
            Whether to use newer movement RPC parameter packed serialization. If disabled, old deprecated movement RPCs will be used instead.
            0: Disable, 1: Enable
        p.NetVisualizeSimulatedCorrections:
          hint: |-
            0: Disable, 1: Enable
        p.NormalAveraging2:
          hint: |-
        p.PenetrationOverlapCheckInflation:
          hint: |-
            Inflation added to object when checking if a location is free of blocking collision.
            Distance added to inflation in penetration overlap check.
        p.PenetrationPullbackDistance:
          hint: |-
            Pull out from penetration of an object by this extra distance.
            Distance added to penetration fix-ups.
        p.PhysicsAnimBlendUpdatesPhysX:
          hint: |-
            Whether to update the physx simulation with the results of physics animation blending
        p.PhysicsRunsOnGT:
          hint: |-
            If true the physics thread runs on the game thread, but will still go wide on tasks like collision detection
        p.PositionLerp:
          hint: |-
        p.RagdollPhysics:
          hint: |-
            If 1, ragdoll physics will be used. Otherwise just root body is simulated
        p.RemoveFarBodiesFromBVH:
          hint: |-
            Removes bodies far from the scene from the bvh
            0: Kept, 1: Removed
        p.ReplayLerpAcceleration:
          hint: |-
        p.ReplaySQs:
          hint: |-
            If enabled, we rerun the sq against chaos
        p.ReplayUseInterpolation:
          hint: |-
        p.ReportTooManyChildrenNum:
          hint: |-
            Issue warning if more than this many children exist in a single cluster
        p.ResimInterpStrength:
          hint: |-
            How strong the resim interp leash is. 1 means immediately snap to new target, 0 means do not interpolate at all
        p.ResimInterpTime:
          hint: |-
            How long to interpolate between original sim and resim results. 0 means no interpolation, the larget the value the smoother and longer interpolation takes. Restart game to see affect
        p.RewindCaptureNumFrames:
          hint: |-
            The number of frames to capture rewind for. Requires restart of solver
        p.RigidBodyLODThreshold:
          hint: |-
            Max LOD that rigid body node is allowed to run on. Provides a global threshold that overrides per-node the LODThreshold property. -1 means no override.
        p.RigidBodyNode:
          hint: |-
            Enables/disables the whole rigid body node system. When disabled, avoids all allocations and runtime costs. Can be used to disable RB Nodes on low-end platforms.
        p.RigidBodyNode.DebugDraw:
          hint: |-
            Whether to debug draw the rigid body simulation state. Requires p.Chaos.DebugDraw.Enabled 1 to function as well.
        p.RigidBodyNode.EnableComponentAcceleration:
          hint: |-
            Enable/Disable the simple acceleration transfer system for component- or bone-space simulation
        p.RigidBodyNode.EnableSimulation:
          hint: |-
            Runtime Enable/Disable RB Node Simulation for debugging and testing (node is initialized and bodies and constraints are created, even when disabled.)
        p.RigidBodyNode.EnableTimeBasedReset:
          hint: |-
            If true, Rigid Body nodes are reset when they have not been updated for a while (default true)
        p.RigidBodyNode.MaxSubSteps:
          hint: |-
            Set the maximum number of simulation steps in the update loop
        p.RigidBodyNode.Space.MasterAlpha:
          hint: |-
            RBAN SimSpaceSettings overrides
        p.RigidBodyNode.Space.MaxAngularAcceleration:
          hint: |-
            RBAN SimSpaceSettings overrides
        p.RigidBodyNode.Space.MaxAngularVelocity:
          hint: |-
            RBAN SimSpaceSettings overrides
        p.RigidBodyNode.Space.MaxLinearAcceleration:
          hint: |-
            RBAN SimSpaceSettings overrides
        p.RigidBodyNode.Space.MaxLinearVelocity:
          hint: |-
            RBAN SimSpaceSettings overrides
        p.RigidBodyNode.Space.Override:
          hint: |-
            Force-enable the advanced simulation space movement forces
        p.RigidBodyNode.Space.VelocityScaleZ:
          hint: |-
            RBAN SimSpaceSettings overrides
        p.RigidBodyNode.TaskPriority.Simulation:
          hint: |-
            Task priority for running the rigid body node simulation task (0 = foreground/high, 1 = foreground/normal, 2 = background/high, 3 = background/normal, 4 = background/low).
        p.RigidBodyNode.UseDeferredTask:
          hint: |-
            Whether to defer the simulation results by one frame so that they can run in a task
        p.RigidBodyNode.WorldObjectExpiry:
          hint: |-
            World objects are removed from the simulation if not detected after this many tests
        p.RK4SpringInterpolator.MaxIter:
          hint: |-
            RK4 Spring Interpolator's max number of iterations
        p.RK4SpringInterpolator.UpdateRate:
          hint: |-
            RK4 Spring Interpolator's rate of update
        p.RootMotion.Debug:
          hint: |-
            Whether to draw root motion source debug information.
            0: Disable, 1: Enable
        p.RootMotion.DebugSourceLifeTime:
          hint: |-
            How long a visualized root motion source persists.
            Time in seconds each visualized root motion source persists.
        p.SampleMinParticlesForAcceleration:
          hint: |-
            The minimum number of particles needed before using an acceleration structure when sampling
        p.SerializeBadSQs:
          hint: |-
            If enabled, we create a sq capture whenever chaos and physx diverge
        p.SerializeEvolution:
          hint: |-
        p.SerializeSQs:
          hint: |-
            If enabled, we create a sq capture per sq that takes more than provided value in microseconds. This can be very expensive as the entire scene is saved out
        p.SerializeSQSampleCount:
          hint: |-
            If Query exceeds duration threshold, we will re-measure SQ this many times before serializing. Larger values cause hitching.
        p.SerializeSQsOverlapEnabled:
          hint: |-
            If disabled, p.SerializeSQs will not consider overlaps
        p.SerializeSQsRaycastEnabled:
          hint: |-
            If disabled, p.SerializeSQs will not consider raycasts
        p.SerializeSQsSweepEnabled:
          hint: |-
            If disabled, p.SerializeSQs will not consider sweeps
        p.ShowInitialOverlaps:
          hint: |-
            Show initial overlaps when moving a component, including estimated 'exit' direction.
             0:off, otherwise on
        p.SimCollisionEnabled:
          hint: |-
            If 0 no sim collision will be used
        p.simDelay:
          hint: |-
        p.SkipDesyncTest:
          hint: |-
            Skips hard desync test, this means all particles will assume to be clean except spawning at different times. This is useful for a perf lower bound, not actually correct
        p.SkipPhysicsReplication:
          hint: |-
        p.SkipSkeletalRepOptimization:
          hint: |-
            If true, we don't move the skeletal mesh component during replication. This is ok because the skeletal mesh already polls physx after its results
        p.SkipUpdateOverlapsOptimEnabled:
          hint: |-
            If enabled, we cache whether we need to call UpdateOverlaps on certain components
        p.SQHitchDetection:
          hint: |-
            Whether to detect scene query hitches. 0 is off. 1 repeats a slow scene query once and prints extra information. 2+ repeat slow query n times without recording (useful when profiling)
        p.SQHitchDetectionForceNames:
          hint: |-
            Whether name resolution is forced off the game thread. This is not 100% safe, but can be useful when looking at hitches off GT
        p.SQHitchDetectionThreshold:
          hint: |-
            Determines the threshold in milliseconds for a scene query hitch.
        p.ToleranceScale_Length:
          hint: |-
            The approximate size of objects in the simulation. Default: 100
        p.ToleranceScale_Speed:
          hint: |-
            The typical magnitude of velocities of objects in simulation. Default: 1000
        p.UnionsHaveCollisionParticles:
          hint: |-
        p.UseAccumulationArray:
          hint: |-
        p.UseAsyncInterpolation:
          hint: |-
            Whether to interpolate when async mode is enabled
        p.UseConnectivity:
          hint: |-
            Whether to use connectivity graph when breaking up clusters
        p.UseDeprecatedBehaviorUpdateMassScaleChanges:
          hint: |-
            Allows FBodyInstanceCore::bUpdateMassWhenScaleChanges to default to false. This has potential issues, but allows existing projects to retain old behavior
        p.UseLevelsetCollision:
          hint: |-
            Whether unioned objects use levelsets
        p.UseResimCache:
          hint: |-
            Whether resim uses cache to skip work, requires recreating world to take effect
        p.UseTargetVelocityOnImpact:
          hint: |-
            When disabled, we recalculate velocity after impact by comparing our position before we moved to our position after we moved. This doesn't work correctly when colliding with physics objects, so setting this to 1 fixes this one the hit object is moving.
        p.Vehicle.BatchQueries:
          hint: |-
            Enable/Disable Batching Of Suspension Raycasts.
        p.Vehicle.CacheTraceOverlap:
          hint: |-
            Enable/Disable Caching Of Suspension Trace Overlap Test Optimization (only valid when BatchQueries enabled).
        p.Vehicle.ControlInputWakeTolerance:
          hint: |-
            Set the control input wake tolerance.
        p.Vehicle.DisableAerodynamics:
          hint: |-
            Enable/Disable Aerodynamic Forces Drag/Downforce.
        p.Vehicle.DisableAerofoils:
          hint: |-
            Enable/Disable Aerofoil Forces.
        p.Vehicle.DisableConstraintSuspension:
          hint: |-
            Enable/Disable Constraint based suspension, swaps to basic force based suspension without hardstops instead.
        p.Vehicle.DisableFrictionForces:
          hint: |-
            Enable/Disable Wheel Friction Forces.
        p.Vehicle.DisableRollbarForces:
          hint: |-
            Enable/Disable Rollbar Forces.
        p.Vehicle.DisableStabilizeControl:
          hint: |-
            Enable/Disable Position Stabilization Control.
        p.Vehicle.DisableSuspensionForces:
          hint: |-
            Enable/Disable Suspension Forces.
        p.Vehicle.DisableThrusters:
          hint: |-
            Enable/Disable Thruster Forces.
        p.Vehicle.DisableTorqueControl:
          hint: |-
            Enable/Disable Direct Torque Control.
        p.Vehicle.DisableVehicleSleep:
          hint: |-
            Disable Vehicle Agressive Sleeping.
        p.Vehicle.EnableMultithreading:
          hint: |-
            Enable multi-threading of vehicle updates.
        p.Vehicle.OverlapTestExpansionXY:
          hint: |-
            Raycast Overlap Test Expansion of Bounding Box in X/Y axes.
        p.Vehicle.OverlapTestExpansionZ:
          hint: |-
            Raycast Overlap Test Expansion of Bounding Box in Z axis
        p.Vehicle.ResetMeasurements:
          hint: |-
            Reset Vehicle Performance Measurements.
        p.Vehicle.SetForceDebugScaling:
          hint: |-
            Set Scaling For Force Visualisation.
        p.Vehicle.SetMaxMPH:
          hint: |-
            Set a top speed in MPH (affects all vehicles).
        p.Vehicle.ShowAerofoilForces:
          hint: |-
            Enable/Disable Aerofoil Force Visualisation.
        p.Vehicle.ShowAerofoilSurface:
          hint: |-
            Enable/Disable a very approximate visualisation of where the Aerofoil surface is located and its orientation.
        p.Vehicle.ShowAllForces:
          hint: |-
            Enable/Disable Force Visualisation.
        p.Vehicle.ShowBatchQueryExtents:
          hint: |-
            Enable/Disable Suspension Forces Visualisation.
        p.Vehicle.ShowCOM:
          hint: |-
            Enable/Disable Center Of Mass Debug Visualisation.
        p.Vehicle.ShowModelOrigin:
          hint: |-
            Enable/Disable Model Origin Visualisation.
        p.Vehicle.ShowRaycastComponent:
          hint: |-
            Enable/Disable Raycast Component Hit Visualisation.
        p.Vehicle.ShowRaycastMaterial:
          hint: |-
            Enable/Disable Raycast Material Hit Visualisation.
        p.Vehicle.ShowSuspensionForces:
          hint: |-
            Enable/Disable Suspension Forces Visualisation.
        p.Vehicle.ShowSuspensionLimits:
          hint: |-
            Enable/Disable Suspension Limits Visualisation.
        p.Vehicle.ShowSuspensionRaycasts:
          hint: |-
            Enable/Disable Suspension Raycast Visualisation.
        p.Vehicle.ShowWheelCollisionNormal:
          hint: |-
            Enable/Disable Wheel Collision Normal Visualisation.
        p.Vehicle.ShowWheelForces:
          hint: |-
            Enable/Disable Wheel Forces Visualisation.
        p.Vehicle.SleepCounterThreshold:
          hint: |-
            Set The Sleep Counter Iteration Threshold.
        p.Vehicle.SteeringOverride:
          hint: |-
            Hard code steering input on.
        p.Vehicle.ThrottleOverride:
          hint: |-
            Hard code throttle input on.
        p.Vehicle.TraceTypeOverride:
          hint: |-
            Override ray trace type, 1=Simple, 2=Complex.
        p.VisualizeMovement:
          hint: |-
            Whether to draw in-world debug information for character movement.
            0: Disable, 1: Enable
        pak.ReaderReleaseDelay:
          hint: |-
            If > 0, then synchronous pak readers older than this will be deleted.
        PerfWarn.CoarseMinFPS:
          hint: |-
            The FPS threshold below which we warn about for coarse-grained sampling.
        PerfWarn.CoarsePercentThreshold:
          hint: |-
            The percentage of samples that fall below min FPS above which we warn for.
        PerfWarn.CoarseSampleTime:
          hint: |-
            How many seconds we sample the percentage for the coarse-grained minimum FPS.
        PerfWarn.FineMinFPS:
          hint: |-
            The FPS threshold below which we warn about for fine-grained sampling.
        PerfWarn.FinePercentThreshold:
          hint: |-
            The percentage of samples that fall below min FPS above which we warn for.
        PerfWarn.FineSampleTime:
          hint: |-
            How many seconds we sample the percentage for the fine-grained minimum FPS.
        PixelStreaming.AllowPixelStreamingCommands:
          hint: |-
            If true browser can send consoleCommand payloads that execute in UE's console.
        PixelStreaming.DisableLatencyTester:
          hint: |-
            If true disables latency tester being triggerable.
        PixelStreaming.Encoder.Codec:
          hint: |-
            PixelStreaming encoder codec. Supported values are `H264`, `VP8`, `VP9`
        PixelStreaming.Encoder.DumpDebugFrames:
          hint: |-
            Dumps frames from the encoder to a file on disk for debugging purposes.
        PixelStreaming.Encoder.EnableFillerData:
          hint: |-
            Maintains constant bitrate by filling with junk data. Note: Should not be required with CBR and MinQP = -1. Default: false.
        PixelStreaming.Encoder.H264Profile:
          hint: |-
            PixelStreaming encoder profile. Supported modes are `AUTO`, `BASELINE`, `MAIN`, `HIGH`, `HIGH444`, `STEREO`, `SVC_TEMPORAL_SCALABILITY`, `PROGRESSIVE_HIGH`, `CONSTRAINED_HIGH`
        PixelStreaming.Encoder.KeyframeInterval:
          hint: |-
            How many frames before a key frame is sent. Default: 300. Values <=0 will disable sending of periodic key frames. Note: NVENC does not support changing this after encoding has started.
        PixelStreaming.Encoder.MaxBitrateVBR:
          hint: |-
            Max bitrate (bps). Does not work in CBR rate control mode with NVENC.
        PixelStreaming.Encoder.MaxQP:
          hint: |-
            0-51, lower values result in better quality but higher bitrate. Default 51 - i.e. no limit on a maximum QP.
        PixelStreaming.Encoder.MinQP:
          hint: |-
            0-51, lower values result in better quality but higher bitrate. Default 0 - i.e. no limit on a minimum QP.
        PixelStreaming.Encoder.Multipass:
          hint: |-
            PixelStreaming encoder multipass. Supported modes are `DISABLED`, `QUARTER`, `FULL`
        PixelStreaming.Encoder.RateControl:
          hint: |-
            PixelStreaming video encoder RateControl mode. Supported modes are `ConstQP`, `VBR`, `CBR`. Default: CBR, which we recommend.
        PixelStreaming.Encoder.TargetBitrate:
          hint: |-
            Target bitrate (bps). Ignore the bitrate WebRTC wants (not recommended). Set to -1 to disable. Default -1.
        PixelStreaming.FreezeFrameQuality:
          hint: |-
            Compression quality of the freeze frame
        PixelStreaming.HUDStats:
          hint: |-
            Whether to show PixelStreaming stats on the in-game HUD (default: true).
        PixelStreaming.KeyFilter:
          hint: |-
            Comma separated list of keys to ignore from streaming clients.
        PixelStreaming.LogStats:
          hint: |-
            Whether to show PixelStreaming stats in the log (default: false).
        PixelStreaming.SendPlayerIdAsInteger:
          hint: |-
            If true transmit the player id as an integer (for backward compatibility) or as a string.
        PixelStreaming.WebRTC.DegradationPreference:
          hint: |-
            PixelStreaming degradation preference. Supported modes are `BALANCED`, `MAINTAIN_FRAMERATE`, `MAINTAIN_RESOLUTION`
        PixelStreaming.WebRTC.DisableAudioSync:
          hint: |-
            Disables the synchronization of audio and video tracks in WebRTC. This can be useful in low latency usecases where synchronization is not required.
        PixelStreaming.WebRTC.DisableReceiveAudio:
          hint: |-
            Disables receiving audio from the browser into UE.
        PixelStreaming.WebRTC.DisableStats:
          hint: |-
            Disables the collection of WebRTC stats.
        PixelStreaming.WebRTC.DisableTransmitAudio:
          hint: |-
            Disables transmission of UE audio to the browser.
        PixelStreaming.WebRTC.Fps:
          hint: |-
            Framerate for WebRTC encoding. Default: 60
        PixelStreaming.WebRTC.HighQpThreshold:
          hint: |-
            Only useful when MinQP=-1. Value between 1-51 (default: 37). If WebRTC is getting frames above this QP it will decrease resolution when not in MAINTAIN_RESOLUTION mode.
        PixelStreaming.WebRTC.LowQpThreshold:
          hint: |-
            Only useful when MinQP=-1. Value between 1-51 (default: 25). If WebRTC is getting frames below this QP it will try to increase resolution when not in MAINTAIN_RESOLUTION mode.
        PixelStreaming.WebRTC.MaxBitrate:
          hint: |-
            Max bitrate (bps) that WebRTC will not request above. Careful not to set too high otherwise because a local (ideal network) will actually reach this. Default: 20000000
        PixelStreaming.WebRTC.MinBitrate:
          hint: |-
            Min bitrate (bps) that WebRTC will not request below. Careful not to set too high otherwise WebRTC will just drop frames. Default: 100000
        PixelStreaming.WebRTC.StartBitrate:
          hint: |-
            Start bitrate (bps) that WebRTC will try begin the stream with. Must be between Min/Max bitrates. Default: 1000000
        PixelStreaming.WebRTC.UseLegacyAudioDevice:
          hint: |-
            Whether put audio and video in the same stream (which will make WebRTC try to sync them).
        PlacementMode.ItemInternalsInTooltip:
          hint: |-
            Shows placeable item internal information in its tooltip
        PlayerController.LevelVisibilityDontSerializeFileName:
          hint: |-
            When true, we'll always skip serializing FileName with FUpdateLevelVisibilityLevelInfo's. This will save bandwidth when games don't need both.
        PlayerController.NetResetServerPredictionDataOnPawnAck:
          hint: |-
            Whether to reset server prediction data for the possessed Pawn when the pawn ack handshake completes.
            0: Disable, 1: Enable
        PurgeOldLightmaps:
          hint: |-
            If non-zero, purge old lightmap data when rebuilding lighting.
        ref.AllowParallelCollection:
          hint: |-
            Used to control parallel reference collection.
        replay.MontageErrorThreshold:
          hint: |-
            Tolerance level for when montage playback position correction occurs in replays
        Replay.UseReplayConnection:
          hint: |-
        RHI.FeatureSetLimit:
          hint: |-
            If set to 10, limit D3D RHI to D3D10 feature level. Otherwise, it will use default. Changing this at run-time has no effect. (default is -1)
        RHI.GPUHitchThreshold:
          hint: |-
            Threshold for detecting hitches on the GPU (in milliseconds).
        RHI.MaximumFrameLatency:
          hint: |-
            Number of frames that can be queued for render.
        RHI.MaxSyncCounter:
          hint: |-
            Maximum sync counter to smooth out vsync transitions.
        rhi.PresentThreshold.Bottom:
          hint: |-
            Specifies the percentage of the screen from the bottom where tearing is allowed.
            Only effective on supported platforms.
            Range: 0.0 - 1.0
        rhi.PresentThreshold.Top:
          hint: |-
            Specifies the percentage of the screen from the top where tearing is allowed.
            Only effective on supported platforms.
            Range: 0.0 - 1.0
        RHI.RefreshPercentageBeforePresent:
          hint: |-
            The percentage of the refresh period to wait before presenting.
        rhi.ResourceTableCaching:
          hint: |-
            If 1, the RHI will cache resource table contents within a frame. Otherwise resource tables are rebuilt for every draw call.
        rhi.SyncAllowEarlyKick:
          hint: |-
            When 1, allows the RHI vsync thread to kick off the next frame early if we've missed the vsync.
        rhi.SyncInterval:
          hint: |-
            Determines the frequency of VSyncs in supported RHIs.
            This is in multiples of 16.66 on a 60hz display, but some platforms support higher refresh rates.
            Assuming 60fps, the values correspond to:
              0 - Unlocked (present immediately)
              1 - Present every vblank interval
              2 - Present every 2 vblank intervals
              3 - etc...
        RHI.SyncRefreshThreshold:
          hint: |-
            Threshold for time above which vsync will be disabled as a percentage of the refresh rate.
        rhi.SyncSlackMS:
          hint: |-
            Increases input latency by this many milliseconds, to help performance (trade-off tunable). Gamethread will be kicked off this many milliseconds before the vsync
        RHI.SyncThreshold:
          hint: |-
            Number of consecutive 'fast' frames before vsync is enabled.
        RHI.SyncWithDWM:
          hint: |-
            If true, synchronize with the desktop window manager for vblank.
        RHI.TargetRefreshRate:
          hint: |-
            If non-zero, the display will never update more often than the target refresh rate (in Hz).
        RHI.TransientAllocator.BufferCacheSize:
          hint: |-
            The maximum number of RHI buffers to cache on each heap before garbage collecting.
        RHI.TransientAllocator.GarbageCollectLatency:
          hint: |-
            Amount of update cycles before memory is reclaimed.
        RHI.TransientAllocator.MaximumHeapSize:
          hint: |-
            Maximum size of an RHI transient allocation in MB. Allocations larger than this will fail the transient allocator (Default 512).
        RHI.TransientAllocator.MinimumHeapSize:
          hint: |-
            Minimum size of an RHI transient heap in MB. Heaps will default to this size and grow to the maximum based on the first allocation (Default 128).
        RHI.TransientAllocator.TextureCacheSize:
          hint: |-
            The maximum number of RHI textures to cache on each heap before garbage collecting.
        RHIPoolAllocator.DefragMaxPoolsToClear:
          hint: |-
            Maximum amount of pools to try and clear during a single alloctor defrag call (default: 1 - negative then all pools will be tried and no timeslicing)
        RHIPoolAllocator.DefragSizeFraction:
          hint: |-
            Skip defrag of pool if usage is more than given fraction (default: 0.9f).
        RHIPoolAllocator.ValidateLinkedList:
          hint: |-
            Validate all the internal linked list data of all the RHIPoolAllocators during every operation.
        RunAsyncTraceOnWorkerThread:
          hint: |-
            Whether to use worker thread for async trace functionality. This works if FApp::ShouldUseThreadingForPerformance is true. Otherwise it will always use game thread. 
            0: Use game thread, 1: User worker thread
        SafeZone.EnableScale:
          hint: |-
            IS the safe zone scale enabled?
        SafeZone.Scale:
          hint: |-
            The safezone scale.
        save.FixupStandaloneFlags:
          hint: |-
            If non-zero, when the UAsset of a package is missing RF_Standalone, the flag is added. If zero, the flags are not changed and the save fails.
        SavePackage.EnableNewSave:
          hint: |-
            Enable new package save mechanism over the old one.
        SceneOutliner.ProcessingBudgetPerFrame:
          hint: |-
            Maximum time in milliseconds to spend processing operations per frame
        Sequencer.AddKeepStateDeterminismFences:
          hint: |-
            Whether the Sequencer compiler should auto-add determinism fences for the last frame of KeepState sections. This ensures that the last possible value of the section is consistently evaluated regardless of framerate, at the cost of an extra evaluation on frames that cross over KeepState sections' end time.
        Sequencer.AlwaysRecordLiveLinkTimecode:
          hint: |-
            This CVAR is no longer used please set the Always Use Timmecode value individually on the Live Link Source.
        Sequencer.AlwaysSendInterpolatedLiveLink:
          hint: |-
            If nonzero we always interpolate when sending out live link data, if 0 we may send out frames at a higher rate than engine tick, if the data is dense.
        Sequencer.Audio.IgnoreAudioSyncDuringWorldTimeDilation:
          hint: |-
            Ignore correcting audio if there is world time dilation.
        Sequencer.Audio.MaxDesyncTolerance:
          hint: |-
            Controls how many seconds an audio track can be out of sync in a Sequence before we attempt a time correction.
        Sequencer.Audio.UseAudioClockForAudioDesync:
          hint: |-
            When set to 1, we will use the audio render thread directly to query whether audio has went out of sync with the sequence.
        Sequencer.AutoScrubCurveExponent:
          hint: |-
            How much to ramp in and out the scrub speed when auto-scrubbing
        Sequencer.AutoScrubSpeed:
          hint: |-
            How fast to scrub forward/backward when auto-scrubbing
        Sequencer.AutoTangentNew:
          hint: |-
            If 1 Auto Tangent will use new algorithm to gradually flatten maximum/minimum keys, if 0 Auto Tangent will average all keys (pre 4.23 behavior).
        Sequencer.CompilerVersion:
          hint: |-
            Defines a global identifer for moviescene compiler logic.
        Sequencer.DeferMovementUpdates:
          hint: |-
            (Default: false) Enables deferring all Scene Component movement updates to the end of a sequencer evaluation to avoid excessive calls to UpdateOverlaps or cascading transform updates for attached components.
        Sequencer.DrawMeshTrails:
          hint: |-
            Toggle to show or hide Level Sequencer VR Editor trails
        Sequencer.LinearCubicInterpolation:
          hint: |-
            If 1 Linear Keys Act As Cubic Interpolation with Linear Tangents, if 0 Linear Key Forces Linear Interpolation to Next Key.
        Sequencer.MaxLatentActionLoops:
          hint: |-
            Defines the maximum number of latent action loops that can be run in one frame.
        Sequencer.NetSyncThreshold:
          hint: |-
            (Default: 200ms. Defines the threshold at which clients and servers must be forcibly re-synced during playback.
        Sequencer.OutputDeferredMovementMode:
          hint: |-
            Integer value specifying how to output Scene Components with deferred movement updates from Sequencer: (0 - Default) No output, (1 - Dump Once) Request a single output on the next evaluation, (2 - Dump every frame) Dump all movement updates every frame
        Sequencer.RelativeTimecodeSmoothing:
          hint: |-
            If nonzero, accumulate with platform time since when the timecodes were equal.
        Sequencer.SecondsPerFrame:
          hint: |-
            Seconds per frame to wait when in play every frame mode.
        Sequencer.SmoothedMaxNetSyncSampleAge:
          hint: |-
            (Default: 5000. Defines the range of samples (in milliseconds) required to perform smoothed net sync. Use 0 to disable smoothing.
        Sequencer.SmoothedMaxNetSyncSampleCount:
          hint: |-
            (Default: 50. The maximum number of samples to keep in memory.
        Sequencer.SmoothedNetSyncDeviationThreshold:
          hint: |-
            (Default: 200ms. Defines the acceptable deviation for smoothed net sync samples. Samples outside this deviation will be discarded.
        Sequencer.TagSaturation:
          hint: |-
            Specifies how saturated object binding tags should appear in the Sequencer UI.
        Sequencer.ThreadedEvaluation.AllocationThreshold:
          hint: |-
            (Default: 32) Defines the entity allocation fragmentation threshold above which threaded evaluation will be used.
        Sequencer.ThreadedEvaluation.EntityThreshold:
          hint: |-
            (Default: 256) Defines the number of entities that need to exist to justify threaded evaluation.
        Sequencer.UseOldSequencerTrails:
          hint: |-
            If true show old motion trails, if false use new editable motion trails.
        Sequencer.VolatileSequencesInEditor:
          hint: |-
            (Default: 1) When non-zero, all assets will be treated as volatile in editor. Can be disabled to bypass volatility checks in-editor for more representative runtime performance metrics.
        Serialization.AllowSidecarSyncing:
          hint: |-
            When true FEditorBulkData will attempt to sync it's .upayload file via sourcecontrol if the first attempt to load from it fails
        Serialization.LoadFromSidecar:
          hint: |-
            When true FEditorBulkData will load from the sidecar file
        Serialization.LoadFromTrailer:
          hint: |-
            When true FEditorBulkData will load payloads via the package trailer rather than the package itself
        Serialization.RehydrateOnSave:
          hint: |-
            When true FVirtualizedUntypedBulkData virtualized payloads will by hydrated and stored locally when saved to a package
        Serialization.ValidatePayloads:
          hint: |-
            When true FEditorBulkData validate any payload loaded from the sidecar file
        ShowFlag.AmbientCubemap:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.AmbientOcclusion:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.AntiAliasing:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Atmosphere:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.AudioRadius:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.BillboardSprites:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Bloom:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Bones:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Bounds:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Brushes:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.BSP:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.BSPSplit:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.BSPTriangles:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.BuilderBrush:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.CameraAspectRatioBars:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.CameraFrustums:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.CameraImperfections:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.CameraInterpolation:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.CameraSafeFrames:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.CapsuleShadows:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Collision:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.CollisionPawn:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.CollisionVisibility:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ColorGrading:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.CompositeEditorPrimitives:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Constraints:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ContactShadows:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Cover:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.DebugAI:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Decals:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.DeferredLighting:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.DepthOfField:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Diffuse:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.DirectionalLights:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.DirectLighting:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.DisableOcclusionQueries:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.DistanceCulledPrimitives:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.DistanceFieldAO:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.DrawOnlyVSMInvalidatingGeo:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.DVRStreamingSystem:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.DynamicShadows:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.EditingLevelInstance:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Editor:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.EyeAdaptation:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Fog:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ForceFeedbackRadius:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Game:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.GameplayDebug:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.GBufferHints:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.GlobalIllumination:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Grain:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Grid:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.HighResScreenshotMask:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.HISMCClusterTree:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.HISMCOcclusionBounds:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.HitProxies:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.HLODColoration:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.HMDDistortion:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.IndirectLightingCache:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.InstancedFoliage:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.InstancedGrass:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.InstancedStaticMeshes:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Landscape:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LargeVertices:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LensFlares:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LevelColoration:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LightComplexity:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LightFunctions:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LightInfluences:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Lighting:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LightingOnlyOverride:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LightMapDensity:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LightRadius:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LightShafts:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LocalExposure:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LOD:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LODColoration:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LumenDetailTraces:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LumenFarFieldTraces:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LumenGlobalIllumination:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LumenGlobalTraces:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LumenReflections:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LumenReuseShadowMaps:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LumenScreenSpaceDirectionalOcclusion:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LumenScreenTraces:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.LumenSecondaryBounces:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.MassProperties:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Materials:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.MaterialTextureScaleAccuracy:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.MediaPlanes:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.MeshEdges:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.MeshUVDensityAccuracy:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ModeWidgets:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.MotionBlur:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.NaniteMeshes:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Navigation:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Niagara:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.OcclusionMeshes:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.OnScreenDebug:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.OpaqueCompositeEditorPrimitives:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.OutputMaterialTextureScales:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.OverrideDiffuseAndSpecular:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Paper2DSprites:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Particles:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.PathTracing:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.PhysicalMaterialMasks:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.PhysicsField:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Pivot:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.PointLights:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.PostProcessing:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.PostProcessMaterial:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.PrecomputedVisibility:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.PrecomputedVisibilityCells:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.PreviewShadowsIndicator:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.PrimitiveDistanceAccuracy:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.PropertyColoration:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.QuadOverdraw:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.RayTracedDistanceFieldShadows:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.RayTracingDebug:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.RectLights:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ReflectionEnvironment:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ReflectionOverride:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Refraction:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Rendering:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.RequiredTextureResolution:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.SceneColorFringe:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ScreenPercentage:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ScreenSpaceAO:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ScreenSpaceReflections:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Selection:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.SelectionOutline:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.SeparateTranslucency:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ServerDrawDebug:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ShaderComplexity:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ShaderComplexityWithQuadOverdraw:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ShadowFrustums:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.SingleLayerWaterRefractionFullPrecision:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.SkeletalMeshes:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.SkyLighting:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Snap:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Specular:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Splines:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.SpotLights:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.StaticMeshes:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.StationaryLightOverlap:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.StereoRendering:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.StreamingBounds:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.SubsurfaceScattering:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.TemporalAA:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.TestImage:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.TextRender:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.TexturedLightProfiles:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.ToneCurve:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Tonemapper:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Translucency:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VectorFields:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VertexColors:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Vignette:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VirtualShadowMapCaching:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VirtualTexturePendingMips:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VirtualTexturePrimitives:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VirtualTextureResidency:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisLog:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeBuffer:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeCalibrationColor:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeCalibrationCustom:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeCalibrationGrayscale:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeDistanceFieldAO:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeDOF:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeGlobalDistanceField:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeHDR:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeInstanceUpdates:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeLevelInstanceEditing:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeLightCulling:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeLightingOnProbes:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeLocalExposure:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeLumen:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeMeshDistanceFields:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeMotionBlur:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeMotionVectors:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeNanite:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeOutOfBoundsPixels:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizePostProcessStack:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeSenses:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeShadingModels:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeSkyAtmosphere:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeSSR:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeSSS:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeStrataMaterial:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeVirtualShadowMap:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeVolumetricCloudConservativeDensity:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VisualizeVolumetricLightmap:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VolumeLightingSamples:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Volumes:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VolumetricFog:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VolumetricLightmap:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.VREditing:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.WidgetComponents:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        ShowFlag.Wireframe:
          hint: |-
            Allows to override a specific showflag (works in editor and game, "show" only works in game and UI only in editor)
            Useful to run a build many time with the same showflags (when put in consolevariables.ini like "showflag.abc=0")
             0: force the showflag to be OFF
             1: force the showflag to be ON
             2: do not override this showflag (default)
        SigMan.FilterTag:
          hint: |-
            Only display objects with the specified filter tag.  If None objects with any will be displayed.
        SigMan.ObjectsToShow:
          hint: |-
            How many objects to display when ShowDebug SignificanceManager is enabled.
        SkeletalMesh.UseExperimentalChunking:
          hint: |-
            Whether skeletal mesh will use a experimental chunking algorithm when building LODModel.
        SkinWeightProfileManager.AllowCPU:
          hint: |-
            Whether or not to allow cpu buffer generation
        SlateDebugger.bCaptureRootInvalidationCallstacks:
          hint: |-
            Whenever a widget is the root cause of an invalidation, capture the callstack for slate insights.
        SlateDebugger.Event.CaptureStack:
          hint: |-
            Should we capture the stack when there are events?
        SlateDebugger.Event.InputRoutingModeEnabled:
          hint: |-
            Should we output the route that an input event took?
        SlateDebugger.Event.LogAttemptNavigationEvent:
          hint: |-
            Log attempt navigation events
        SlateDebugger.Event.LogCaptureStateChangeEvent:
          hint: |-
            Log cursor state change events
        SlateDebugger.Event.LogCursorChangeEvent:
          hint: |-
            Log cursor change events
        SlateDebugger.Event.LogExecuteNavigationEvent:
          hint: |-
            Log execute navigation events
        SlateDebugger.Event.LogFocusEvent:
          hint: |-
            Log focus events
        SlateDebugger.Event.LogInputEvent:
          hint: |-
            Log input events
        SlateDebugger.Event.LogWarning:
          hint: |-
            Log warning events
        SlateDebugger.Invalidate.bLogInvalidatedWidget:
          hint: |-
            Option to log the invalidated widget to the console.
        SlateDebugger.Invalidate.bShowLegend:
          hint: |-
            Option to display the color legend.
        SlateDebugger.Invalidate.bShowWidgetList:
          hint: |-
            Option to display the names of invalidated widgets.
        SlateDebugger.Invalidate.bUsePerformanceThreshold:
          hint: |-
            Only display the invalidated widgets and/or log them if the performance are worst than the threshold (in millisecond).
        SlateDebugger.Invalidate.Enabled:
          hint: |-
            Start/Stop the Invalidation widget debug tool. It shows widgets that are invalidated.
        SlateDebugger.Invalidate.ThresholdPerformanceMS:
          hint: |-
            For bUsePerformanceThreshold, threshold in milliseconds to reach before logging and/or displaying the invalidated widgets.
        SlateDebugger.InvalidationRoot.Enable:
          hint: |-
            Start/Stop the Invalidation Root widget debug tool. It shows when Invalidation Roots are using the slow or the fast path.
        SlateDebugger.Paint.Enable:
          hint: |-
            Start/Stop the painted widget debug tool. It shows when widgets are painted.
        SlateDebugger.Paint.LogWarningIfWidgetIsPaintedMoreThanOnce:
          hint: |-
            Option to log a warning if a widget is painted more than once in a single frame.
        SlateDebugger.Paint.MaxNumberOfWidgetDisplayedInList:
          hint: |-
            The max number of widgets that will be displayed when DisplayWidgetNameList is active.
        SlateDebugger.Paint.OnlyGameWindow:
          hint: |-
            Option to only the debug the game window
        SlateDebugger.Update.Enable:
          hint: |-
            Start/Stop the painted widget debug tool. It shows when widgets are updated.
        SlateDebugger.Update.OnlyGameWindow:
          hint: |-
            Option to only the debug the game window
        SlateDebugger.Update.SetInvalidationRootIdFilter:
          hint: |-
            Option to show only the widgets that are part of an invalidation root.
        SourceControl.P4.AllowNonTicketLogins:
          hint: |-
            Whether or not to allow logging in with a password directly from the perforce dialog. This is off by default because it is not a secure option. Perforce often your password as plain text in their enviroment variables
        SourceControlAssetDataCache.MaxAsyncTask:
          hint: |-
            Maximum number of task running in parallel to fetch AssetData information.
        spectatorbeacon.DelayCancellationResponse:
          hint: |-
            Delay time between received cancel response and notification
            Time in secs
        spectatorbeacon.DelayFullResponse:
          hint: |-
            Delay time between received full response and notification
            Time in secs
        spectatorbeacon.DelayReservationResponse:
          hint: |-
            Delay time between received response and notification
            Time in secs
        spectatorbeacon.DelayUpdateResponse:
          hint: |-
            Delay time between received update response and notification
            Time in secs
        SpewAnimRateOptimization:
          hint: |-
            True to spew overall anim rate optimization tick rates.
        splines.blockall:
          hint: |-
            Force splines to always use the BlockAll collision profile instead of whatever is stored in the CollisionProfileName property
        stats.MaxPerGroup:
          hint: |-
            The max number of lines of stats to show in a group
        stats.SpewSpam:
          hint: |-
            If set to 1, periodically prints a profile of messages coming into the stats system. Messages should be minimized to cut down on overhead.
        TakeRecorder.AllowMenuExtensions:
          hint: |-
        TakeRecorder.SaveRecordedAssetsOverride:
          hint: |-
            0: Save recorded assets is based on user settings
            1: Override save recorded assets to always start on
        TaskGraph.EnableForkedMultithreading:
          hint: |-
            When false will prevent the task graph from running multithreaded on forked processes.
        TaskGraph.ForkedProcessMaxWorkerThreads:
          hint: |-
            Configures the number of worker threads a forked process should spawn if it allows multithreading.
        TaskGraph.IgnoreThreadToDoGatherOn:
          hint: |-
            DEPRECATED! If 1, then we ignore the hint provided with SetGatherThreadForDontCompleteUntil and just run it on AnyHiPriThreadHiPriTask.
        TaskGraph.NumForegroundWorkers:
          hint: |-
            Configures the number of foreground worker threads. Requires the scheduler to be restarted to have an affect
        TaskGraph.PrintBroadcastWarnings:
          hint: |-
            If > 0 taskgraph will emit warnings when waiting on broadcasts
        TaskGraph.RenderThreadPollPeriodMs:
          hint: |-
            Render thread polling period in milliseconds. If value < 0, task graph tasks explicitly wake up RT, otherwise RT polls for tasks.
        TaskGraph.TaskPriorities.AsyncEndOfFrameGameTasks:
          hint: |-
            Task and thread priority for the experiemntal async end of frame tasks.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.AsyncEndOfFrameGameTasks bnh
        TaskGraph.TaskPriorities.AsyncTraceTask:
          hint: |-
            Task and thread priority for async traces.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.AsyncTraceTask bnh
        TaskGraph.TaskPriorities.ClearAudioChunkCacheReadRequest:
          hint: |-
            Task and thread priority for an async task that clears FCacheElement::ReadRequest
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.ClearAudioChunkCacheReadRequest bnh
        TaskGraph.TaskPriorities.CompilePipelineStateTask:
          hint: |-
            Task and thread priority for FCompilePipelineStateTask.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.CompilePipelineStateTask bnh
        TaskGraph.TaskPriorities.FMeshDrawCommandPassSetupTask:
          hint: |-
            Task and thread priority for FMeshDrawCommandPassSetupTask.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.FMeshDrawCommandPassSetupTask bnh
        TaskGraph.TaskPriorities.GatherShadowPrimitives:
          hint: |-
            Task and thread priority for GatherShadowPrimitives tasks.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.GatherShadowPrimitives bnh
        TaskGraph.TaskPriorities.HiPriAsyncTickTaskPriority:
          hint: |-
            Task and thread priority for async ticks that are high priority.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.HiPriAsyncTickTaskPriority bnh
        TaskGraph.TaskPriorities.IoDispatcherAsyncTasks:
          hint: |-
            Task and thread priority for IoDispatcher decompression.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.IoDispatcherAsyncTasks bnh
        TaskGraph.TaskPriorities.NavTriggerAsyncQueries:
          hint: |-
            Task and thread priority for UNavigationSystemV1::PerformAsyncQueries.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.NavTriggerAsyncQueries bnh
        TaskGraph.TaskPriorities.NormalAsyncTickTaskPriority:
          hint: |-
            Task and thread priority for async ticks that are not high priority.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.NormalAsyncTickTaskPriority bnh
        TaskGraph.TaskPriorities.ParallelAnimationEvaluationTask:
          hint: |-
            Task and thread priority for FParallelAnimationEvaluationTask
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.ParallelAnimationEvaluationTask bnh
        TaskGraph.TaskPriorities.ParallelAnimCompletionTaskHighPriority:
          hint: |-
            Allows parallel anim completion tasks to take priority on the GT so further work (if needed) can be kicked off earlier.
        TaskGraph.TaskPriorities.ParallelBlendPhysicsTask:
          hint: |-
            Task and thread priority for FParallelBlendPhysicsTask.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.ParallelBlendPhysicsTask bnh
        TaskGraph.TaskPriorities.ParallelClothTask:
          hint: |-
            Task and thread priority for parallel cloth.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.ParallelClothTask bnh
        TaskGraph.TaskPriorities.ParallelTranslateCommandList:
          hint: |-
            Task and thread priority for FParallelTranslateCommandList.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.ParallelTranslateCommandList bnh
        TaskGraph.TaskPriorities.ParallelTranslateCommandListPrepass:
          hint: |-
            Task and thread priority for FParallelTranslateCommandList for the prepass, which we would like to get to the GPU asap.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.ParallelTranslateCommandListPrepass bnh
        TaskGraph.TaskPriorities.ParallelTranslateSetupCommandList:
          hint: |-
            Task and thread priority for FParallelTranslateSetupCommandList.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.ParallelTranslateSetupCommandList bnh
        TaskGraph.TaskPriorities.ParticleAsyncTask:
          hint: |-
            Task and thread priority for FParticleAsyncTask.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.ParticleAsyncTask bnh
        TaskGraph.TaskPriorities.ParticleManagerAsyncTask:
          hint: |-
            Task and thread priority for FParticleManagerAsyncTask.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.ParticleManagerAsyncTask bnh
        TaskGraph.TaskPriorities.PhysicsTickTask:
          hint: |-
            Task and thread priotiry for Chaos physics tick
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.PhysicsTickTask bnh
        TaskGraph.TaskPriorities.RHIThreadOnTaskThreads:
          hint: |-
            Task and thread priority for when we are running 'RHI thread' tasks on any thread.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.RHIThreadOnTaskThreads bnh
        TaskGraph.TaskPriorities.SceneRenderingTask:
          hint: |-
            Task and thread priority for various scene rendering tasks.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.SceneRenderingTask bnh
        TaskGraph.TaskPriorities.TickCleanupTaskPriority:
          hint: |-
            Task and thread priority for tick cleanup.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.TickCleanupTaskPriority bnh
        TaskGraph.TaskPriorities.TickDispatchTaskPriority:
          hint: |-
            Task and thread priority for tick tasks dispatch.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.TickDispatchTaskPriority bnh
        TaskGraph.TaskPriorities.UpdateCachePrimitivesTask:
          hint: |-
            Task and thread priority for FUpdateCachePrimitivesTask.
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: TaskGraph.TaskPriorities.UpdateCachePrimitivesTask bnh
        TaskGraph.TestCriticalLockFree:
          hint: |-
            If > 0, then we sleep periodically at critical points in the lock free lists. Threads must not starve...this will encourage them to starve at the right place to find livelocks.
        TaskGraph.TestDontCompleteUntilForAlreadyComplete:
          hint: |-
            If 1, then we before spawning a gather task, we just check if all of the subtasks are complete, and in that case we can skip the gather.
        TaskGraph.UseBackgroundThreads:
          hint: |-
            If > 0, then use background threads, otherwise run background tasks on normal priority task threads. Used for performance tuning.
        TaskGraph.UseHiPriThreads:
          hint: |-
            If > 0, then use hi priority task threads, otherwise run background tasks on normal priority task threads. Used for performance tuning.
        Tex.AsyncDXTBlocksPerBatch:
          hint: |-
            The number of blocks to compress in parallel for DXT compression.
        tick.AllowAsyncComponentTicks:
          hint: |-
            Used to control async component ticks.
        tick.AllowAsyncTickCleanup:
          hint: |-
            If true, ticks are cleaned up in a task thread.
        tick.AllowAsyncTickDispatch:
          hint: |-
            If true, ticks are dispatched in a task thread.
        tick.AllowConcurrentTickQueue:
          hint: |-
            If true, queue ticks concurrently.
        tick.AnimationDelaysEndGroup:
          hint: |-
            If > 0, then skeletal meshes that do not rely on physics simulation will set their animation end tick group to TG_PostPhysics.
        tick.DoAsyncEndOfFrameTasks:
          hint: |-
            Experimental option to run various things concurrently with the HUD render.
        tick.DoAsyncEndOfFrameTasks.Randomize:
          hint: |-
            Used to add random sleeps to tick.DoAsyncEndOfFrameTasks to shake loose bugs on either thread. Also does random render thread flushes from the game thread.
        tick.DoAsyncEndOfFrameTasks.ValidateReplicatedProperties:
          hint: |-
            If true, validates that replicated properties haven't changed during the Slate tick. Results will not be valid if demo.ClientRecordAsyncEndOfFrame is also enabled.
        tick.HiPriSkinnedMeshes:
          hint: |-
            If > 0, then schedule the skinned component ticks in a tick group before other ticks.
        tick.LightweightTimeguardThresholdMS:
          hint: |-
            Threshold in milliseconds for the tick timeguard
        tick.LogTicks:
          hint: |-
            Spew ticks for debugging.
        tick.SecondsBeforeEmbeddedAppSleeps:
          hint: |-
            When built as embedded, how many ticks to perform before sleeping
        tick.ShowPrerequistes:
          hint: |-
            When logging ticks, show the prerequistes; debugging.
        timecode.UseDropFormatTimecodeByDefaultWhenSupported:
          hint: |-
            By default, should we generate a timecode in drop frame format when the frame rate does support it.
        TimerManager.BuildTimerSourceList:
          hint: |-
            When non-zero, tracks which timers expire each frame, dumping them during shutdown or when the flag is changed back to 0.
              0: Off
              1: On - Group timers by class (useful to focus on entire systems of things, especially bad spikey frames where we care about aggregates)
              2: On - Do not group timers by class (useful if individual instances are problematic)
        TimerManager.DumpAllTimerLogsThreshold:
          hint: |-
            Threshold (in count of active timers) at which to dump info about all active timers to logs. -1 means this is disabled. NOTE: This will only be dumped once per process launch.
        TimerManager.DumpTimerLogResolveVirtualFunctions:
          hint: |-
            When logging timer info virtual functions will be resolved, if possible.
        TimerManager.DumpTimerLogsThreshold:
          hint: |-
            Threshold (in milliseconds) after which we log timer info to try and help track down spikes in the timer code. Disabled when set to 0
        TimerManager.DumpTimerLogSymbolNames:
          hint: |-
            When logging timer info, symbol names will be included if set to 1.
        TimerManager.MaxExpiredTimersToLog:
          hint: |-
            Maximum number of TimerData exceeding the threshold to log in a single frame.
        TracingProfiler.BufferSize:
          hint: |-
            Defines the maximum umber of events stored in the internal ring buffer of the tracing profiler. Only read at process startup and can't be changed at runtime.
        TrackAsyncLoadRequests.Dedupe:
          hint: |-
            If > 0 then deduplicate requests to async load the same package in the report.
        TrackAsyncLoadRequests.DumpAfterCsvProfiling:
          hint: |-
            If > 0, dumps tracked async load requests to a file when csv profiling ends.
        TrackAsyncLoadRequests.Enable:
          hint: |-
            If > 0 then remove aliases from the counting process. This essentialy merges addresses that have the same human readable string. It is slower.
        TrackAsyncLoadRequests.RemoveAliases:
          hint: |-
            If > 0 then remove aliases from the counting process. This essentialy merges addresses that have the same human readable string. It is slower.
        TrackAsyncLoadRequests.StackIgnore:
          hint: |-
            Number of items to discard from the top of a stack frame.
        TrackAsyncLoadRequests.StackLen:
          hint: |-
            Maximum number of stack frame items to keep. This improves aggregation because calls that originate from multiple places but end up in the same place will be accounted together.
        TrackAsyncLoadRequests.Threshhold:
          hint: |-
            Minimum number of hits to include in the report.
        TransBuffer.DumpObjectMap:
          hint: |-
            Whether to dump the object map each time a transaction is written for debugging purposes.
        TypedElements.EnableFoliageInstanceElements:
          hint: |-
            Is support for static mesh instance elements enabled for foliage owned instances?
        TypedElements.EnableReferenceTracking:
          hint: |-
            Is support for element reference tracking enabled?
        TypedElements.EnableSMInstanceElements:
          hint: |-
            Is support for static mesh instance elements enabled?
        UMG.FlushAnimationsAtEndOfFrame:
          hint: |-
            Whether to automatically flush any outstanding animations at the end of the frame, or just wait until next frame.
        UMG.ThumbnailRenderer.Enable:
          hint: |-
            Option to enable/disable thumbnail rendering.
        UncontrolledChangelists.Enable:
          hint: |-
            Enables Uncontrolled Changelists (experimental).
        VI.ActorSnap:
          hint: |-
            Whether or not to snap to Actors in the scene. Off by default, set to 1 to enable.
        VI.AlignCandidateDistance:
          hint: |-
            The distance candidate actors can be from our transformable (in multiples of our transformable's size
        VI.AllowCarryingCertainObjects:
          hint: |-
            When enabled, allows the user to freely move and rotate certain selected objects with a one-hand drag.
        VI.AllowLaserSmooth:
          hint: |-
            Allow laser smoothing using one euro
        VI.AllowVerticalWorldMovement:
          hint: |-
            Whether you can move your tracking space away from the origin or not
        VI.AllowWorldRotationPitchAndRoll:
          hint: |-
            When enabled, you'll not only be able to yaw, but also pitch and roll the world when rotating by gripping with two hands
        VI.CarrySmoothingLerpAlpha:
          hint: |-
            How much to smooth out movement of the object you're carrying.
        VI.DragAtLaserImpactInterpolationDuration:
          hint: |-
            How long we should interpolate objects between positions when dragging under the laser's impact point
        VI.DragAtLaserImpactInterpolationThreshold:
          hint: |-
            Minimum distance jumped between frames before we'll force interpolation mode to activated
        VI.DragHapticFeedbackStrength:
          hint: |-
            Default strength for haptic feedback when starting to drag objects
        VI.DragScale:
          hint: |-
            Scales the translation when dragging yourself through the world
        VI.DragTranslationVelocityStopEpsilon:
          hint: |-
            When dragging inertia falls below this value (cm/frame), we'll stop inertia and finalize the drag
        VI.ElasticSnap:
          hint: |-
            When enabled with grid snap, you can 'pull' objects slightly away from their snapped position
        VI.ElasticSnapStrength:
          hint: |-
            How much objects should 'reach' toward their unsnapped position when elastic snapping is enabled with grid snap
        VI.ForceGizmoPivotToCenterOfObjectsBounds:
          hint: |-
            When enabled, the gizmo's pivot will always be centered on the selected objects.  Otherwise, we use the pivot of the last selected object.
        VI.ForceShowCursor:
          hint: |-
            Whether or not the mirror window's cursor should be enabled. Off by default, set to 1 to enable.
        VI.ForceSnapDistance:
          hint: |-
            The distance (in % of transformable size) where guide lines indicate that actors are aligned
        VI.GizmoHandleHoverAnimationDuration:
          hint: |-
            How quickly to animate gizmo handle hover state
        VI.GizmoHandleHoverScale:
          hint: |-
            How much to scale up transform gizmo handles when hovered over
        VI.GizmoScaleInDesktop:
          hint: |-
            How big the transform gizmo should be when used in desktop mode
        VI.GizmoSelectionAnimationCurvePower:
          hint: |-
            Controls the animation curve for the gizmo after objects are selected
        VI.GizmoSelectionAnimationDuration:
          hint: |-
            How long to animate the gizmo after objects are selected
        VI.GizmoShowMeasurementText:
          hint: |-
            When enabled, gizmo measurements will always be visible.  Otherwise, only when hovering over a scale/stretch gizmo handle
        VI.GrabberSphereOffset:
          hint: |-
            Offset from the controller origin that the grabber sphere should be centered at
        VI.GrabberSphereRadius:
          hint: |-
            In radial mode, the radius of the sphere used to select and interact
        VI.GridHapticFeedbackStrength:
          hint: |-
            Default strength for haptic feedback when moving across grid points
        VI.HighSpeedInertiaDamping:
          hint: |-
            Hight Speed Inertia Damping multiplier
        VI.InertiaVelocityBoost:
          hint: |-
            How much to scale object velocity when releasing dragged simulating objects in Simulate mode
        VI.LaserPointerMaxLength:
          hint: |-
            Maximum length of the laser pointer line
        VI.LaserPointerRetractDuration:
          hint: |-
            How fast the laser pointer should extend or retract
        VI.LaserSmoothLag:
          hint: |-
            Laser smooth lag
        VI.LaserSmoothMinimumCutoff:
          hint: |-
            Laser smooth lag
        VI.LowSpeedInertiaDamping:
          hint: |-
            Low Speed Inertia Damping multiplier
        VI.MaxFlightSpeed:
          hint: |-
            Maximum Superman speed
        VI.MinVelocityForInertia:
          hint: |-
            Minimum velocity (in cm/frame in unscaled room space) before inertia will kick in when releasing objects (or the world)
        VI.NavigationMode:
          hint: |-
            VR NavigationMode
        VI.OculusLaserPointerRotationOffset:
          hint: |-
            How much to rotate the laser pointer (pitch) relative to the forward vector of the controller (Oculus)
        VI.OculusLaserPointerStartOffset:
          hint: |-
            How far to offset the start of the laser pointer to avoid overlapping the hand mesh geometry (Oculus)
        VI.PivotGizmoAimAtAnimationSpeed:
          hint: |-
            The speed to animate to the gizmo full size when aiming at it
        VI.PivotGizmoAimAtShrinkSize:
          hint: |-
            The minimum size when not aiming at the gizmo (0 to 1)
        VI.PivotGizmoDistanceScaleFactor:
          hint: |-
            How much the gizmo handles should increase in size with distance from the camera, to make it easier to select
        VI.PivotGizmoMinDistanceForScaling:
          hint: |-
            How far away the camera needs to be from an object before we'll start scaling it based on distance
        VI.PivotGizmoPlaneTranslationPivotOffsetYZ:
          hint: |-
            How much the plane translation is offsetted from the pivot
        VI.PivotGizmoScalePivotOffsetX:
          hint: |-
            How much the non-uniform scale is offsetted from the pivot
        VI.PivotGizmoTranslationHoverScaleMultiply:
          hint: |-
            Multiplies translation handles hover scale
        VI.PivotGizmoTranslationPivotOffsetX:
          hint: |-
            How much the translation cylinder is offsetted from the pivot
        VI.PivotGizmoTranslationScaleMultiply:
          hint: |-
            Multiplies translation handles scale
        VI.PlacementInterpolationDuration:
          hint: |-
            How long we should interpolate newly-placed objects to their target location.
        VI.PlacementOffsetScaleWhileSimulating:
          hint: |-
            How far to additionally offset objects (as a scalar percentage of the gizmo bounds) from the placement impact point while simulate mode is active
        VI.ScaleMax:
          hint: |-
            Maximum world scale in centimeters
        VI.ScaleMin:
          hint: |-
            Minimum world scale in centimeters
        VI.ScaleSensitivity:
          hint: |-
            Sensitivity for scaling
        VI.SelectionHapticFeedbackStrength:
          hint: |-
            Default strength for haptic feedback when selecting objects
        VI.SFXMultiplier:
          hint: |-
            Default Sound Effect Volume Multiplier
        VI.ShowTransformGizmo:
          hint: |-
            Whether the transform gizmo should be shown for selected objects
        VI.SmoothSnap:
          hint: |-
            When enabled with grid snap, transformed objects will smoothly blend to their new location (instead of teleporting instantly)
        VI.SmoothSnapSpeed:
          hint: |-
            How quickly objects should interpolate to their new position when grid snapping is enabled
        VI.SnapGridLineWidth:
          hint: |-
            Width of the grid lines on the snap grid
        VI.SnapGridSize:
          hint: |-
            How big the snap grid should be.  At 1.0, this will be the maximum of the gizmo's bounding box and a multiple of the current grid snap size
        VI.SweepPhysicsWhileSimulating:
          hint: |-
            If enabled, simulated objects won't be able to penetrate other objects while being dragged in Simulate mode
        VI.TriggerDeadZone_Rift:
          hint: |-
            Trigger dead zone.  The trigger must be fully released before we'll trigger a new 'light press'
        VI.TriggerDeadZone_Vive:
          hint: |-
            Trigger dead zone.  The trigger must be fully released before we'll trigger a new 'light press'
        VI.TriggerFullyPressedThreshold_Rift:
          hint: |-
            Minimum trigger threshold before we consider the trigger 'fully pressed'
        VI.TriggerFullyPressedThreshold_Vive:
          hint: |-
            Minimum trigger threshold before we consider the trigger 'fully pressed'
        VI.TriggerTouchThreshold_Rift:
          hint: |-
            Minimum trigger threshold before we consider the trigger 'touched'
        VI.TriggerTouchThreshold_Vive:
          hint: |-
            Minimum trigger threshold before we consider the trigger 'touched'
        VI.ViveLaserPointerRotationOffset:
          hint: |-
            How much to rotate the laser pointer (pitch) relative to the forward vector of the controller (Vive)
        VI.ViveLaserPointerStartOffset:
          hint: |-
            How far to offset the start of the laser pointer to avoid overlapping the hand mesh geometry (Vive)
        VI.WorldRotationDragThreshold:
          hint: |-
            How much (degrees) you need to perform a rotation gesture before world rotation starts to happen.
        VI.WorldScalingDragThreshold:
          hint: |-
            How much you need to perform a scale gesture before world scaling starts to happen.
        vm.BatchPackedVMOutput:
          hint: |-
            If > 0 output elements will be packed and batched branch free.
        vm.BatchVMInput:
          hint: |-
            If > 0 input elements will be batched.
        vm.BatchVMOutput:
          hint: |-
            If > 0 output elements will be batched.
        vm.DetailedVMScriptStats:
          hint: |-
            If > 0 the vector VM will emit stats for it's internal module calls. 
        vm.FreeUnoptimizedByteCode:
          hint: |-
            When we have optimized the VM byte code should we free the original unoptimized byte code?
        vm.InstancesPerChunk:
          hint: |-
            Number of instances per VM chunk. (default=128) 
        vm.OptimizeVMByteCode:
          hint: |-
            If > 0 vector VM code optimization will be enabled at runtime.
        vm.Parallel:
          hint: |-
            If > 0 vector VM chunk level paralellism will be enabled. 
        vm.ParallelChunksPerBatch:
          hint: |-
            Number of chunks to process per task when running in parallel. 
        vm.SafeOptimizedKernels:
          hint: |-
            If > 0 optimized vector VM byte code will use safe versions of the kernels.
        vm.UseOptimizedVMByteCode:
          hint: |-
            If > 0 optimized vector VM code will be excuted at runtime.
        voice.debug.PrintAmplitude:
          hint: |-
            when set to 1, the current incoming amplitude of the VOIP engine will be displayed on screen.
            0: disabled, 1: enabled.
        voice.DefaultPatchBufferSize:
          hint: |-
            Changes the amount of audio we buffer for VOIP patching, in samples.
        voice.DefaultPatchGain:
          hint: |-
            Changes the default gain of audio patches, in linear gain.
        voice.JitterBufferDelay:
          hint: |-
            The default amount of audio we buffer, in seconds, before we play back audio. Decreasing this value will decrease latency but increase the potential for underruns.
            Value: Number of seconds of audio we buffer.
        voice.MicInputGain:
          hint: |-
            The default gain amount in linear amplitude.
            Value: Gain multiplier.
        voice.MicNoiseAttackTime:
          hint: |-
            Sets the fade-in time for our noise gate.
            Value: Number of seconds we fade in over.
        voice.MicNoiseGateThreshold:
          hint: |-
            Our threshold, in linear amplitude, for  our noise gate on input. Similar to voice.SilenceDetectionThreshold, except that audio quieter than our noise gate threshold will still output silence.
            Value: Number of seconds of audio we buffer.
        voice.MicNoiseReleaseTime:
          hint: |-
            Sets the fade out time for our noise gate.
            Value: Number of seconds we fade out over.
        voice.MicStereoBias:
          hint: |-
            This will attenuate the left or right channel.
            0.0: Centered. 1.0: right channel only. -1.0: Left channel only.
        voice.MuteAudioEngineOutput:
          hint: |-
            When set to a nonzero value, the output for the audio engine will be muted..
        voice.NumChannels:
          hint: |-
            Default number of channels to capture from mic input, encode to Opus, and output. Can be set to 1 or 2.
            Value: Number of channels to use for VOIP input and output.
        voice.playback.ResyncThreshold:
          hint: |-
            If the amount of audio we have buffered is greater than this value, we drop the oldest audio we have and sync to have voice.JitterDelay worth of buffered audio.
        voice.playback.ShouldResync:
          hint: |-
            If set to 1, we will resync VOIP audio once it's latency goes beyond voice.playback.ResyncThreshold.
        voice.SilenceDetectionAttackTime:
          hint: |-
            Attack time to be set for the VOIP microphone's silence detection algorithm in milliseconds.
        voice.SilenceDetectionReleaseTime:
          hint: |-
            Release time to be set for the VOIP microphone's silence detection algorithm in milliseconds.
        voice.SilenceDetectionThreshold:
          hint: |-
            Threshold to be set for the VOIP microphone's silence detection algorithm.
        vr.AllowMotionBlurInVR:
          hint: |-
            For projects with motion blur enabled, this allows motion blur to be enabled even while in VR.
        vr.Debug.bEnableDevOverrides:
          hint: |-
            Enables or disables console commands that modify various developer-only settings.
        vr.EnableMotionControllerLateUpdate:
          hint: |-
            This command allows you to specify whether the motion controller late update is applied.
             0: don't use late update
             1: use late update (default)
        vr.HiddenAreaMask:
          hint: |-
            Enable or disable hidden area mask
            0: disabled
            1: enabled
        vr.InstancedStereo:
          hint: |-
            0 to disable instanced stereo (default), 1 to enable.
        vr.MobileMultiView:
          hint: |-
            0 to disable mobile multi-view, 1 to enable.
        vr.ODSCapture:
          hint: |-
            Experimental0 to disable Omni-directional stereo capture (default), 1 to enable.
        vr.PixelDensity:
          hint: |-
            Pixel density sets the VR render target texture size as a factor of recommended texture size.
            The recommended texture size is the size that will result in no under sampling in most distorted area of the view when computing the final image to be displayed on the device by the runtime compositor.
            Note that the recommended texture size will likely be larger than the display panel resolution of the device as the texture is used as input data for the final composition/lens distortion pass provided by the device's runtime.
            A pixel density of 1.0 (default) will use the device's recommended texture size.
        vr.RoundRobinOcclusion:
          hint: |-
            0 to disable round-robin occlusion queries for stereo rendering (default), 1 to enable.
        vr.StereoLayers.bMixLayerPriorities:
          hint: |-
            By default, Face-Locked Stereo Layers are always rendered on top of any other layer position types.
            Set this to a non-zero value to disable this behavior (not supported on all platforms.)
        vr.VRS.HMDFixedFoveationDynamic:
          hint: |-
            Whether fixed-foveation level should adjust based on GPU utilization
             0: Disabled (default);
             1: Enabled
        vr.VRS.HMDFixedFoveationLevel:
          hint: |-
            Level of fixed-foveation VRS to apply (when Variable Rate Shading is available)
             0: Disabled (default);
             1: Low;
             2: Medium;
             3: High;
             4: High Top;
        VREd.AllowPlay:
          hint: |-
            Allow to start play.
        VREd.AllowResetScale:
          hint: |-
            Allowed to reset world to meters to default world to meters
        VREd.AssetEditorUIResolutionX:
          hint: |-
            Horizontal resolution to use for VR editor asset editor UI render targets
        VREd.AssetEditorUIResolutionY:
          hint: |-
            Vertical resolution to use for VR editor asset editor UI render targets
        VREd.CameraPreviewUISize:
          hint: |-
            How big camera preview UIs should be
        VREd.CentralWidgetX:
          hint: |-
            Horizontal resolution to use for VR editor radial UI render targets
        VREd.CentralWidgetY:
          hint: |-
            Vertical resolution to use for VR editor radial UI render targets
        VREd.DefaultCameraUIResolutionX:
          hint: |-
            Horizontal resolution to use for VR editor UI render targets
        VREd.DefaultCameraUIResolutionY:
          hint: |-
            Vertical resolution to use for VR editor UI render targets
        VREd.DefaultEditorUIResolutionX:
          hint: |-
            Horizontal resolution to use for VR editor UI render targets
        VREd.DefaultEditorUIResolutionY:
          hint: |-
            Vertical resolution to use for VR editor UI render targets
        VREd.DefaultRadialElementResolutionX:
          hint: |-
            Horizontal resolution to use for VR editor radial UI render targets
        VREd.DefaultRadialElementResolutionY:
          hint: |-
            Vertical resolution to use for VR editor radial UI render targets
        VREd.DefaultVRNearClipPlane:
          hint: |-
            The near clip plane to use for VR
        VREd.DefaultWorldToMeters:
          hint: |-
            Default world to meters scale
        VREd.DockUIDragSmoothingAmount:
          hint: |-
            How much to smooth out motion when dragging UI (frame rate sensitive)
        VREd.DockUIFadeAnimationDuration:
          hint: |-
            How quick the fade animation should complete in
        VREd.DockUIHoverAnimationDuration:
          hint: |-
            How quick the hover animation should complete in
        VREd.DockUIHoverScale:
          hint: |-
            How big the selection bar gets when you hover over it
        VREd.DockUISelectionBarVerticalOffset:
          hint: |-
            Z Distance between the selectionbar and the UI
        VREd.DockUISmoothingAmount:
          hint: |-
            How much to smooth out UI transforms (frame rate sensitive)
        VREd.DockWindowTickness:
          hint: |-
            How thick the window is
        VREd.DragHapticFeedbackStrength:
          hint: |-
            Default strength for haptic feedback when starting to drag objects
        VREd.EditorUIScale:
          hint: |-
            How much to scale up (or down) editor UIs for VR
        VREd.EditorUISize:
          hint: |-
            How big editor UIs should be
        VREd.FoliageOpacity:
          hint: |-
            The foliage brush opacity.
        VREd.GridFadeMultiplier:
          hint: |-
            Grid fade in/out speed, in 'fades per second'
        VREd.GridFadeStartVelocity:
          hint: |-
            Grid fade duration
        VREd.GridHeightOffset:
          hint: |-
            Height offset for the world movement grid.  Useful when tracking space is not properly calibrated
        VREd.GridMaxFade:
          hint: |-
            Grid maximum opacity
        VREd.GridMovementTolerance:
          hint: |-
            Tolerance for movement when the grid must disappear
        VREd.GridScaleMultiplier:
          hint: |-
            Scale of the grid
        VREd.HeadLocationMaxVelocity:
          hint: |-
            For head velocity indicator, the maximum location velocity in cm/s
        VREd.HeadLocationVelocityOffset:
          hint: |-
            Offset relative to head for location velocity debug indicator
        VREd.HeadRotationMaxVelocity:
          hint: |-
            For head velocity indicator, the maximum rotation velocity in degrees/s
        VREd.HeadRotationVelocityOffset:
          hint: |-
            Offset relative to head for rotation velocity debug indicator
        VREd.HeadVelocityMaxLineThickness:
          hint: |-
            How thick the head velocity ring lines should be
        VREd.HeadVelocityMaxRadius:
          hint: |-
            How big the outer circle of the head velocity ring should be
        VREd.HeadVelocityMinLineThickness:
          hint: |-
            How thick the head velocity ring lines should be
        VREd.HeadVelocityMinRadius:
          hint: |-
            How big the inner circle of the head velocity ring should be
        VREd.HeadVelocitySmoothing:
          hint: |-
            How much to smooth out head velocity data
        VREd.HelpLabelFadeDistance:
          hint: |-
            Distance at which controller help labels should appear (in cm)
        VREd.HelpLabelFadeDuration:
          hint: |-
            Duration to fade controller help labels in and out
        VREd.HoverBallRadiusScaleWhenOverUI:
          hint: |-
            How much to scale down the size of the hover ball when over UI
        VREd.HoverHapticFeedbackStrength:
          hint: |-
            Default strength for haptic feedback when hovering
        VREd.HoverHapticFeedbackTime:
          hint: |-
            The minimum time between haptic feedback for hovering
        VREd.InvertTrackpadVertical:
          hint: |-
            Toggles inverting the touch pad vertical axis
        VREd.LaserPointerHoverBallRadius:
          hint: |-
            Radius of the visual cue for a hovered object along the laser pointer ray
        VREd.LaserPointerLightPullBackDistance:
          hint: |-
            How far to pull back our little hover light from the impact surface
        VREd.LaserPointerRadius:
          hint: |-
            Radius of the laser pointer line
        VREd.LaserPointLightRadius:
          hint: |-
            How big our hover light is
        VREd.LaserRadiusScaleWhenOverUI:
          hint: |-
            How much to scale down the size of the laser pointer radius when over UI
        VREd.MaxDockWindowSize:
          hint: |-
            Maximum size for dockable windows
        VREd.MinDockWindowSize:
          hint: |-
            Minimum size for dockable windows
        VREd.MinJoystickOffsetBeforeFlick:
          hint: |-
            Dead zone for flick actions on the motion controller
        VREd.MinJoystickOffsetBeforeRadialMenu:
          hint: |-
            Toggles inverting the touch pad vertical axis
        VREd.MinTrackpadOffsetBeforeRadialMenu:
          hint: |-
            How far you have to hold the trackpad upward before you can placing objects instantly by pulling the trigger
        VREd.MinUIScrollDeltaForInertia:
          hint: |-
            Minimum amount of touch pad input before inertial UI scrolling kicks in
        VREd.MinVelocityForMotionControllerInertia:
          hint: |-
            Minimum velocity (in cm/frame in unscaled room space) before inertia will kick in when releasing objects (or the world)
        VREd.PivotPointTransformGizmo:
          hint: |-
            If the pivot point transform gizmo is used instead of the bounding box gizmo
        VREd.QuickMenuUIResolutionX:
          hint: |-
            Horizontal resolution to use for Quick Menu VR UI render targets
        VREd.QuickMenuUIResolutionY:
          hint: |-
            Vertical resolution to use for Quick Menu VR UI render targets
        VREd.RadialMenuFadeDelay:
          hint: |-
            The delay for the radial menu after selecting a button
        VREd.RadialUIBrightness:
          hint: |-
            How bright the UI should be
        VREd.RadialUIFadeSpeed:
          hint: |-
            How fast UI should fade in and out
        VREd.ScaleProgressBarLength:
          hint: |-
            Length of the progressbar that appears when scaling
        VREd.ScaleProgressBarRadius:
          hint: |-
            Radius of the progressbar that appears when scaling
        VREd.SequencerScrubMax:
          hint: |-
            Max fast forward or fast reverse magnitude
        VREd.SequencerUIResolutionX:
          hint: |-
            Horizontal resolution to use for Sequencer UI render targets
        VREd.SequencerUIResolutionY:
          hint: |-
            Vertical resolution to use for Sequencer UI render targets
        VREd.SFXMultiplier:
          hint: |-
            Default Sound Effect Volume Multiplier
        VREd.ShowControllerHelpLabels:
          hint: |-
            Enables help text overlay when controllers are near the viewer
        VREd.ShowHeadVelocity:
          hint: |-
            Whether to draw a debug indicator that shows how much the head is accelerating
        VREd.SlateDragDistanceOverride:
          hint: |-
            How many pixels you need to drag before a drag and drop operation starts in VR
        VREd.SteamVRTrackpadDeadzone:
          hint: |-
            The deadzone for the Vive motion controller trackpad
        VREd.TeleportAllowPushPull:
          hint: |-
            Allow being able to push and pull the teleporter along the laser.
        VREd.TeleportAllowScaleBackToDefault:
          hint: |-
            Scale back to default world to meters scale
        VREd.TeleportAnimateSpeed:
          hint: |-
            How fast the teleporter should fade in
        VREd.TeleportDistance:
          hint: |-
            Default distance for teleporting when not hitting anything
        VREd.TeleportDragSpeed:
          hint: |-
            How fast the teleporter should drag behind the laser aiming location
        VREd.TeleportEnableChangeScale:
          hint: |-
            Ability to change the world to meters scale while teleporting
        VREd.TeleportLaserPointerLength:
          hint: |-
            Distance of the LaserPointer for teleporting
        VREd.TeleportLerpTime:
          hint: |-
            The lerp time to teleport
        VREd.TeleportOffset:
          hint: |-
            The offset from the hitresult towards the controller
        VREd.TeleportOffsetMultiplier:
          hint: |-
            Teleport offset multiplier
        VREd.TeleportScaleSensitivity:
          hint: |-
            Teleport world to meters scale touchpad sensitivity
        VREd.TeleportSlideBuffer:
          hint: |-
            The minimum slide on trackpad to push/pull or change scale.
        VREd.TrackpadAbsoluteDragSpeed:
          hint: |-
            How fast objects move toward or away when you drag on the touchpad while carrying them
        VREd.TrackpadRelativeDragSpeed:
          hint: |-
            How fast objects move toward or away when you hold a direction on an analog stick while carrying them
        VREd.TrackpadStopImpactAtLaserBuffer:
          hint: |-
            Required amount to slide with input to stop transforming to end of laser
        VREd.UIAbsoluteScrollSpeed:
          hint: |-
            How fast the UI scrolls when dragging the touchpad
        VREd.UIAssetEditorSummonedOnHandHapticFeedbackStrength:
          hint: |-
            Strenth of haptic to play to remind a user which hand an asset editor was spawned on
        VREd.UIFadeSpeed:
          hint: |-
            How fast UI should fade in and out
        VREd.UIOnArmRotationOffset:
          hint: |-
            Rotation offset for UI that's docked to your arm, so it aligns with the controllers
        VREd.UIOnHandRotationOffset:
          hint: |-
            Rotation offset for UI that's docked to your hand, to make it more comfortable to hold
        VREd.UIPanelOpenDistance:
          hint: |-
            Distance to spawn a panel from the hand in centimeters
        VREd.UIPanelOpenRotationPitchOffset:
          hint: |-
            The pitch rotation offset in degrees when spawning a panel in front of the motioncontroller
        VREd.UIPressHapticFeedbackStrength:
          hint: |-
            Strenth of haptic when clicking on the UI
        VREd.UIRelativeScrollSpeed:
          hint: |-
            How fast the UI scrolls when holding an analog stick
        VREd.WorldMovementFogEndDistance:
          hint: |-
            How far away fog will finish rendering while in world movement mode
        VREd.WorldMovementFogOpacity:
          hint: |-
            How opaque the fog should be at the 'end distance' (0.0 - 1.0)
        VREd.WorldMovementFogSkyboxDistance:
          hint: |-
            Anything further than this distance will be completed fogged and not visible
        VREd.WorldMovementFogStartDistance:
          hint: |-
            How far away fog will start rendering while in world movement mode
        Widget.MaxAnimationLatentActions:
          hint: |-
            Defines the maximum number of latent actions that can be run in one frame.
        Widget.TemplatePreviewInEditor:
          hint: |-
            Should a dynamic template be generated at runtime for the editor for widgets?  Useful for debugging templates.
        Widget.UseParallelAnimation:
          hint: |-
            Use multi-threaded evaluation for widget animations.
        WidgetComponent.MaximumRenderTargetHeight:
          hint: |-
            Sets the maximum height of the render target used by a Widget Component.
        WidgetComponent.MaximumRenderTargetWidth:
          hint: |-
            Sets the maximum width of the render target used by a Widget Component.
        WidgetComponent.UseAutomaticTickModeByDefault:
          hint: |-
            Sets to true to Disable Tick by default on Widget Components when set to false, the tick will enabled by default.
        wp.Editor.EnableSpatialHashValidation:
          hint: |-
            Whether to enable World Partition editor spatial hash validation
        wp.Editor.LoadingRangeBugItGo:
          hint: |-
            Loading range for BugItGo command.
        wp.Runtime.BlockOnSlowStreaming:
          hint: |-
            Set if streaming needs to block when to slow to catchup.
        wp.Runtime.BlockOnSlowStreamingRatio:
          hint: |-
            Ratio of DistanceToCell / LoadingRange to use to determine if World Partition streaming needs to block
        wp.Runtime.BlockOnSlowStreamingWarningFactor:
          hint: |-
            Factor of wp.Runtime.BlockOnSlowStreamingRatio we want to start notifying the user
        wp.Runtime.EnableSimulationStreamingSource:
          hint: |-
            Set to 0 to if you want to disable the simulation/ejected camera streaming source.
        wp.Runtime.FilterRuntimeSpatialHashGridLevel:
          hint: |-
            Used to choose filter a single world partition runtime hash grid level.
        wp.Runtime.HLOD.WarmupDebugDraw:
          hint: |-
            Draw debug display for the warmup requests
        wp.Runtime.HLOD.WarmupEnabled:
          hint: |-
            Enable HLOD assets warmup. Will delay unloading of cells & transition to HLODs for wp.Runtime.HLOD.WarmupNumFrames frames.
        wp.Runtime.HLOD.WarmupNumFrames:
          hint: |-
            Delay unloading of a cell for this amount of frames to ensure HLOD assets are ready to be shown at the proper resolution. Set to 0 to force disable warmup.
        wp.Runtime.HLOD.WarmupVTScaleFactor:
          hint: |-
            Scale the VT size we ask to prefetch by this factor.
        wp.Runtime.HLOD.WarmupVTSizeClamp:
          hint: |-
            Clamp VT warmup requests for safety.
        wp.Runtime.LevelStreamingContinuouslyIncrementalGCWhileLevelsPendingPurgeForWP:
          hint: |-
            Force a GC update when there's more than the number of specified pending purge levels.
        wp.Runtime.MaxLoadingStreamingCells:
          hint: |-
            Used to limit the number of concurrent loading world partition streaming cells.
        wp.Runtime.RuntimeSpatialHashCellToSourceAngleContributionToCellImportance:
          hint: |-
            Value between 0 and 1 that modulates the contribution of the angle between streaming source-to-cell vector and source-forward vector to the cell importance. The closest to 0, the less the angle will contribute to the cell importance.
        wp.Runtime.RuntimeSpatialHashPlaceSmallActorsUsingLocation:
          hint: |-
            Set RuntimeSpatialHashPlaceSmallActorsUsingLocation to true to place actors smaller than a cell size into their corresponding cell using their location instead of their bounding box.
        wp.Runtime.RuntimeSpatialHashSnapNonAlignedGridLevelsToLowerLevels:
          hint: |-
            Set RuntimeSpatialHashSnapNonAlignedGridLevelsToLowerLevels to false to avoid snapping higher levels cells to child cells. Only used when GRuntimeSpatialHashUseAlignedGridLevels is false.
        wp.Runtime.RuntimeSpatialHashUseAlignedGridLevels:
          hint: |-
            Set RuntimeSpatialHashUseAlignedGridLevels to false to help break the pattern caused by world partition promotion of actors to upper grid levels that are always aligned on child levels.
        wp.Runtime.ShowRuntimeSpatialHashCellStreamingPriotity:
          hint: |-
            Enable to show a heatmap of the runtime spatial hash grid cells based on their priority.
        wp.Runtime.ShowRuntimeSpatialHashGridLevel:
          hint: |-
            Used to choose which grid level to display when showing world partition runtime hash.
        wp.Runtime.ShowRuntimeSpatialHashGridLevelCount:
          hint: |-
            Used to choose how many grid levels to display when showing world partition runtime hash.
        wp.Runtime.UpdateStreamingSources:
          hint: |-
            Set to 0 to stop updating (freeze) world partition streaming sources.
        XInput.ForceControllerStateUpdate:
          hint: |-
            Force XInput refresh of controller state on each frame.
            0: Not Enabled, 1: Enabled
        FX.AllowAsyncTick:
          hint: |-
            allow parallel ticking of particle systems.
        FX.AllowCulling:
          hint: |-
            Allow emitters to be culled.
        fx.AllowFastPathFunctionLibrary:
          hint: |-
            If > 0 Allow the graph to insert custom fastpath operations into the graph.
        FX.AllowGPUParticles:
          hint: |-
            If true, allow the usage of GPU particles.
        FX.AllowGPUSorting:
          hint: |-
            Allow particles to be sorted on the GPU.
        FX.BatchAsync:
          hint: |-
            If 1, particle async tasks are batched because they often take less time than it takes to wake up a task thread. No effect on editor.
        FX.BatchAsyncBatchSize:
          hint: |-
            When FX.BatchAsync = 1, controls the number of particle systems grouped together for threading.
        fx.Budget.AdjustedUsageDecayRate:
          hint: |-
            Rate at which the FX budget adjusted usage value is allowed to decay. This helps prevent FX flipping off/on if the usage oscilates over the cull threshold as the FX are culled/enabled.
        fx.Budget.AdjustedUsageMax:
          hint: |-
            Max value for FX Budget adjusted usage. Prevents one very long frame from keeping the usage above 1.0 for long periods under budget.
        fx.Budget.Debug.GameThreadConcurrentTimeOverride:
          hint: |-
            When >= 0.0 overrides the reported time for FX on the GameThreadConcurrent. Useful for observing/debugging the impact on other systems.
        fx.Budget.Debug.GameThreadTimeOverride:
          hint: |-
            When >= 0.0 overrides the reported time for FX on the GameThread. Useful for observing/debugging the impact on other systems.
        fx.Budget.Debug.RenderThreadTimeOverride:
          hint: |-
            When >= 0.0 overrides the reported time for FX on the RenderThread. Useful for observing/debugging the impact on other systems.
        fx.Budget.Enabled:
          hint: |-
            Controls whether we track global FX budgets.
        fx.Budget.EnabledInEditor:
          hint: |-
            Controls whether we track global FX budgets in editor builds.
        fx.Budget.GameThread:
          hint: |-
            Budget (in ms) for all combined FX work that runs only on the gamethread. As this budget is approached or exceeded, various FX systems will attempt to scale down more and mroe agressively to remain in budget.
        fx.Budget.GameThreadConcurrent:
          hint: |-
            Budget (in ms) for all combined FX work that runs on the gamethread or on a concurrent task spawned from the game thread. As this budget is approached or exceeded, various FX systems will attempt to scale down more and mroe agressively to remain in budget.
        fx.Budget.HistoryFrames:
          hint: |-
            Number of frames the global FX budget tracking will hold to work out it's average frame time.
        fx.Budget.RenderThread:
          hint: |-
            Budget (in ms) for all combined FX work that runs on the Render Thread.  As this budget is approached or exceeded, various FX systems will attempt to scale down more and mroe agressively to remain in budget.
        fx.DeferrPSCDeactivation:
          hint: |-
            If > 0, all deactivations on Particle System Components is deferred until next tick.
        fx.DetailedCSVStats:
          hint: |-
            If true, we write detailed partilce stats to the CSV profiler. 
        fx.DumpGraphKeyGen:
          hint: |-
            If > 0 the key generation will be dumped to the log. 
        fx.DumpParticleData:
          hint: |-
            If > 0 current frame particle data will be dumped after simulation. 
        fx.DumpParticleParameterStores:
          hint: |-
            If > 0 current frame particle parameter stores will be dumped when updated. 
        fx.DumpSystemData:
          hint: |-
            If > 0, results of system simulations will be dumped to the log. 
        fx.DumpVMIR:
          hint: |-
            If > 0 verbose logging is enabled for the vm compiler backend. 
        FX.EarlyScheduleAsync:
          hint: |-
            If 1, particle system components that can run async will be scheduled earlier in the frame
        fx.EnableCircularAnimTrailDump:
          hint: |-
            Controls logging for when circular links are discovered in anim trails.
            0 = No logging.
            1 = Minimal logging.
            2 = Verbose logging.
        fx.EnableEmitterMergeChangeIdLogging:
          hint: |-
            If > 0 verbose change id information will be logged to help with debuggin merge issues. 
        fx.EnableNiagaraCRHandler:
          hint: |-
            If > 0 Niagara will push some state into the crash reporter. This is not free so should not be used unless actively tracking a crash in the wild. Even then it should only be enabled on the platforms needed etc. 
        fx.EnableNiagaraMeshRendering:
          hint: |-
            If == 0, Niagara Mesh Renderers are disabled. 
        fx.EnableNiagaraRibbonRendering:
          hint: |-
            If == 0, Niagara Ribbon Renderers are disabled. 
        fx.EnableNiagaraRuntimeCycleCounts:
          hint: |-
            Toggle for runtime cylce counts tracking Niagara's frame time. 
        fx.EnableNiagaraSpriteRendering:
          hint: |-
            If == 0, Niagara Sprite Renderers are disabled. 
        fx.EnableVerboseNiagaraChangeIdLogging:
          hint: |-
            If > 0 Verbose change id logging info will be printed. 
        fx.ExecVMScripts:
          hint: |-
            If > 0 VM scripts will be executed, otherwise they won't, useful for looking at the bytecode for a crashing compiled script. 
        fx.ForceCompileOnLoad:
          hint: |-
            If > 0 emitters will be forced to compile on load. 
        fx.ForceFailIfPreviouslyNotSetOnMerge:
          hint: |-
            If > 0, when merging in from parent emitters swap linked variables in the stack to be "Fail If Previously Not Set" for their default type. 
        fx.ForceMergeOnLoad:
          hint: |-
            If > 0 emitters will be forced to merge on load. 
        fx.ForceNiagaraCacheDump:
          hint: |-
            If > 0 all cached graph traversal data will be dumped 
        fx.ForceNiagaraCompileToFail:
          hint: |-
            If > 0 emitters will go through the motions of a compile, but will never set valid bytecode. 
        fx.ForceNiagaraSpawnAttachedSolo:
          hint: |-
            If > 0 Niagara systems which are spawned attached will be force to spawn in solo mode for debugging.
        fx.ForceNiagaraTranslatorDump:
          hint: |-
            If > 0 all translation generated HLSL will be dumped 
        fx.ForceNiagaraTranslatorSingleThreaded:
          hint: |-
            If > 0 all translation will occur one at a time, useful for debugging. 
        fx.ForceNiagaraVMBinaryDump:
          hint: |-
            If > 0 all translation generated binary text will be dumped 
        fx.ForceSafeScriptAttributeTrim:
          hint: |-
            If > 0 attribute trimming will use a less aggressive algorithm for removing script attributes. 
        FX.FreezeGPUSimulation:
          hint: |-
            Freeze particles simulated on the GPU.
        FX.FreezeParticleSimulation:
          hint: |-
            Freeze particle simulation.
        fx.FXAllowParticleMeshLODs:
          hint: |-
            If we allow particle meshes to use LODs or not
        FX.GPUCollisionDepthBounds:
          hint: |-
            Limits the depth bounds when searching for a collision plane.
        fx.GPUSimulationTextureSizeX:
          hint: |-
            GPU Particle simulation texture X dimension (default=1024); set in project renderer settings, potentially overridden by device profile.
        fx.GPUSimulationTextureSizeY:
          hint: |-
            GPU Particle simulation texture Y dimension (default=1024); set in project renderer settings, potentially overridden by device profile.
        fx.GPUSort.BufferSlack:
          hint: |-
            Slack ratio when resizing GPU sort buffers. Must be bigger than 1 (default=2)
        fx.GPUSort.FrameCountBeforeShrinking:
          hint: |-
            Number of consecutive frames where the GPU sort buffer is considered oversized before allowing shrinking. (default=100)
        fx.GPUSort.MinBufferSize:
          hint: |-
            Minimum GPU sort buffer size, in particles (default=8192)
        fx.GPUSort.StressTest:
          hint: |-
            Force a stress test on the GPU sort by release persistent data every frame (default=0)
        FX.GPUSpawnWarningThreshold:
          hint: |-
            Warning threshold for spawning of GPU particles.
        fx.LastRenderTimeSafetyBias:
          hint: |-
            The time to bias the LastRenderTime value to allow for the delay from it being written by the RT.
        fx.LogCompileIdGeneration:
          hint: |-
            If > 0 all compile id generation will be logged. If 2 or greater, log detailed info. 
        fx.LogCompileStaticVars:
          hint: |-
            If > 0 all compile id generation dealing with static variables will be logged.  
        fx.LogNiagaraSystemChanges:
          hint: |-
            If > 0 Niagara Systems will be written to a text format when opened and closed in the editor. 
        FX.MaxCPUParticlesPerEmitter:
          hint: |-
            Maximum number of CPU particles allowed per-emitter.
        FX.MaxGPUParticlesSpawnedPerFrame:
          hint: |-
            Maximum number of GPU particles allowed to spawn per-frame per-emitter.
        fx.MaxNiagaraCPUParticlesPerEmitter:
          hint: |-
            The max number of supported CPU particles per emitter in Niagara. 
        fx.MaxNiagaraGPUParticlesSpawnPerFrame:
          hint: |-
            The max number of GPU particles we expect to spawn in a single frame.
        fx.MaxNiagaraNeighborGridCells:
          hint: |-
            The max number of supported grid cells in Niagara. Overflowing this threshold will cause the sim to warn and fail. 
        fx.MaxNiagaraRasterizationGridCells:
          hint: |-
            The max number of supported grid cells in Niagara. Overflowing this threshold will cause the sim to warn and fail. 
        FX.MaxParticleTilePreAllocation:
          hint: |-
            Maximum tile preallocation for GPU particles.
        fx.Niagara.AllowAsyncWorkToEndOfFrame:
          hint: |-
            Allow async work to continue until the end of the frame, if false it will complete within the tick group it's started in.
        fx.Niagara.AllowCullProxies:
          hint: |-
            Toggles whether Niagara will use Cull Proxy systems in place of systems culled by scalability.
        fx.Niagara.AllowDeferredReset:
          hint: |-
            If we are running async work when a reset is requested we will instead queue for the finalize to perform, this avoid stalling the GameThread.
        fx.Niagara.AllowEventSpawnCombine:
          hint: |-
            Allows events spawning to be combined, 0=Disabled, 1=Allowed Based On Emitter, 2=Force On.
        fx.Niagara.AllowPrimedPools:
          hint: |-
            Allow Niagara pools to be primed.
        fx.Niagara.AllowVisibilityCullingForDynamicBounds:
          hint: |-
            Allow async work to continue until the end of the frame, if false it will complete within the tick group it's started in.
        fx.Niagara.AsyncGpuTrace.GlobalSdfEnabled:
          hint: |-
            If disabled AsyncGpuTrace will not be supported against Global SDF.
        fx.Niagara.AsyncGpuTrace.HWRayTraceEnabled:
          hint: |-
            If disabled AsyncGpuTrace will not be supported against the HW ray tracing scene.
        fx.Niagara.AsyncTrace.CountsScratchPadBucketSize:
          hint: |-
            Scratch bucket size for the async gpu trace counts buffer. This buffer requires 4. 
        fx.Niagara.AsyncTrace.ScratchPadBucketSize:
          hint: |-
            Size (in elements) for async gpu traces scratch buffer buckets. 
        fx.Niagara.BaselineGenerationDelay:
          hint: |-
            Time we delay before match start for generating niagara perfoamnce baselines in a cooked game. 
        fx.Niagara.Batcher.AddDispatchGroupDrawEvent:
          hint: |-
            Add a draw event marker around each dispatch group.
        fx.Niagara.Batcher.DebugLogging:
          hint: |-
            Enables a lot of spew to the log to debug the batcher.
        fx.Niagara.Batcher.TickFlush.MaxQueuedFrames:
          hint: |-
            The number of unprocessed frames with queued ticks before we process them.
            The larger the number the more data we process in a single frame, this is generally only a concern when the application does not have focus.
        fx.Niagara.Batcher.TickFlush.Mode:
          hint: |-
            What to do when we go over our max queued frames.
            0 = Keep ticks queued, can result in a long pause when gaining focus again.
            1 = (Default) Process all queued ticks with dummy view / buffer data, may result in incorrect simulation due to missing depth collisions, etc.
            2 = Kill all pending ticks, may result in incorrect simulation due to missing frames of data, i.e. a particle reset.
        fx.Niagara.BoundsExpandByPercent:
          hint: |-
            The percentage we expand the bounds to avoid updating every frame.
        fx.Niagara.Collision.CPUEnabled:
          hint: |-
            Controls if CPU collisions are enabled or not.
        fx.Niagara.CompileDDCWaitTimeout:
          hint: |-
            During script compilation, how long do we wait for the ddc to answer in seconds before starting shader compilation?
        fx.Niagara.CompileWaitLoggingCap:
          hint: |-
            During automation, how many times do we log before failing compilation?
        fx.Niagara.CompileWaitLoggingThreshold:
          hint: |-
            During automation, how long do we wait for a compile result before logging.
        fx.Niagara.ComponentRenderComponentCountWarning:
          hint: |-
            The max number of allowed components before a ui warning is shown in the component renderer.
        fx.Niagara.ComponentRenderPoolInactiveTimeLimit:
          hint: |-
            The time in seconds an inactive component can linger in the pool before being destroyed.
        fx.Niagara.ComponentWarnAsleepCullReaction:
          hint: |-
            When enabled we will warn if a NiagaraComponent completes naturally but has Asleep mode set for cullreaction.
        fx.Niagara.ComponentWarnNullAsset:
          hint: |-
            When enabled we will warn if a NiagaraComponent is activate with a null asset.  This is sometimes useful for tracking down components that can be removed.
        fx.Niagara.CompressScriptByteCode:
          hint: |-
            Should we compress script bytecode to save memory. Will be uncompressed on demand.
        fx.Niagara.CSVSplitTime:
          hint: |-
            Length of Niagara's split time events passed to the CSV profiler. There are used to give check more confined stat averages.
        fx.Niagara.Debug.GlobalLoopTime:
          hint: |-
            If > 0 all Niagara FX will reset every N seconds. 
        fx.Niagara.DebugDraw.Enabled:
          hint: |-
            Enable or disable the Debug Draw Data Interface, note does not fully disable the overhead.
        fx.Niagara.DelayScriptAsyncOptimization:
          hint: |-
            Should we delay the async optimization until the emitter is activated?
        fx.Niagara.DeletePythonFilesOnError:
          hint: |-
            This determines whether we keep the intermediate python used by module versioning around when they were executed and resulted in an error.
        fx.Niagara.DumpNans:
          hint: |-
            If not 0 any NaNs will be dumped always.
        fx.Niagara.DumpNansOnce:
          hint: |-
            If not 0 any NaNs will be dumped for the first emitter that encounters NaNs.
        fx.Niagara.Emitter.MaxGPUBufferElements:
          hint: |-
            Maximum elements per GPU buffer, for example 4k elements would restrict a float buffer to be 16k maximum per buffer.
            Note: If you request something smaller than what will satisfy a single unit of work it will be increased to that size.
            Default 0 which will allow the buffer to be the maximum allowed by the RHI.
        fx.Niagara.FailIfNotSetSeverity:
          hint: |-
            The severity of messages emitted by Parameters with Default Mode "Fail If Not Set". 3 = Error, 2 = Warning, 1= Log, 0 = Disabled.
        fx.Niagara.FailStaticMeshDataInterface:
          hint: |-
            When enabled we will fail out using static mesh data interfaces.
        fx.Niagara.ForceAutoPooling:
          hint: |-
            Forces auto pooling to be enabled on spawned components.
        fx.Niagara.ForceLastTickGroup:
          hint: |-
            Force Niagara ticks to be in the last tick group, this mirrors old behavour and can be useful to test for async overlapping issues.
        fx.Niagara.ForceWaitForCompilationOnActivate:
          hint: |-
            When a component is activated it will stall waiting for any pending shader compilation.
        fx.Niagara.GeometryComponentRenderPoolInactiveTimeLimit:
          hint: |-
            The time in seconds an inactive component can linger in the pool before being destroyed.
        fx.Niagara.GpuComputeDebug.DrawDebugEnabled:
          hint: |-
            Should we draw any of the debug information or not.
        fx.Niagara.GpuComputeDebug.FourComponentMode:
          hint: |-
            Adjust how we visualize four component types
            0 = Visualize RGB (defaut)
            1 = Visualize A
        fx.Niagara.GpuComputeDebug.MaxLineInstances:
          hint: |-
            Maximum number of line draw we support in a single frame.
        fx.Niagara.GpuComputeDebug.MaxTextureHeight:
          hint: |-
            The maximum height we will visualize a texture at, this is to avoid things becoming too large on screen.
        fx.Niagara.GpuComputeDebug.MinTextureHeight:
          hint: |-
            The minimum height we will visualize a texture at, smaller textures will be scaled up to match this.
        fx.Niagara.GpuComputeDebug.ShowNaNInf:
          hint: |-
            When enabled will show NaNs as flashing colors.
        fx.Niagara.GpuProfiling.Enabled:
          hint: |-
            Master control to allow Niagara to use GPU profiling or not.
        fx.Niagara.Grid2D.OverrideFormat:
          hint: |-
            Optional override for all grids to use this format.
        fx.Niagara.Grid2D.ResolutionMultiplier:
          hint: |-
            Optional global modifier to grid resolution
        fx.Niagara.Grid3D.OverrideFormat:
          hint: |-
            Optional override for all grids to use this format.
        fx.Niagara.Grid3D.ResolutionMultiplier:
          hint: |-
            Optional global modifier to grid resolution
        fx.Niagara.IndirectArgsPool.AllowShrinking:
          hint: |-
            Allow the indirect args pool to shrink after a number of frames below a low water mark.
        fx.Niagara.IndirectArgsPool.BlockSizeFactor:
          hint: |-
            Multiplier on the indirect args pool size when needing to increase it from running out of space. (default=2.0)
        fx.Niagara.IndirectArgsPool.LowWaterAmount:
          hint: |-
            Percentage (0-1) of the indirect args pool that is considered low and worthy of shrinking
        fx.Niagara.IndirectArgsPool.LowWaterFrames:
          hint: |-
            The number of frames to wait to shrink the indirect args pool for being below the low water mark. (default=150)
        fx.Niagara.IndirectArgsPool.MinSize:
          hint: |-
            Minimum number of draw indirect args allocated into the pool. (default=256)
        fx.Niagara.LogVerboseWarnings:
          hint: |-
            Enable to output more verbose warnings to the log file, these are considered dismissable warnings but may provide information when debugging.
            Default is enabled in editor builds and disabled in non editor builds.
        fx.Niagara.LUT.OptimizeThreshold:
          hint: |-
            Error Threshold used when optimizing Curve LUTs, setting to 0.0 or below will result in no optimization
        fx.Niagara.LUT.VerifyPostLoad:
          hint: |-
            Enable to verify LUTs match in PostLoad vs the Loaded Data
        fx.Niagara.MaxCompilePollTimePerFrame:
          hint: |-
            When a lot of system compile tasks queue up, this is the max time per frame that is used to advance them.
        fx.Niagara.MaxStatRecordedFrames:
          hint: |-
            The number of frames recorded for the stat performance display of niagara cpu and gpu scripts. 
        fx.Niagara.NDIExport.GPUMaxReadbackCount:
          hint: |-
            Maximum buffer instance count for the GPU readback when in PerParticleMode, where <= 0 means ignore.
        fx.Niagara.NDISpline.GDisableLUTs:
          hint: |-
            Should we turn off all LUTs on CPU?
        fx.Niagara.NDIStaticMesh.UseInlineLODsOnly:
          hint: |-
            When enabled Niagara will never use streaming LOD levels, only inline LODs.
        fx.Niagara.PerfTestFrames:
          hint: |-
            How many frames to gather in each performance test. 
        fx.Niagara.PruneEmittersOnCook:
          hint: |-
            If > 0 this platform will prune disabled emitters during cook. 
        fx.Niagara.QualityLevel:
          hint: |-
            The quality level for Niagara Effects. 
        fx.Niagara.RenderTarget.AllowReads:
          hint: |-
            Enables read operations to be visible in the UI, very experimental.
        fx.Niagara.RenderTarget.IgnoreCookedOut:
          hint: |-
            Ignores create render targets for cooked out emitter, i.e. ones that are not used by any GPU emitter.
        fx.Niagara.RenderTarget.ReleaseResourceOnRemove:
          hint: |-
            Releases the render target resource once it is removed from the manager list rather than waiting for a GC.
        fx.Niagara.RenderTarget.ResolutionMultiplier:
          hint: |-
            Optional global modifier to Niagara render target resolution.
        fx.Niagara.Scalability.CanPreventCullingOnPlayerFX:
          hint: |-
            When enabled Niagara can optionally prevent scalability culling on FX linked to the player.
        fx.Niagara.Scalability.DistanceCulling:
          hint: |-
            When non-zero, high level scalability culling based on distance is enabled.
        fx.Niagara.Scalability.GlobalBudgetCulling:
          hint: |-
            When non-zero, high level scalability culling based on global time budget is enabled.
        fx.Niagara.Scalability.InstanceCountCulling:
          hint: |-
            When non-zero, high level scalability culling based on instance count is enabled.
        fx.Niagara.Scalability.MinMaxDistance:
          hint: |-
            Minimum value for Niagara's Max distance value. Primariy to prevent divide by zero issues and ensure a sensible distance value for sorted significance culling.
        fx.Niagara.Scalability.VisibilityCulling:
          hint: |-
            When non-zero, high level scalability culling based on visibility is enabled.
        fx.Niagara.ShowAllocationWarnings:
          hint: |-
            If not 0 then frequent reallocations and over-allocations of particle memory will cause warnings in the log.
        fx.Niagara.Solo.AllowAsyncWorkToEndOfFrame:
          hint: |-
            Allow async work to continue until the end of the frame for solo Niagara instances, if false it will complete within the tick group it started in.
        fx.Niagara.Solo.TickEarly:
          hint: |-
            When enabled will tick kin the first available tick group.
        fx.Niagara.SystemSimulation.AllowASync:
          hint: |-
            If > 0, system post tick is parallelized. 
        fx.Niagara.SystemSimulation.BatchGPUTickSubmit:
          hint: |-
            The if non zero we allow GPU Ticks to be submitted to the Render Thread in batches.
        fx.Niagara.SystemSimulation.ConcurrentGPUTickInit:
          hint: |-
            The if non zero we allow GPU Ticks to be initialized in the System's concurrent tick rather than on the game thread.
        fx.Niagara.SystemSimulation.MaxTickSubsteps:
          hint: |-
            The max number of possible substeps per frame when a system uses a fixed tick delta.
        fx.Niagara.SystemSimulation.SkipTickDeltaSeconds:
          hint: |-
            When none zero we skip all ticks with a delta seconds less than equal to this number.
        fx.Niagara.SystemSimulation.TaskStallTimeout:
          hint: |-
            Timeout in microseconds for Niagara simulation tasks to be considered stalled.
            When this is > 0 we busy wait as opposed to joining the TG so avoid using execpt for debugging.
        fx.Niagara.SystemSimulation.TickBatchSize:
          hint: |-
            The number of system instances to process per async task. 
        fx.Niagara.SystemSimulation.TickTaskShouldWait:
          hint: |-
            When enabled the tick task will wait for concurrent work to complete, when disabled the task is complete once the GT tick is complete.
        fx.Niagara.SystemSimulation.UpdateOnSpawn:
          hint: |-
            If > 0, system simulations are given a small update after spawn. 
        fx.Niagara.TaskPriorities.Background:
          hint: |-
            Task Priority When Set to Background
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: fx.Niagara.TaskPriorities.Background bnh
        fx.Niagara.TaskPriorities.High:
          hint: |-
            Task Priority When Set to High
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: fx.Niagara.TaskPriorities.High bnh
        fx.Niagara.TaskPriorities.Low:
          hint: |-
            Task Priority When Set to Low
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: fx.Niagara.TaskPriorities.Low bnh
        fx.Niagara.TaskPriorities.Normal:
          hint: |-
            Task Priority When Set to Normal
            Arguments are three characters: [ThreadPriority][TaskPriority][TaskPriorityIfForcedToNormalThreadPriority] where ThreadPriority is 'h' or 'n' or 'b' (high/normal/background) and TaskPriority is 'h' or 'n' (high/normal). Example: fx.Niagara.TaskPriorities.Normal bnh
        fx.Niagara.TaskPriority.AllowHighPriPerfTests:
          hint: |-
            Allow Niagara to pump up to high task priority when running performance tests. Reduces the context switching of Niagara tasks but can increase overall frame time when Niagara blocks GT work like Physics.
        fx.Niagara.TaskPriority.SystemInstanceTask:
          hint: |-
            Task priority to use for Niagara System Instance Task
        fx.Niagara.TaskPriority.SystemSimulationSpawnPendingTask:
          hint: |-
            Task priority to use for Niagara System Simulation Spawning Pending Task
        fx.Niagara.TaskPriority.SystemSimulationTask:
          hint: |-
            Task priority to use for Niagara System Simulation Task
        fx.Niagara.TaskPriority.SystemSimulationWaitAll:
          hint: |-
            Task priority to use for Niagara System Simulation Wait All Task
        fx.Niagara.UseEmitterSuppressList:
          hint: |-
            When an emitter is activated we will check the surpession list.
        fx.Niagara.UseFastSetUserParametersToDefaultValues:
          hint: |-
            When a component is activated we will check the surpession list.
        fx.Niagara.UseGlobalFXBudget:
          hint: |-
            If true, Niagara will track performace data into the global FX budget and feed the global budget values into scalability. 
        fx.Niagara.UseGpuDataInterfaceDenyList:
          hint: |-
            When enabled GPU emitters will be disabled if they use a data interface on the deny list.
        fx.Niagara.UseGpuEmitterAllowList:
          hint: |-
            When enabled only GPU emitters on the allow list are allowed to run.
        fx.Niagara.UseLegacySystemSimContexts:
          hint: |-
            If > 0, Niagara will use legacy system simulation contexts which would force the whole simulation solo if there were per instance DI calls in the system scripts. 
        fx.Niagara.UseSupressActivateList:
          hint: |-
            When a component is activated we will check the surpession list.
        fx.Niagara.WaitOnPreGC:
          hint: |-
            Toggles whether Niagara will wait for all async tasks to complete before any GC calls.
        fx.Niagara.WarnComponentRenderCount:
          hint: |-
            The max number of components that a single system can spawn before a log warning is shown.
        fx.Niagara.WorldManager.SpawnPerTickGroup:
          hint: |-
            Will attempt to spawn new systems earlier (default enabled).
        fx.NiagaraAllowComputeShaders:
          hint: |-
            If true, allow the usage compute shaders within Niagara.
        fx.NiagaraAllowGPUParticles:
          hint: |-
            If true, allow the usage of GPU particles for Niagara.
        fx.NiagaraAllowRuntimeScalabilityChanges:
          hint: |-
            If > 0 this platform allows niagara scalability level changes at runtime. 
        fx.NiagaraArraySupportRW:
          hint: |-
            Allows the GPU to RW to the array, this comes with the caveat that all arrays will use a UAV slot.
        fx.NiagaraBatcher.FreeBufferEarly:
          hint: |-
            Will take the path to release GPU buffers when possible.
            This will reduce memory pressure but can result in more allocations if you buffers ping pong from zero particles to many.
        FX.NiagaraComponentPool.CleanTime:
          hint: |-
            How often should the pool be cleaned (in seconds).
        FX.NiagaraComponentPool.Enable:
          hint: |-
            How many Particle System Components to preallocate when creating new ones for the pool.
        FX.NiagaraComponentPool.KeepComponentsRegistered:
          hint: |-
            If non-zero, components returend to the pool are kept registered with the world but set invisible. This will reduce the cost of pushing/popping components int.
        FX.NiagaraComponentPool.KillUnusedTime:
          hint: |-
            How long a pooled particle component needs to be unused for before it is destroyed.
        FX.NiagaraComponentPool.Validation:
          hint: |-
            Enables pooling validation.
        fx.NiagaraDataBufferMinSize:
          hint: |-
            Niagara data buffer minimum allocation size in bytes (Default=512).
        fx.NiagaraDataBufferShrinkFactor:
          hint: |-
            Niagara data buffer size threshold for shrinking. (Default=3) 
            The buffer will be reallocated when the used size becomes 1/F of the allocated size.
        fx.NiagaraEnablePrecompilerNamespaceDatasetCulling:
          hint: |-
            Force the namespace fixup precompiler process to cull unused Dataset parameters. Only enabled if fx.NiagaraEnablePrecompilerNamespaceFixup is also enabled. 
        fx.NiagaraEnablePrecompilerNamespaceFixup:
          hint: |-
            Enable a precompiler stage to discover parameter name matches and convert matched parameter hlsl name tokens to appropriate namespaces. 
        fx.NiagaraGlobalSystemCountScale:
          hint: |-
            A global scale on system count thresholds for culling in Niagara. 
        fx.NiagaraGPUDataBufferChunkSize:
          hint: |-
            Niagara GPU data buffer allocation chunk size used to round GPU allocations in bytes, must be power of 2 (Default=4096)
        fx.NiagaraGPUDataBufferShrinkFactor:
          hint: |-
            Niagara GPU data buffer size threshold for shrinking. (Default=2) 
            The buffer will be reallocated when the used size becomes 1/F of the allocated size. 
        fx.NiagaraGPUDataWarningSize:
          hint: |-
            Allocation size where we should log a warning.
        fx.NiagaraGpuLowLatencyTranslucencyEnabled:
          hint: |-
            When enabled translucent materials can use the current frames simulation data no matter which tick pass Niagara uses.
            This can result in an additional data buffer being required but will reduce any latency when using view uniform buffer / depth buffer / distance fields / etc
        fx.NiagaraGpuSubmitCommandHint:
          hint: |-
            If greater than zero, we use this value to submit commands after the number of dispatches have been issued.
        fx.NiagaraLogDDCStatusForSystems:
          hint: |-
            When enabled UNiagaraSystems will log out when their subscripts are pulled from the DDC or not.
        fx.NiagaraLogNamespaceFixup:
          hint: |-
            Log matched variables and pin name changes in precompile. 
        fx.NiagaraMaxStatInstanceReports:
          hint: |-
            The max number of different instances from which stat reports are aggregated.
        fx.NiagaraPerfReporting:
          hint: |-
            0 = Disabled 
            1 = Text Perf Report on world Transitions. 
            2 = Text Report for every test with poor or bad perf.
            3 = As 2 but screenshots are also generated for each bad test.
        fx.NiagaraRegenBaselinesOnWorldChange:
          hint: |-
            If > 0 performance baselines for Niagara will be regenerated on every level change. 
        fx.NiagaraRuntimeCycleHistorySize:
          hint: |-
            How many frames history to use in Niagara's runtime performance trackers. 
        fx.NiagaraScalabilityUpdateTime_High:
          hint: |-
            Time in seconds between updates to scalability states for Niagara systems set to update at High frequency. 
        fx.NiagaraScalabilityUpdateTime_Low:
          hint: |-
            Time in seconds between updates to scalability states for Niagara systems set to update at Low frequency. 
        fx.NiagaraScalabilityUpdateTime_Medium:
          hint: |-
            Time in seconds between updates to scalability states for Niagara systems set to update at Medium frequency. 
        fx.NiagaraScriptStatTracking:
          hint: |-
            If > 0 stats tracking operations will be compiled into Niagara Scripts. 
        fx.NiagaraVectorFieldUseIspc:
          hint: |-
            When enabled VectorField will use ISPC for sampling if appropriate.
        fx.NumFramesBetweenRuntimePerfSamples:
          hint: |-
            How many frames between each sample of Niagara runtime perf. 
        fx.ParticleCollisionIgnoreInvisibleTime:
          hint: |-
            The time a particle system component has to be invisible for to have all collision ignored. 
        fx.ParticleManagerAsyncBatchSize:
          hint: |-
            How many PSCs the ParticleWorldManager should tick per async task.
        fx.ParticlePerfStats.Enabled:
          hint: |-
            Used to control if stat gathering is enabled or not.
        FX.ParticleSlackGPU:
          hint: |-
            Amount of slack to allocate for GPU particles to prevent tile churn as percentage of total particles.
        FX.ParticleSystemPool.CleanTime:
          hint: |-
            How often should the pool be cleaned (in seconds).
        FX.ParticleSystemPool.Enable:
          hint: |-
            How many Particle System Components to preallocate when creating new ones for the pool.
        FX.ParticleSystemPool.KillUnusedTime:
          hint: |-
            How long a pooled particle component needs to be unused for before it is destroyed.
        fx.PerfBaselineThreshold_Bad:
          hint: |-
            Ratio to the baseline perf that we consider a system to have bad perf and warn strongly about it. 
        fx.PerfBaselineThreshold_Poor:
          hint: |-
            Ratio to the baseline perf that we consider a system to have poor perf and warn about it. 
        fx.PruneEmittersOnCookByDetailMode:
          hint: |-
            Whether to eliminate all emitters that don't match the detail mode.
            This will only work if scalability settings affecting detail mode can not be changed at runtime (depends on platform).
        fx.PSCMan.Enable:
          hint: |-
            If PSC world manager is enabled.
        fx.QualityLevelSpawnRateScaleReferenceLevel:
          hint: |-
            Controls the reference level for quality level based spawn rate scaling. This is the FX quality level
            at which spawn rate is not scaled down; Spawn rate scaling will happen by each emitter's
            QualityLevelSpawnRateScale value for each reduction in level below the reference level.
            Default = 2. Value should range from 0 to the maximum FX quality level.
        fx.ScalabilityManParallelThreshold:
          hint: |-
            Number of instances required for a niagara significance manger to go parallel for it's update. 
        fx.ScalabilityMaxUpdatesPerFrame:
          hint: |-
            Number of instances that can be processed per frame when updating scalability state. -1 for all of them. 
        fx.ShowNiagaraDeveloperWindows:
          hint: |-
            If > 0 the niagara system, emitter, and script editors will show additional developer windows.
            These windows are for niagara tool development and debugging and editing the data
             directly in these windows can cause instability.
        fx.SkipVectorVMBackendOptimizations:
          hint: |-
            If 1, skip HLSLCC's backend optimization passes during VectorVM compilation. 
        fx.SuppressNiagaraSystems:
          hint: |-
            If > 0 Niagara particle systems will not be activated. 
        FX.TestGPUSort:
          hint: |-
            Test GPU sort. 1: Small, 2: Large, 3: Exhaustive, 4: Random
        FX.Trail.MaxDistanceTessellation:
          hint: |-
            Maximum tessellation steps allowed for distance based tessellation.
        FX.Trail.MaxTangentTessellation:
          hint: |-
            Maximum tessellation steps allowed for tangent based tessellation.
        fx.TriggerDebugCrash:
          hint: |-
            If > 0 we deliberately crash to test Crash Reporter integration.
        fx.UseNewGraphHash:
          hint: |-
            If > 0 a hash of the graph node state will be used, otherwise will use the older code path. 
        FX.VisualizeGPUSimulation:
          hint: |-
            Visualize the current state of GPU simulation.
            0 = off
            1 = visualize particle state
            2 = visualize curve texture
        fx.WaitForAsyncStallWarnThresholdMS:
          hint: |-
            If we stall in WaitForAsync for longer than this threshold then we emit a stall warning message.
        sg.AntiAliasingQuality:
          hint: |-
            Scalability quality state (internally used by scalability system, ini load/save or using SCALABILITY console command)
             0:low, 1:med, 2:high, 3:epic, 4:cinematic, default: 3
        sg.AntiAliasingQuality.NumLevels:
          hint: |-
            Number of settings quality levels in sg.AntiAliasingQuality
             default: 5 (0..4)
        sg.EffectsQuality:
          hint: |-
            Scalability quality state (internally used by scalability system, ini load/save or using SCALABILITY console command)
             0:low, 1:med, 2:high, 3:epic, 4:cinematic, default: 3
        sg.EffectsQuality.NumLevels:
          hint: |-
            Number of settings quality levels in sg.EffectsQuality
             default: 5 (0..4)
        sg.FoliageQuality:
          hint: |-
            Scalability quality state (internally used by scalability system, ini load/save or using SCALABILITY console command)
             0:low, 1:med, 2:high, 3:epic, 4:cinematic, default: 3
        sg.FoliageQuality.NumLevels:
          hint: |-
            Number of settings quality levels in sg.FoliageQuality
             default: 5 (0..4)
        sg.GlobalIlluminationQuality:
          hint: |-
            Scalability quality state (internally used by scalability system, ini load/save or using SCALABILITY console command)
             0:low, 1:med, 2:high, 3:epic, 4:cinematic, default: 3
        sg.GlobalIlluminationQuality.NumLevels:
          hint: |-
            Number of settings quality levels in sg.GlobalIlluminationQuality
             default: 5 (0..4)
        sg.PostProcessQuality:
          hint: |-
            Scalability quality state (internally used by scalability system, ini load/save or using SCALABILITY console command)
             0:low, 1:med, 2:high, 3:epic, 4:cinematic, default: 3
        sg.PostProcessQuality.NumLevels:
          hint: |-
            Number of settings quality levels in sg.PostProcessQuality
             default: 5 (0..4)
        sg.ReflectionQuality:
          hint: |-
            Scalability quality state (internally used by scalability system, ini load/save or using SCALABILITY console command)
             0:low, 1:med, 2:high, 3:epic, 4:cinematic, default: 3
        sg.ReflectionQuality.NumLevels:
          hint: |-
            Number of settings quality levels in sg.ReflectionQuality
             default: 5 (0..4)
        sg.ResolutionQuality:
          hint: |-
            Scalability quality state (internally used by scalability system, ini load/save or using SCALABILITY console command)
             10..100, default: 100
        sg.ShadingQuality:
          hint: |-
            Scalability quality state (internally used by scalability system, ini load/save or using SCALABILITY console command)
             0:low, 1:med, 2:high, 3:epic, 4:cinematic, default: 3
        sg.ShadingQuality.NumLevels:
          hint: |-
            Number of settings quality levels in sg.ShadingQuality
             default: 5 (0..4)
        sg.ShadowQuality:
          hint: |-
            Scalability quality state (internally used by scalability system, ini load/save or using SCALABILITY console command)
             0:low, 1:med, 2:high, 3:epic, 4:cinematic, default: 3
        sg.ShadowQuality.NumLevels:
          hint: |-
            Number of settings quality levels in sg.ShadowQuality
             default: 5 (0..4)
        sg.TextureQuality:
          hint: |-
            Scalability quality state (internally used by scalability system, ini load/save or using SCALABILITY console command)
             0:low, 1:med, 2:high, 3:epic, 4:cinematic, default: 3
        sg.TextureQuality.NumLevels:
          hint: |-
            Number of settings quality levels in sg.TextureQuality
             default: 5 (0..4)
        sg.ViewDistanceQuality:
          hint: |-
            Scalability quality state (internally used by scalability system, ini load/save or using SCALABILITY console command)
             0:low, 1:med, 2:high, 3:epic, 4:cinematic, default: 3
        sg.ViewDistanceQuality.NumLevels:
          hint: |-
            Number of settings quality levels in sg.ViewDistanceQuality
             default: 5 (0..4)
        niagara.AllowAllNiagaraNodesInEmitterGraphs:
          hint: |-
            If true, all nodes will be allowed in the Niagara emitter graphs. 
        niagara.CreateShadersOnLoad:
          hint: |-
            Whether to create Niagara's simulation shaders on load, which can reduce hitching, but use more memory.  Otherwise they will be created as needed.
        Niagara.EmitterStatsFormat:
          hint: |-
            0 shows the particles count, ms, mb and state. 1 shows particles count.
        Niagara.GPUCountBufferSlack:
          hint: |-
            Multiplier of the GPU count buffer size to prevent frequent re-allocation.
        Niagara.GPUCountManager.AllocateIncrement:
          hint: |-
            If we run out of space for allocations this is how many allocate rather than a single entry. (default=64)
        Niagara.GPUCulling:
          hint: |-
            Whether to frustum and camera distance cull particles on the GPU
        Niagara.GPUCulling.CPUToGPUThreshold:
          hint: |-
            Particle count to move from a CPU sort to a GPU cull. -1 disables. (default=0)
        Niagara.GPUSorting.CPUToGPUThreshold:
          hint: |-
            Particle count to move from a CPU sort to a GPU sort. -1 disables. (default=-1)
        Niagara.GPUSorting.UseMaxPrecision:
          hint: |-
            Wether sorting using fp32 instead of fp16. (default=0)
        Niagara.MinCulledGPUInstanceCount:
          hint: |-
            Minimum number of culled (per-view) instance count entries allocated in the global buffer. (default=2048)
        Niagara.MinGPUInstanceCount:
          hint: |-
            Minimum number of instance count entries allocated in the global buffer. (default=2048)
        Niagara.RadixSortThreshold:
          hint: |-
            Instance count at which radix sort gets used instead of introspective sort.
            Set to  -1 to never use radixsort. (default=400)
        Niagara.Ribbon.MinSegmentLength:
          hint: |-
            Min length of niagara ribbon segments. (default=1)
        Niagara.Ribbon.Tessellation.Enabled:
          hint: |-
            Determine if we allow tesellation on this platform or not.
        Niagara.Ribbon.Tessellation.MaxErrorScreenPercentage:
          hint: |-
            Screen percentage used to compute the tessellation factor. 
            Smaller values will generate more tessellation, up to max tesselltion. (default=0.002)
        Niagara.Ribbon.Tessellation.MaxInterp:
          hint: |-
            When TessellationAngle is > 0, this is the maximum tesselation factor. 
            Higher values allow more evenly divided tesselation. 
            When TessellationAngle is 0, this is the actually tesselation factor (default=16).
        Niagara.Ribbon.Tessellation.MinAbsoluteError:
          hint: |-
            Minimum absolute world size error when tessellating. 
            Prevent over tessellating when distance gets really small. (default=0.5)
        Niagara.Ribbon.Tessellation.MinAngle:
          hint: |-
            Ribbon segment angle to tesselate in radian. (default=15 degrees)
        niagara.ShowShaderCompilerWarnings:
          hint: |-
            When set to 1, will display all warnings from Niagara shader compiles.
        Niagara.StaticSwitch.EnableAutoRefreshOldStaticSwitches:
          hint: |-
            Enables auto refresh for old static switch nodes on post load and updates to enum assets. Enable this and cook assets to check how many old nodes operate on outdated enums
        Niagara.WaveIntrinsics:
          hint: |-
        t.DisableCustomTickRateHandler:
          hint: |-
            Disable Tick Rate Handler
        t.DisableLatencyMarkerOptimize:
          hint: |-
            Disable Latency Marker Optimize
        t.DisableLatencyMarkers:
          hint: |-
            Disable Latency Markers
        t.DumpHitches.AllThreads:
          hint: |-
            Dump all Threads when doing stat dumphitches
             0: Only Game and Render Threads (default)
             1: All threads
        t.EnableReflexInEditor:
          hint: |-
            Enable Reflex in the editor
        t.FPSChart.DoCsvProfile:
          hint: |-
            Whether to record a CSV profile when recording FPSChart data
             default: 0
        t.FPSChart.ExcludeIdleTime:
          hint: |-
            Should we exclude idle time (i.e. one which we spent sleeping) when doing a FPS chart?
             default: 0
        t.FPSChart.InterestingFramerates:
          hint: |-
            Comma separated list of interesting frame rates
             default: 30,60,120
        t.FPSChart.MaxFrameDeltaSecsBeforeDiscarding:
          hint: |-
            The maximum length a frame can be (in seconds) to be considered for FPS chart binning (default 1.0s; no maximum length if <= 0.0)
        t.FPSChart.OpenFolderOnDump:
          hint: |-
            Should we explore to the folder that contains the .log / etc... when a dump is finished?  This can be disabled for automated testing
             default: 1
        t.FPSChart.RoundFPSBeforeBinning:
          hint: |-
            Should we round raw FPS values before thresholding them into bins when doing a FPS chart?
             default: 0
        t.HitchDeadTimeWindow:
          hint: |-
            Minimum time passed before we'll record a new hitch (in ms)
             default: 200.0 ms
        t.HitchFrameTimeThreshold:
          hint: |-
            Definition of a hitchy frame (in ms)
             default: 60.0 ms
        t.HitchVersusNonHitchRatio:
          hint: |-
            For the current frame to be considered a hitch, it must have run at least this many times slower than the previous frame.
            The actual ratio is clamped to be between this and t.HitchFrameTimeThreshold/t.TargetFrameTimeThreshold
             default: 1.5
        t.IdleWhenNotForeground:
          hint: |-
            Prevents the engine from taking any CPU or GPU time while not the foreground app.
        t.MaxFPS:
          hint: |-
            Caps FPS to the given value.  Set to <= 0 to be uncapped.
        t.OverrideFPS:
          hint: |-
            This allows to override the frame time measurement with a fixed fps number (game can run faster or slower).
            <=0:off, in frames per second, e.g. 60
        t.SlowFrameLoggingThreshold:
          hint: |-
            How slow must a frame be (in seconds) to be logged out (<= 0 to disable).
        t.TargetFrameTimeThreshold:
          hint: |-
            The target frame time (in ms); values below this will be drawn in green, values above will be yellow or red depending on the severity
             default: 33.9 ms
        t.TickComponentLatentActionsWithTheComponent:
          hint: |-
            Should we tick latent actions fired for a component at the same time as the component?
             0: Tick component latent actions later on in the frame (behavior prior to 4.16, provided for games relying on the old behavior but will be removed in the future)
             1: Tick component latent actions at the same time as the component (default)
        t.UnacceptableFrameTimeThreshold:
          hint: |-
            The frame time theshold for what is considered completely unacceptable (in ms); values above this will be drawn as red
             default: 50.0 ms
        t.UnsteadyFPS:
          hint: |-
            Causes FPS to bounce around randomly in the 8-32 range.
        Slate.AbsoluteIndices:
          hint: |-
            0: Each element first vertex index starts at 0 (default), 1: Use absolute indices, simplifies draw call setup on RHIs that do not support BaseVertex
        Slate.AccessibleWidgetsProcessedPerTick:
          hint: |-
            To reduce performance spikes, generating the accessible widget tree is limited to this many widgets per tick to update.
        Slate.AllowBackgroundBlurWidgets:
          hint: |-
            If 0, no background blur widgets will be rendered
        Slate.AllowPerUserHitTesting:
          hint: |-
            Toggles between widgets mapping to a user id and requring a matching user id from an input event or allowing all users to interact with widget
        Slate.AllowSlateToSleep:
          hint: |-
            Whether Slate should go to sleep when there are no active timers and the user is idle
        Slate.AlwaysInvalidate:
          hint: |-
            Forces invalidation panels to cache, but to always invalidate.
        Slate.BackgroundBlurDownsample:
          hint: |-
        Slate.BackgroundBlurMaxKernelSize:
          hint: |-
            The maximum allowed kernel size.  Note: Very large numbers can cause a huge decrease in performance
        Slate.bAllowNotifications:
          hint: |-
            If false, then notifications will not be displayed to the user.
        Slate.bAllowThrottling:
          hint: |-
            Allow Slate to throttle parts of the engine to ensure the UI is responsive
        Slate.CheckUObjectRenderResources:
          hint: |-
        Slate.Contrast:
          hint: |-
            The amount of contrast to apply to the UI (default 1).
        Slate.CullingSlackFillPercent:
          hint: |-
            Scales the culling rect by the amount to provide extra slack/wiggle room for widgets that have a true bounds larger than the root child widget in a container.
        Slate.DebugCulling:
          hint: |-
            Controls whether we should ignore clip rects, and just use culling.
        Slate.DefaultTextFlowDirection:
          hint: |-
            0: Auto (default), 1: LeftToRight, 2: RightToLeft.
        Slate.DefaultTextShapingMethod:
          hint: |-
            0: Auto (default), 1: KerningOnly, 2: FullShaping.
        Slate.DeferRetainedRenderingRenderThread:
          hint: |-
            Whether or not to defer retained rendering to happen at the same time as the rest of slate render thread work
        Slate.DeferWindowsMessageProcessing:
          hint: |-
            Whether windows message processing is deferred until tick or if they are processed immediately
        Slate.DemoMode.KeyEvent:
          hint: |-
            Visualize any pressed keys for demo-recording purposes.
        Slate.DemoMode.MouseEvent:
          hint: |-
            Visualize the cursor events for demo-recording purposes.
        Slate.DrawBatchNum:
          hint: |-
            .
        Slate.DrawToVRRenderTarget:
          hint: |-
            If enabled while in VR. Slate UI will be drawn into the render target texture where the VR imagery for either eye was rendered, allow the viewer of the HMD to see the UI (for better or worse.)  This render target will then be cropped/scaled into the back buffer, if mirroring is enabled.  When disabled, Slate UI will be drawn on top of the backbuffer (not to the HMD) after the mirror texture has been cropped/scaled into the backbuffer.
        Slate.EnableCursorQueries:
          hint: |-
        Slate.EnableDrawEvents:
          hint: |-
            .
        Slate.EnableFastWidgetPath:
          hint: |-
            Whether or not we enable fast widget pathing.  This mode relies on parent pointers to work correctly.
        Slate.EnableFontAntiAliasing:
          hint: |-
            Enable or disable anti-aliasing for font rendering (0 = off, 1 = on). Enabled by default.
        Slate.EnableGlobalInvalidation:
          hint: |-
        Slate.EnableInvalidationPanels:
          hint: |-
            Whether to attempt to cache any widgets through invalidation panels.
        Slate.EnableLayoutLocalization:
          hint: |-
            Controls if we enable or disable localized layout, which affects left to right or right to left detection for cultures.
        Slate.EnableLegacyFontHinting:
          hint: |-
            Enable the legacy font hinting? (0/1).
        Slate.EnableRawInputSimulationOverRDP:
          hint: |-
        Slate.EnableRetainedRendering:
          hint: |-
            Whether to attempt to render things in SRetainerWidgets to render targets first.
        Slate.EnableRetainedRenderingWithLocalTransform:
          hint: |-
            Whether to render with the local transform or the one passed down from the parent widget.
        Slate.EnableSlateWidgetTracker:
          hint: |-
            Whether or not we enable the tracking of widgets via the Slate Widget Tracker.
        Slate.EnableSyntheticCursorMoves:
          hint: |-
        Slate.EnableTooltips:
          hint: |-
            Whether to allow tooltips to spawn at all.
        Slate.EnsureAllVisibleWidgetsPaint:
          hint: |-
            Ensures that if a child widget is visible before OnPaint, that it was painted this frame after OnPaint, if still marked as visible.  Only works if we're on the FastPaintPath.
        Slate.EnsureOutgoingLayerId:
          hint: |-
            Ensures that child widget returns the correct layer id with OnPaint.
        Slate.Font.AsyncLazyLoad:
          hint: |-
            Causes unloaded font faces that are lazily loaded, to be loaded asynchronusly, until then the font won't measure correctly.  Once complete the UI will invalidate.
        Slate.ForceBackgroundBlurLowQualityOverride:
          hint: |-
            Whether or not to force a slate brush to be used instead of actually blurring the background
        Slate.ForceRawInputSimulation:
          hint: |-
        Slate.GameLayer.AllCanvasesVisible:
          hint: |-
            Show/Hide the viewport slot, player canvas, and debug canvas.
        Slate.GameLayer.DebugCanvasVisible:
          hint: |-
            Show/Hide the debug canvas.
        Slate.GameLayer.PlayerCanvasVisible:
          hint: |-
            Show/Hide the player canvas.
        Slate.GameLayer.ViewportSlotVisible:
          hint: |-
            Show/Hide the slot on viewport
        Slate.GlobalScrollAmount:
          hint: |-
            How much to scroll for each click of the mouse wheel (in Slate Screen Units).
        Slate.GrowFontAtlasFrameWindow:
          hint: |-
            The number of frames within the font atlas will resize rather than flush.
        Slate.GrowFontNonAtlasFrameWindow:
          hint: |-
            The number of frames within the large font glyph pool will resize rather than flush.
        Slate.GrowSVGAtlasFrameWindow:
          hint: |-
            The number of frames within the atlas will resize rather than flush.
        Slate.GrowSVGNonAtlasFrameWindow:
          hint: |-
            The number of frames within the large pool will resize rather than flush.
        Slate.HitTestGridDebugging:
          hint: |-
            Whether to show a visualization of everything in the hit teest grid
        Slate.InvalidationDebugging:
          hint: |-
            Deprecated - Use SlateDebugger.Invalidate.Enable
        Slate.InvalidationList.EnableReindexLayerId:
          hint: |-
            With invalidation system, when a painted widget returns a bigger LayerId that it used to, re-index the other widgets.
        Slate.InvalidationList.MaxArrayElements:
          hint: |-
            With the invalidation system, the preferred size of the elements array.
        Slate.InvalidationList.NumberElementLeftBeforeSplitting:
          hint: |-
            With the invalidation system, when splitting, only split the array when the number of element left is under X.
        Slate.InvalidationRoot.DumpPostInvalidationList:
          hint: |-
            Each frame, log the widgets that are processed in the post update phase.
        Slate.InvalidationRoot.DumpPreInvalidationList:
          hint: |-
            Each frame, log the widgets that are processed in the pre update phase.
        Slate.InvalidationRoot.DumpPrepassInvalidationList:
          hint: |-
            Each frame, log the widgets that are processed in the prepass update phase.
        Slate.InvalidationRoot.DumpUpdateList:
          hint: |-
            Each frame, log the widgets that will be updated.
        Slate.InvalidationRoot.DumpUpdateListOnce:
          hint: |-
            Log the widgets that will be updated this frame.
        Slate.InvalidationRoot.VerifyHittestGrid:
          hint: |-
            Every tick, verify the hittest grid.
        Slate.InvalidationRoot.VerifySlateAttribute:
          hint: |-
            Every tick, verify that the widgets that have registered attribute are correctly updated once and the list contains all the widgets.
        Slate.InvalidationRoot.VerifyValidWidgets:
          hint: |-
            Every tick, verify that every WidgetProxy has a valid SWidget.
        Slate.InvalidationRoot.VerifyWidgetHeapContains:
          hint: |-
            Verify that the widget is not already in the list before adding it.
        Slate.InvalidationRoot.VerifyWidgetList:
          hint: |-
            Every tick, verify that the updated list does match a newly created list.
        Slate.InvalidationRoot.VerifyWidgetsAreUpdatedOnce:
          hint: |-
            Verify that the widgets are painted only once per tick.
        Slate.InvalidationRoot.VerifyWidgetsIndex:
          hint: |-
            Every tick, verify that every widgets has the correct corresponding index.
        Slate.InvalidationRoot.VerifyWidgetUpdateList:
          hint: |-
            Every tick, verify that pre and post update list contains the correct information and they are sorted.
        Slate.InvalidationRoot.VerifyWidgetVisibility:
          hint: |-
            Every tick, verify that the cached visibility of the widgets is properly set.
        Slate.InvalidationRoot.VerifyWidgetVolatile:
          hint: |-
            Every tick, verify that volatile widgets are mark properly and are in the correct list.
        Slate.MaxFontAtlasPagesBeforeFlush:
          hint: |-
            The number of font atlas textures created and used before we flush the font cache if a texture atlas is full
        Slate.MaxFontNonAtlasTexturesBeforeFlush:
          hint: |-
            The number of large glyph font textures initially.
        Slate.MaxSVGAtlasPagesBeforeFlush:
          hint: |-
            The number of atlas textures created and used before we flush the cache if a texture atlas is full
        Slate.MaxSVGNonAtlasTexturesBeforeFlush:
          hint: |-
            The number of large textures initially.
        Slate.MemorylessDepthStencil:
          hint: |-
            Whether to use memoryless DepthStencil target for Slate. Reduces memory usage and implies that DepthStencil state can't be preserved between Slate renderpasses
        Slate.OutlineFontRenderMethod:
          hint: |-
            Changes the render method for outline fonts.  0 = freetype does everything and generates a bitmap for the base glyph (default).  1 = We override the freetype rasterizer.  Can help with some rendering anomalies on complicated fonts.
        Slate.OverrideScissorRect:
          hint: |-
            Whether to allow Slate to apply a scissor clip to UI elements to prevent certain artifacts.  You might need to disable this if you are drawing UI over a mirror backbuffer while in VR.
        Slate.PreventDuplicateMouseEventsForTouchForWindows7:
          hint: |-
            Hack to get around multiple mouse events being triggered for touch events on Windows 7 and lower.  Enabling this will prevent pen tablets from working on windows 7 since until we switch to the windows 8 sdk (and can use WM_POINTER* events) we cannot detect the difference
        Slate.RequireFocusForGamepadInput:
          hint: |-
            Whether gamepad input should be ignored by the engine if the application is not currently active
        Slate.ResourceManager.LockResourceDuringGC:
          hint: |-
            Lock the Slate RHI Resource Manager when GCing and when the loading screen has ownership to prevent multithreaded access to the resources.
        Slate.ShouldFollowCultureByDefault:
          hint: |-
            Should we initially follow the culture's flow direction at the window level.
        Slate.ShowBatching:
          hint: |-
            0: Don't show batching, 1: Show Batching
        Slate.ShowClipping:
          hint: |-
            Controls whether we should render a clipping zone outline.  Yellow = Axis Scissor Rect Clipping (cheap).  Red = Stencil Clipping (expensive).
        Slate.ShowOverdraw:
          hint: |-
            0: Don't show overdraw, 1: Show Overdraw
        Slate.ShowTextDebugging:
          hint: |-
            Show debugging painting for text rendering.
        Slate.ShowWireFrame:
          hint: |-
        Slate.SleepBufferPostInput:
          hint: |-
            The amount of time that must pass without any user action before Slate is put to sleep (provided that there are no active timers).
        Slate.TargetFrameRateForResponsiveness:
          hint: |-
            Minimum sustained average frame rate required before we consider the editor to be "responsive" for a smooth UI experience
        Slate.ThrottleWhenMouseIsMoving:
          hint: |-
            Whether to attempt to increase UI responsiveness based on mouse cursor movement.
        Slate.TooltipIntroDuration:
          hint: |-
            How long it takes for a tooltip to animate into view, in seconds.
        Slate.TooltipSummonDelay:
          hint: |-
            Delay in seconds before a tooltip is displayed near the mouse cursor when hovering over widgets that supply tooltip data.
        Slate.ToolTipWrapWidth:
          hint: |-
            Width of Slate tool-tips before we wrap the tool-tip text
        Slate.Transform.FullscreenMouseInput:
          hint: |-
            Set true to transform mouse input to account for viewport stretching at fullscreen resolutions not natively supported by the monitor.
        Slate.UnloadFreeTypeDataOnFlush:
          hint: |-
            Releases the free type data when the font cache is flushed
        Slate.VerifyParentChildrenRelationship:
          hint: |-
            Every tick, verify that a widget has only one parent.
        Slate.VerifyWidgetLayerId:
          hint: |-
            Every tick, verify that widgets have a LayerId range that fits with their siblings and their parent.
        Slate.WorldWidgetZOrder:
          hint: |-
            Whether to re-order world widgets projected to screen by their view point distance
             0: Disable re-ordering
             1: Re-order by distance (default, less batching, less artifacts when widgets overlap)
    /Script/Engine.RendererSettings:
      name: Rendering
      options:
        r.AllowCachedUniformExpressions:
          hint: |-
            Allow uniform expressions to be cached.
        r.AllowClearLightSceneExtentsOnly:
          hint: |-
        r.AllowDepthBoundsTest:
          hint: |-
            If true, use enable depth bounds test when rendering defered lights.
        r.AllowGlobalClipPlane:
          hint: |-
            Enables mesh shaders to support a global clip plane, needed for planar reflections, which adds about 15% BasePass GPU cost on PS4.
        r.AllowHDR:
          hint: |-
            Creates an HDR compatible swap-chain and enables HDR display output.0: Disabled (default)
            1: Allow HDR, if supported by the platform and display 
        r.AllowLandscapeShadows:
          hint: |-
            Allow Landscape Shadows
        r.AllowMultiGPUInEditor:
          hint: |-
            Enable experimental multi-GPU support in editor
        r.AllowOcclusionQueries:
          hint: |-
            If zero, occlusion queries will not be used to cull primitives.
        r.AllowPointLightCubemapShadows:
          hint: |-
            When 0, will prevent point light cube map shadows from being used and the light will be unshadowed.
        r.AllowPrecomputedVisibility:
          hint: |-
            If zero, precomputed visibility will not be used to cull primitives.
        r.AllowSimpleLights:
          hint: |-
            If true, we allow simple (ie particle) lights
        r.AllowStaticLighting:
          hint: |-
            Whether to allow any static lighting to be generated and used, like lightmaps and shadowmaps.
            Games that only use dynamic lighting should set this to 0 to save some static lighting overhead.
        r.AllowSubPrimitiveQueries:
          hint: |-
            Enables sub primitive queries, currently only used by hierarchical instanced static meshes. 1: Enable, 0 Disabled. When disabled, one query is used for the entire proxy.
        r.AllowTexture2DArrayCreation:
          hint: |-
            Enable UTexture2DArray assets
        r.AlsoUseSphereForFrustumCull:
          hint: |-
            Performance tweak. If > 0, then use a sphere cull before and in addition to a box for frustum culling.
        r.AmbientOcclusion.AsyncComputeBudget:
          hint: |-
            Defines which level of EAsyncComputeBudget to use for balancing AsyncCompute work against Gfx work.
            Only matters if the compute version of SSAO is active (requires CS support, enabled by cvar, single pass, no normals)
            This is a low level developer tweak to get best performance on hardware that supports AsyncCompute.
             0: least AsyncCompute
             1: .. (default)
             2: .. 
             3: .. 
             4: most AsyncCompute
        r.AmbientOcclusion.Compute:
          hint: |-
            If SSAO should use ComputeShader (not available on all platforms) or PixelShader.
            The [Async] Compute Shader version is WIP, not optimized, requires hardware support (not mobile/DX10/OpenGL3),
            does not use normals which allows it to run right after EarlyZPass (better performance when used with AyncCompute)
            AyncCompute is currently only functional on PS4.
             0: PixelShader (default)
             1: (WIP) Use ComputeShader if possible, otherwise fall back to '0'
             2: (WIP) Use AsyncCompute if efficient, otherwise fall back to '1'
             3: (WIP) Use AsyncCompute if possible, otherwise fall back to '1'
        r.AmbientOcclusion.Compute.Smooth:
          hint: |-
            Whether to smooth SSAO output when TAA is disabled
        r.AmbientOcclusion.Denoiser:
          hint: |-
            Choose the denoising algorithm.
             0: Disabled;
             1: Forces the default denoiser of the renderer;
             2: GScreenSpaceDenoiser witch may be overriden by a third party plugin (default).
        r.AmbientOcclusion.Denoiser.HistoryConvolution.KernelSpreadFactor:
          hint: |-
            Multiplication factor applied on the kernel sample offset (default = 7).
        r.AmbientOcclusion.Denoiser.HistoryConvolution.SampleCount:
          hint: |-
            Number of samples to use for history post filter (default = 16).
        r.AmbientOcclusion.Denoiser.KernelSpreadFactor:
          hint: |-
            Spread factor of the preconvolution passes.
        r.AmbientOcclusion.Denoiser.PreConvolution:
          hint: |-
            Number of pre-convolution passes (default = 1).
        r.AmbientOcclusion.Denoiser.ReconstructionSamples:
          hint: |-
            Maximum number of samples for the reconstruction pass (default = 16).
        r.AmbientOcclusion.Denoiser.TemporalAccumulation:
          hint: |-
            Accumulates the samples over multiple frames.
        r.AmbientOcclusion.DepthBoundsTest:
          hint: |-
            Whether to use depth bounds test to cull distant pixels during AO pass. This option is only valid when pixel shader path is used (r.AmbientOcclusion.Compute=0), without upsampling.
        r.AmbientOcclusion.FadeRadiusScale:
          hint: |-
            Allows to scale the ambient occlusion fade radius (SSAO).
             0.01:smallest .. 1.0:normal (default), <1:smaller, >1:larger
        r.AmbientOcclusion.Method:
          hint: |-
            Select between SSAO methods 
             0: SSAO (default)
             1: GTAO
        r.AmbientOcclusionLevels:
          hint: |-
            Defines how many mip levels are using during the ambient occlusion calculation. This is useful when tweaking the algorithm.
            <0: decide based on the quality setting in the postprocess settings/volume and r.AmbientOcclusionMaxQuality (default)
             0: none (disable AmbientOcclusion)
             1: one
             2: two (costs extra performance, soft addition)
             3: three (larger radius cost less but can flicker)
        r.AmbientOcclusionMaxQuality:
          hint: |-
            Defines the max clamping value from the post process volume's quality level for ScreenSpace Ambient Occlusion
                 100: don't override quality level from the post process volume (default)
               0..99: clamp down quality level from the post process volume to the maximum set by this cvar
             -100..0: Enforces a different quality (the absolute value) even if the postprocessvolume asks for a lower quality.
        r.AmbientOcclusionMipLevelFactor:
          hint: |-
            Controls mipmap level according to the SSAO step id
             0: always look into the HZB mipmap level 0 (memory cache trashing)
             0.5: sample count depends on post process settings (default)
             1: Go into higher mipmap level (quality loss)
        r.AmbientOcclusionRadiusScale:
          hint: |-
            Allows to scale the ambient occlusion radius (SSAO).
             0:off, 1.0:normal, <1:smaller, >1:larger
        r.AmbientOcclusionStaticFraction:
          hint: |-
            Allows to override the Ambient Occlusion Static Fraction (see post process volume). Fractions are between 0 and 1.
            <0: use default setting (default -1)
             0: no effect on static lighting, 0 is free meaning no extra rendering pass
             1: AO affects the stat lighting
        r.AMDD3D11MultiThreadedDevice:
          hint: |-
            If true, creates a multithreaded D3D11 device on AMD hardware (workaround for driver bug)
            Changes will only take effect in new game/editor instances - can't be changed at runtime.
        r.AMDDisableAsyncTextureCreation:
          hint: |-
            If true, uses synchronous texture creation on AMD hardware (workaround for driver bug)
            Changes will only take effect in new game/editor instances - can't be changed at runtime.
        r.Android.DisableASTCSupport:
          hint: |-
            Disable support for ASTC Texture compression if OpenGL driver supports it. (Android Only)
              0 = ASTC texture compression will be used if driver supports it [default]
              1 = ASTC texture compression will not be used.
        r.Android.DisableOpenGLES31Support:
          hint: |-
            Disable support for OpenGLES 3.1 API. (Android Only)
              0 = OpenGLES 3.1 API will be used (providing device and project supports it) [default]
              1 = OpenGLES 3.1 will be disabled, Vulkan will be used.
        r.Android.DisableVulkanSM5Support:
          hint: |-
            Disable support for vulkan API. (Android Only)
              0 = Vulkan SM5 API will be used (providing device and project supports it) [default]
              1 = Vulkan SM5 will be disabled, Vulkan or OpenGL fall back will be used.
        r.Android.DisableVulkanSupport:
          hint: |-
            Disable support for vulkan API. (Android Only)
              0 = vulkan API will be used (providing device and project supports it) [default]
              1 = vulkan will be disabled, opengl fall back will be used.
        r.Android.OverrideExternalTextureSupport:
          hint: |-
            Override external texture support for OpenGLES API. (Android Only)
              0 = normal detection used [default]
              1 = disable external texture support
              2 = force ImageExternal100 (version #100 with GL_OES_EGL_image_external)
              3 = force ImageExternal300 (version #300 with GL_OES_EGL_image_external)
              4 = force ImageExternalESSL300 (version #300 with GL_OES_EGL_image_external_essl3)
        r.AndroidDisableThreadedRendering:
          hint: |-
            Sets whether or not to allow threaded rendering for a particular Android device profile.
            	0 = Allow threaded rendering [default]
            	1 = Disable creation of render thread on startup
        r.AndroidDisableThreadedRenderingFirstLoad:
          hint: |-
            Sets whether or not to allow threaded rendering for a particular Android device profile on the initial load.
            	0 = Allow threaded rendering on the initial load [default]
            	1 = Disable threaded rendering on the initial load
        r.AnisotropicMaterials:
          hint: |-
            Whether anisotropic BRDF is used for material with anisotropy.
        r.AntiAliasingMethod:
          hint: |-
            Engine default (project setting) for AntiAliasingMethod is (postprocess volume/camera/game setting still can override)
             0: off (no anti-aliasing)
             1: Fast Approximate Anti-Aliasing (FXAA)
             2: Temporal Anti-Aliasing (TAA)
             3: Multisample Anti-Aliasing (MSAA, Only available on the desktop forward renderer)
             4: Temporal Super-Resolution (TSR, Default)
        r.AOApplyToStaticIndirect:
          hint: |-
            Whether to apply DFAO as indirect shadowing even to static indirect sources (lightmaps + stationary skylight + reflection captures)
        r.AOAsyncBuildQueue:
          hint: |-
            Whether to asynchronously build distance field volume data from meshes.
        r.AOAverageObjectsPerCullTile:
          hint: |-
            Determines how much memory should be allocated in distance field object culling data structures.  Too much = memory waste, too little = flickering due to buffer overflow.
        r.AOClearHistory:
          hint: |-
        r.AOComputeShaderNormalCalculation:
          hint: |-
            Whether to use the compute shader version of the distance field normal computation.
        r.AOGlobalDFClipmapDistanceExponent:
          hint: |-
            Exponent used to derive each clipmap's size, together with r.AOInnerGlobalDFClipmapDistance.
        r.AOGlobalDFResolution:
          hint: |-
            Resolution of the global distance field.  Higher values increase fidelity but also increase memory and composition cost.
        r.AOGlobalDFStartDistance:
          hint: |-
            World space distance along a cone trace to switch to using the global distance field instead of the object distance fields.
            This has to be large enough to hide the low res nature of the global distance field, but smaller values result in faster cone tracing.
        r.AOGlobalDistanceField:
          hint: |-
            Whether to use a global distance field to optimize occlusion cone traces.
            The global distance field is created by compositing object distance fields into clipmaps as the viewer moves through the level.
        r.AOGlobalDistanceField.AverageCulledObjectsPerPage:
          hint: |-
            Average expected number of objects per page, used to preallocate memory for the cull grid.
        r.AOGlobalDistanceField.CameraPositionVelocityOffsetDecay:
          hint: |-
        r.AOGlobalDistanceField.FastCameraMode:
          hint: |-
            Whether to update the Global SDF for fast camera movement - lower quality, faster updates so lighting can keep up with the camera.
        r.AOGlobalDistanceField.Heightfield:
          hint: |-
            Whether to voxelize Heightfield into the global distance field.
        r.AOGlobalDistanceField.MinMeshSDFRadius:
          hint: |-
            Meshes with a smaller world space radius than this are culled from the global SDF.
        r.AOGlobalDistanceField.MinMeshSDFRadiusInVoxels:
          hint: |-
            Meshes with a smaller radius than this number of voxels are culled from the global SDF.
        r.AOGlobalDistanceField.MipFactor:
          hint: |-
            Resolution divider for the mip map of a distance field clipmap.
        r.AOGlobalDistanceField.NumClipmaps:
          hint: |-
            Num clipmaps in the global distance field.  Setting this to anything other than 4 is currently only supported by Lumen.
        r.AOGlobalDistanceField.OccupancyRatio:
          hint: |-
            Expected sparse global distacne field occupancy for the page atlas allocation. 0.25 means 25% - filled and 75% - empty.
        r.AOGlobalDistanceFieldCacheMostlyStaticSeparately:
          hint: |-
            Whether to cache mostly static primitives separately from movable primitives, which reduces global DF update cost when a movable primitive is modified.  Adds another 12Mb of volume textures.
        r.AOGlobalDistanceFieldClipmapUpdatesPerFrame:
          hint: |-
            How many clipmaps to update each frame, only 1 or 2 supported.  With values less than 2, the first clipmap is only updated every other frame, which can cause incorrect self occlusion during movement.
        r.AOGlobalDistanceFieldDrawModifiedPrimitives:
          hint: |-
            Whether to draw primitive modifications (add, remove, updatetransform) that caused an update of the global distance field.
            This can be useful for tracking down why updating the global distance field is always costing a lot, since it should be mostly cached.
        r.AOGlobalDistanceFieldForceFullUpdate:
          hint: |-
            Whether to force full global distance field update every frame.
        r.AOGlobalDistanceFieldForceMovementUpdate:
          hint: |-
            Whether to force N texel border on X, Y and Z update each frame.
        r.AOGlobalDistanceFieldLogModifiedPrimitives:
          hint: |-
            Whether to log primitive modifications (add, remove, updatetransform) that caused an update of the global distance field.
            This can be useful for tracking down why updating the global distance field is always costing a lot, since it should be mostly cached.
            Pass 2 to log only non movable object updates.
        r.AOGlobalDistanceFieldPartialUpdates:
          hint: |-
            Whether to allow partial updates of the global distance field.  When profiling it's useful to disable this and get the worst case composition time that happens on camera cuts.
        r.AOGlobalDistanceFieldRepresentHeightfields:
          hint: |-
            Whether to put landscape in the global distance field.  Changing this won't propagate until the global distance field gets recached (fly away and back).
        r.AOGlobalDistanceFieldStaggeredUpdates:
          hint: |-
            Whether to allow the larger clipmaps to be updated less frequently.
        r.AOHistoryDistanceThreshold:
          hint: |-
            World space distance threshold needed to discard last frame's DFAO results.  Lower values reduce ghosting from characters when near a wall but increase flickering artifacts.
        r.AOHistoryStabilityPass:
          hint: |-
            Whether to gather stable results to fill in holes in the temporal reprojection.  Adds some GPU cost but improves temporal stability with foliage.
        r.AOHistoryWeight:
          hint: |-
            Amount of last frame's AO to lerp into the final result.  Higher values increase stability, lower values have less streaking under occluder movement.
        r.AOJitterConeDirections:
          hint: |-
        r.AOMaxViewDistance:
          hint: |-
            The maximum distance that AO will be computed at.
        r.AOObjectDistanceField:
          hint: |-
            Determines whether object distance fields are used to compute ambient occlusion.
            Only global distance field will be used when this option is disabled.
        r.AOOverwriteSceneColor:
          hint: |-
        r.AOQuality:
          hint: |-
            Defines the distance field AO method which allows to adjust for quality or performance.
             0:off, 1:medium, 2:high (default)
        r.AOSampleSet:
          hint: |-
            0 = Original set, 1 = Relaxed set
        r.AOScatterTileCulling:
          hint: |-
            Whether to use the rasterizer for binning occluder objects into screenspace tiles.
        r.AOSpecularOcclusionMode:
          hint: |-
            Determines how specular should be occluded by DFAO
            0: Apply non-directional AO to specular.
            1: (default) Intersect the reflection cone with the unoccluded cone produced by DFAO.  This gives more accurate occlusion than 0, but can bring out DFAO sampling artifacts.
        r.AOStepExponentScale:
          hint: |-
            Exponent used to distribute AO samples along a cone direction.
        r.AOUpdateGlobalDistanceField:
          hint: |-
            Whether to update the global distance field, useful for debugging.
        r.AOUseHistory:
          hint: |-
            Whether to apply a temporal filter to the distance field AO, which reduces flickering but also adds trails when occluders are moving.
        r.AOUseJitter:
          hint: |-
            Whether to use 4x temporal supersampling with Screen Grid DFAO.  When jitter is disabled, a shorter history can be used but there will be more spatial aliasing.
        r.AOViewFadeDistanceScale:
          hint: |-
            Distance over which AO will fade out as it approaches r.AOMaxViewDistance, as a fraction of r.AOMaxViewDistance.
        r.AsyncPipelineCompile:
          hint: |-
            0 to Create PSOs at the moment they are requested
            1 to Create Pipeline State Objects asynchronously(default)
        r.BasePassForceOutputsVelocity:
          hint: |-
            Force the base pass to compute motion vector, regardless of FPrimitiveUniformShaderParameters.0: Disabled (default)1: Enabled
        r.BasePassOutputsVelocity:
          hint: |-
            Deprecated CVar. Use r.VelocityOutputPass instead.
        r.BasePassWriteDepthEvenWithFullPrepass:
          hint: |-
            0 to allow a readonly base pass, which skips an MSAA depth resolve, and allows masked materials to get EarlyZ (writing to depth while doing clip() disables EarlyZ) (default)
            1 to force depth writes in the base pass.  Useful for debugging when the prepass and base pass don't match what they render.
        r.bFlushRenderTargetsOnWorldCleanup:
          hint: |-
        r.BlackBorders:
          hint: |-
            To draw black borders around the rendered image
            (prevents artifacts from post processing passes that read outside of the image e.g. PostProcessAA)
            in pixels, 0:off
        r.Bloom.AsyncCompute:
          hint: |-
            Whether to run FFT bloom on async compute.
        r.Bloom.CacheKernel:
          hint: |-
            Whether to cache the kernel in spectral domain.
        r.Bloom.ScreenPercentage:
          hint: |-
            Controles the axis resolution of the FFT convolution for bloom.
        r.BloomQuality:
          hint: |-
             0: off, no performance impact.
             1: average quality, least performance impact.
             2: average quality, least performance impact.
             3: good quality.
             4: good quality.
             5: Best quality, most significant performance impact. (default)
             >5: force experimental higher quality on mobile (can be quite slow on some hardware)
        r.BufferVisualizationDumpFrames:
          hint: |-
            When screenshots or movies dumps are requested, also save out dumps of the current buffer visualization materials
            0:off (default)
            1:on
        r.BufferVisualizationDumpFramesAsHDR:
          hint: |-
            When saving out buffer visualization materials in a HDR capable format
            0: Do not override default save format.
            1: Force HDR format for buffer visualization materials.
        r.BufferVisualizationOverviewTargets:
          hint: |-
            Specify the list of post process materials that can be used in the buffer visualization overview. Put nothing between the commas to leave a gap.
            	Choose from:
              BaseColor
              CustomDepth
              CustomStencil
              FinalImage
              ShadingModel
              MaterialAO
              Metallic
              Opacity
              Roughness
              Anisotropy
              SceneColor
              SceneDepth
              SeparateTranslucencyRGB
              SeparateTranslucencyA
              Specular
              SubsurfaceColor
              WorldNormal
              WorldTangent
              AmbientOcclusion
              CustomDepthWorldUnits
              SceneDepthWorldUnits
              Velocity
              PreTonemapHDRColor
              PostTonemapHDRColor
        r.BufferVisualizationTarget:
          hint: |-
            When the viewport view-mode is set to 'Buffer Visualization', this command specifies which of the various channels to display. Values entered other than the allowed values shown below will be ignored.
              BaseColor
              CustomDepth
              CustomStencil
              FinalImage
              ShadingModel
              MaterialAO
              Metallic
              Opacity
              Roughness
              Anisotropy
              SceneColor
              SceneDepth
              SeparateTranslucencyRGB
              SeparateTranslucencyA
              Specular
              SubsurfaceColor
              WorldNormal
              WorldTangent
              AmbientOcclusion
              CustomDepthWorldUnits
              SceneDepthWorldUnits
              Velocity
              PreTonemapHDRColor
              PostTonemapHDRColor
        r.Cache.DrawDirectionalShadowing:
          hint: |-
            Whether to draw direct shadowing sample points as generated by Lightmass.
            0 is off (default), 1 is on
        r.Cache.DrawInterpolationPoints:
          hint: |-
            Whether to draw positions that indirect lighting is interpolated at when they are updated, which are stored in the cache.
            Probably need 'r.CacheUpdateEveryFrame 1' as well to be useful, otherwise points will flicker as they update.
            0 is off (default), 1 is on
        r.Cache.DrawLightingSamples:
          hint: |-
            Whether to draw indirect lighting sample points as generated by Lightmass.
            0 is off (default), 1 is on
        r.Cache.LightingCacheDimension:
          hint: |-
            Dimensions of the lighting cache.  This should be a multiple of r.LightingCacheMovableObjectAllocationSize for least waste.
        r.Cache.LightingCacheMovableObjectAllocationSize:
          hint: |-
            Resolution of the interpolation sample volume used to light a dynamic object.  
            Values of 1 or 2 will result in a single interpolation sample per object which does not provide continuous lighting under movement, so interpolation is done over time.  
            Values of 3 or more support the necessary padding to provide continuous results under movement.
        r.Cache.LimitQuerySize:
          hint: |-
            0 is off, 1 is on (default)
        r.Cache.QueryNodeLevel:
          hint: |-
            Level of the lighting sample octree whose node's extents should be the target size for queries into the octree.
            Primitive blocks will be broken up into multiple octree queries if they are larger than this.0 is the root, 12 is the leaf level
        r.Cache.ReduceSHRinging:
          hint: |-
            Whether to modify indirect lighting cache SH samples to reduce ringing.  0 is off, 1 is on (default)
        r.Cache.SampleTransitionSpeed:
          hint: |-
            When using single sample lighting, controls the speed of the transition between two point samples (fade over time).
        r.Cache.UpdateEveryFrame:
          hint: |-
            Whether to update indirect lighting cache allocations every frame, even if they would have been cached.  0 is off (default), 1 is on
        r.Cache.UpdatePrimsTaskEnabled:
          hint: |-
            Enable threading for ILC primitive update.  Will overlap with the rest the end of InitViews.
        r.CachedRayTracingInstances.CacheLocalTransform:
          hint: |-
            Cache Local Transform instead of using InstanceData (increases memory usage).
        r.CachedRayTracingInstances.LazyUpdate:
          hint: |-
            Lazy update cached ray tracing instances world transforms. 
            Reduces memory usage by only caching world transforms of primitives when necessary.
        r.CalcLocalPlayerCachedLODDistanceFactor:
          hint: |-
            Should we calculate a LOD Distance Factor based on the current FOV.  Should not be necessary since LOD is already based on screen size.
        r.CameraCutTranslationThreshold:
          hint: |-
            The maximum camera translation disatance in centimeters allowed between two frames before a camera cut is automatically inserted.
        r.CapsuleDirectShadows:
          hint: |-
            Whether to allow capsule direct shadowing on skinned components with bCastCapsuleDirectShadow enabled.
        r.CapsuleIndirectConeAngle:
          hint: |-
            Light source angle used when the indirect shadow direction is derived from precomputed indirect lighting (no stationary skylight present)
        r.CapsuleIndirectShadows:
          hint: |-
            Whether to allow capsule indirect shadowing on skinned components with bCastCapsuleIndirectShadow enabled.
        r.CapsuleMaxDirectOcclusionDistance:
          hint: |-
            Maximum cast distance for direct shadows from capsules.  This has a big impact on performance.
        r.CapsuleMaxIndirectOcclusionDistance:
          hint: |-
            Maximum cast distance for indirect shadows from capsules.  This has a big impact on performance.
        r.CapsuleMinSkyAngle:
          hint: |-
            Minimum light source angle derived from the precomputed unoccluded sky vector (stationary skylight present)
        r.CapsuleShadowFadeAngleFromVertical:
          hint: |-
            Angle from vertical up to start fading out the indirect shadow, to avoid self shadowing artifacts.
        r.CapsuleShadows:
          hint: |-
            Whether to allow capsule shadowing on skinned components with bCastCapsuleDirectShadow or bCastCapsuleIndirectShadow enabled.
        r.CapsuleShadowsFullResolution:
          hint: |-
            Whether to compute capsule shadows at full resolution.
        r.CapsuleSkyAngleScale:
          hint: |-
            Scales the light source angle derived from the precomputed unoccluded sky vector (stationary skylight present)
        r.CatmullRomEndParamOffset:
          hint: |-
            The parameter offset for catmul rom end points.
        r.CEFGPUAcceleration:
          hint: |-
            Enables GPU acceleration in CEF
        r.chaos.ReflectionCaptureStaticSceneOnly:
          hint: |-
             0 is off, 1 is on (default)
        r.CheckSRVTransitions:
          hint: |-
            Tests that render targets are properly transitioned to SRV when SRVs are set.
        r.ClearCoatNormal:
          hint: |-
            0 to disable clear coat normal.
             0: off
             1: on
        r.ClearGBufferDBeforeBasePass:
          hint: |-
            Whether to clear GBuffer D before basepass
        r.ClearSceneMethod:
          hint: |-
            Select how the g-buffer is cleared in game mode (only affects deferred shading).
             0: No clear
             1: RHIClear (default)
             2: Quad at max z
        r.Color.Grading:
          hint: |-
            Controls whether post process settings's color grading settings should be applied.
        r.Color.Max:
          hint: |-
            Allows to define where the value 1.0 in the color channels is mapped to after color grading.
            Value should be around 1, smaller values darken the highlights, larger values move more colors towards white, Default: 1
        r.Color.Mid:
          hint: |-
            Allows to define where the value 0.5 in the color channels is mapped to after color grading (This is similar to a gamma correction).
            Value should be around 0.5, smaller values darken the mid tones, larger values brighten the mid tones, Default: 0.5
        r.Color.Min:
          hint: |-
            Allows to define where the value 0 in the color channels is mapped to after color grading.
            The value should be around 0, positive: a gray scale is added to the darks, negative: more dark values become black, Default: 0
        r.CompileMaterialsForShaderFormat:
          hint: |-
            When enabled, compile materials for this shader format in addition to those for the running platform.
            Note that these shaders are compiled and immediately tossed. This is only useful when directly inspecting output via r.DebugDumpShaderInfo.
        r.CompileShadersForDevelopment:
          hint: |-
            Setting this to 0 allows to ship a game with more optimized shaders as some
            editor and development features are not longer compiled into the shaders.
             Note: This should be done when shipping but it's not done automatically yet (feature need to mature
                   and shaders will compile slower as shader caching from development isn't shared).
            Cannot be changed at runtime - can be put into BaseEngine.ini
             0: off, shader can run a bit faster
             1: on (Default)
        r.Composure.CompositingElements.Debug.BreakOnFlushedTarget:
          hint: |-
            When enabled this will trigger a ensure (a soft assert) whenever a target from the pool is flushed. Helpful for catching mismanaged target usage - when you're not altering target size/formats or deleting elements/passes, your pool should not have to flush.
        r.Composure.CompositingElements.Debug.BreakOnNewTargetAllocations:
          hint: |-
            When enabled this will trigger a ensure (a soft assert) whenever a new RenderTarget is allocated for the compositing system. Helpful for catching target leaks - enable when you're not in the middle of modifying your pipeline.
        r.Composure.CompositingElements.Debug.RenderTargetPoolLimit:
          hint: |-
            When greater than zero, this will limit how many render targets are allocated in a single frame. Helpful for catching target leaks (when you know the expected target count).
        r.Composure.CompositingElements.Debug.UseInternalPassLists:
          hint: |-
            To manage compositing pass objects that are no longer active, but alive (in the transaction buffer), element objects keep an internal copy of their pass lists, and run off that instead of iterating over the user exposed one. 
            In case these lists get out of sync, this toggle lets you poll the user set ones directly.
        r.Composure.CompositingElements.DisableActiveRendering:
          hint: |-
            Composure compositing elements normally automatically enqueue render commands (both in game and editor). This CVar can be used as a shunt to control perf, where you can shut off all active element rendering. Specific elements can still have their render commands enqueued via an explicit call in game code.
        r.Composure.CompositingElements.DisableElementWhenOpacityIsZero:
          hint: |-
            When you set and element's opacity to zero, if this is set, we turn off the entire element - as it've you disabled it manually.
        r.Composure.CompositingElements.Editor.AutoFlushStaleTargets:
          hint: |-
            In editor, you can alter the target size and render format, or delete passes/elements. This may leave render resources pooled, but never reclaimed. Auto-Flushing returns those resources. For values greater than zero, the pooling system will wait that number of frames before a target is considered 'stale'.
        r.Composure.CompositingElements.Editor.DecoupleRenderingFromLevelViewport:
          hint: |-
            In editor, this decouples the compositing rendering from the editor's level rendering (to not be limited by the on-demand rendering style it sometimes uses). It uses a dedicated (hidden) viewport to enqueue the compositing render commands.
        r.Composure.CompositingElements.Editor.ForceApplyGammaToPreview:
          hint: |-
            By default we don't do gamma correction if the user has set up a preview transform on the compositing tree. 
            If you'd like to use a preview transform, and apply gamma on top of that, then enable this settong.
        r.Composure.CompositingElements.Editor.RealtimeRendering:
          hint: |-
            Turns on/off the realtime compositing rendering done by the dedicated compositing viewport.
        r.Composure.CompositingElements.Editor.WarnWhenSceneCaptureIsMissingCamera:
          hint: |-
            By default, scene capture (CG) elements rely on a camera to position themselves.
            To catch when one isn't set up, the editor displays a warning image.
            Disable this CVar to allow the capture from the element's position & orientation.
        r.Composure.CompositingElements.InternalPrePassParamName:
          hint: |-
            For compositing elements, each material pass can ganerally reference the pass that came before it using this predefined parameter name.
        r.Composure.CompositingElements.ReuseIntermediatePassTargets:
          hint: |-
            To lighten the Render Target load, set this to release intermediate pass targets back to the pool so they can be used by other, subsequent passes.
        r.Composure.CompositingElements.UseBlackForDisabledPasses:
          hint: |-
            With this enabled, if a compositing material's source element is disabled, then we use a hardcoded black/transparent texture in its place. If you disable this, then it will use whatever the default sampler texture is in the material.
        r.Composure.PipelineActors.SuspendEditorInstancesWithPIE:
          hint: |-
            This suspends composure editor rendering when you're in PIE. The PIE instances will still render, just their Editor world counterparts will temporarily stop.
            If disabled, both insances (the Editor's and their corespponding copies in PIE) will render at the same time - taxing resources, and slowing down the renderer.
        r.ContactShadows:
          hint: |-
             0: disabled.
             1: enabled.
        r.ContactShadows.NonShadowCastingIntensity:
          hint: |-
            Intensity of contact shadows from objects with cast contact shadows disabled. Usually 0 (off).
        r.CookOutUnusedDetailModeComponents:
          hint: |-
            If set, components which are not relevant for the current detail mode will be cooked out.
             0: keep components even if not relevant for the current detail mode.
             1: cook out components not relevant for the current detail mode.
        r.CreateShadersOnLoad:
          hint: |-
            Whether to create shaders on load, which can reduce hitching, but use more memory.  Otherwise they will be created as needed.
        r.CullInstances:
          hint: |-
            CullInstances.
        r.CustomDepth:
          hint: |-
            0: feature is disabled
            1: feature is enabled, texture is created on demand
            2: feature is enabled, texture is not released until required (should be the project setting if the feature should not stall)
            3: feature is enabled, stencil writes are enabled, texture is not released until required (should be the project setting if the feature should not stall)
        r.CustomDepth.Order:
          hint: |-
            When CustomDepth (and CustomStencil) is getting rendered
              0: Before Base Pass (Allows samping in DBuffer pass. Can be more efficient with AsyncCompute.)
              1: After Base Pass
              2: Default (Before Base Pass if DBuffer enabled.)
        r.CustomDepthTemporalAAJitter:
          hint: |-
            If disabled the Engine will remove the TemporalAA Jitter from the Custom Depth Pass. Only has effect when TemporalAA is used.
        r.CustomUnsafeZones:
          hint: |-
            Allows you to set custom unsafe zones. Define them based on Portrait (P) or Landscape (L) for a device oriented 'upright'.Unsafe zones may be either fixed or free, depending on if they move along with the rotation of the device.Format is (P:fixed[x1, y1][width, height]), semicolon-separated for each custom unsafe zone. +Values add from 0, -Values subtract from Height or Width
        r.D3D.CheckedForTypedUAVs:
          hint: |-
            Whether to disallow usage of typed UAV loads, as they are unavailable in Windows 7 D3D 11.0.
             0: Allow usage of typed UAV loads.
             1: Disallow usage of typed UAV loads. (default)
        r.D3D.ForceDXC:
          hint: |-
            Forces DirectX Shader Compiler (DXC) to be used for all D3D shaders. Shaders compiled with this option are only compatible with D3D12.
             0: Disable (default)
             1: Force new compiler for all shaders
        r.D3D.ForceShaderConductorDXCRewrite:
          hint: |-
            Forces rewriting using ShaderConductor when DXC is enabled.
             0: Do not rewrite (default)
             1: Force ShaderConductor rewrite
        r.D3D.RemoveUnusedInterpolators:
          hint: |-
            Enables removing unused interpolators mode when compiling pipelines for D3D.
             -1: Do not actually remove, but make the app think it did (for debugging)
             0: Disable (default)
             1: Enable removing unused
        r.d3d.uniformbufferrecycledepth:
          hint: |-
            Number of frames before recycling freed uniform buffers .
        r.D3D11.AutoFlushUAV:
          hint: |-
            If enabled, use NVAPI (Nvidia), AGS (AMD) or Intel Extensions (Intel) to not flush between dispatches/draw calls 1: on (default)
             0: off
        r.D3D11.Depth24Bit:
          hint: |-
            0: Use 32-bit float depth buffer
            1: Use 24-bit fixed point depth buffer(default)
        r.D3D11.UseAllowTearing:
          hint: |-
            Enable new dxgi flip mode with d3d11
        r.D3D11.UseSharedKeyMutex:
          hint: |-
            If 1, BUF_Shared vertex / index buffer and TexCreate_Shared texture will be created
            with the D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX flag instead of D3D11_RESOURCE_MISC_SHARED (default).
        r.D3D12.AllowAsyncCompute:
          hint: |-
            Allow usage of async compute
        r.D3D12.AllowShaderModel6:
          hint: |-
            Allows the usage of SM6 feature level.
        r.D3D12.AutoAttachPIX:
          hint: |-
            Automatically attach PIX on startup
        r.D3D12.BreadCrumbs:
          hint: |-
            Enable minimal overhead GPU Breadcrumbs to track the current GPU state and logs information what operations the GPU executed last.
        r.D3D12.Depth24Bit:
          hint: |-
            0: Use 32-bit float depth buffer
            1: Use 24-bit fixed point depth buffer(default)
        r.D3D12.DRED:
          hint: |-
            Enable DRED GPU Crash debugging mode to track the current GPU state and logs information what operations the GPU executed last.Has GPU overhead but gives the most information on the current GPU state when it crashes or hangs.
        r.D3D12.DXR.MinimumDriverVersionAMD:
          hint: |-
            Sets the minimum driver version required to enable ray tracing on AMD GPUs.
        r.D3D12.DXR.MinimumDriverVersionNVIDIA:
          hint: |-
            Sets the minimum driver version required to enable ray tracing on NVIDIA GPUs.
        r.D3D12.DXR.MinimumWindowsBuildVersion:
          hint: |-
            Sets the minimum Windows build version required to enable ray tracing.
        r.D3D12.ExecuteCommandListTask:
          hint: |-
            0: Execute command lists on RHI Thread instead of separate task!
            1: Execute command lists on task created from RHIThread to offload expensive work (default)
        r.D3D12.ExperimentalShaderModels:
          hint: |-
            Controls whether D3D12 experimental shader models should be allowed. Not available in shipping builds. (default = 0).
        r.D3D12.GPUTimeout:
          hint: |-
            0: Disable GPU Timeout; use with care as it could freeze your PC!
            1: Enable GPU Timeout; operation taking long on the GPU will fail(default)
        r.D3D12.NvAfterMath:
          hint: |-
            Enable NvAftermath to track the current GPU state and logs information what operations the GPU executed last.
            Only works on nVidia hardware and will dump GPU crashdumps as well.
        r.D3D12.RayTracing.AllowCompaction:
          hint: |-
            Whether to automatically perform compaction for static acceleration structures to save GPU memory. (default = 1)
        r.D3D12.RayTracing.AllowSpecializedStateObjects:
          hint: |-
            Whether to use specialized RTPSOs if they have been created. This is intended for performance testingand has no effect if r.D3D12.RayTracing.SpecializeStateObjects is 0. (default = 1)
        r.D3D12.RayTracing.CacheShaderRecords:
          hint: |-
            Automatically cache and re-use SBT hit group records. This significantly improves CPU performance in large scenes with many identical mesh instances. (default = 1)
            This mode assumes that contents of uniform buffers does not change during ray tracing resource binding.
        r.D3D12.RayTracing.DebugForceBuildMode:
          hint: |-
            Forces specific acceleration structure build mode (not runtime-tweakable).
            0: Use build mode requested by high-level code (Default)
            1: Force fast build mode
            2: Force fast trace mode
        r.D3D12.RayTracing.DeduplicateSamplers:
          hint: |-
            Use an exhaustive search to deduplicate sampler descriptors when generating shader binding tables. Reduces sampler heap usage at the cost of some CPU time. (default = 1)
        r.D3D12.RayTracing.MaxBatchedCompaction:
          hint: |-
            Maximum of amount of compaction requests and rebuilds per frame. (default = 64)
        r.D3D12.RayTracing.SpecializeStateObjects:
          hint: |-
            Whether to create specialized unique ray tracing pipeline state objects for each ray generation shader. (default = 0)
            This option can produce more more efficient PSOs for the GPU at the cost of longer creation times and more memory. Requires DXR 1.1.
        r.D3D12.RayTracing.ViewDescriptorHeapSize:
          hint: |-
            Maximum number of descriptors per ray tracing view descriptor heap. (default = 250k, ~8MB per heap)
            Typical measured descriptor heap usage in large scenes is ~50k. An error is reported when this limit is reached and shader bindings for subsequent objects are skipped.
        r.D3D12.UseAllowTearing:
          hint: |-
            Enable new dxgi flip mode with d3d12
        r.D3D12.UseInternalTransitions:
          hint: |-
            Use the D3D12 RHI internal transitions to drive all resource transitions
        r.D3D12.ValidateInternalTransitions:
          hint: |-
            Use the D3D12 RHI internal transitions to validate the engine pushed RHI transitions
        r.DBuffer:
          hint: |-
            Enables DBuffer decal material blend modes.
            DBuffer decals are rendered before the base pass, allowing them to affect static lighting and skylighting correctly. 
            When enabled, a full prepass will be forced which adds CPU / GPU cost.  Several texture lookups will be done in the base pass to fetch the decal properties, which adds pixel work.
             0: off
             1: on (default)
        r.DebugActionZone.ActionRatio:
          hint: |-
            The action zone ratio that will be returned by FDisplayMetrics::GetDisplayMetrics on platforms that don't have a defined safe zone (0..1)
             default: 1.0
        r.DebugLightDiscardProp:
          hint: |-
            [0,1]: Proportion of lights to discard for debug/performance profiling purposes.
        r.DebugSafeZone.MaxDebugTextStringsPerActor:
          hint: |-
            The maximum number of debug strings that can be attached to a given actor (<=0 : no limit)
        r.DebugSafeZone.Mode:
          hint: |-
            The safe zone visualization mode (0..2)
             0: Disabled (default)
             1: Show Title Safe Zone
             2: Show Action Safe Zone
        r.DebugSafeZone.OverlayAlpha:
          hint: |-
            The alpha value of the safe zone overlay (0..1)
             default: 0.2
        r.DebugSafeZone.TitleRatio:
          hint: |-
            The safe zone ratio that will be returned by FDisplayMetrics::GetDisplayMetrics on platforms that don't have a defined safe zone (0..1)
             default: 1.0
        r.Decal.FadeDurationScale:
          hint: |-
            Scales the per decal fade durations. Lower values shortens lifetime and fade duration. Default is 1.0f.
        r.Decal.FadeScreenSizeMult:
          hint: |-
            Control the per decal fade screen size. Multiplies with the per-decal screen size fade threshold.  Smaller means decals fade less aggressively.
        r.Decal.NormalReprojectionEnabled:
          hint: |-
            If true, normal reprojection from the previous frame is allowed in SceneTexture nodes on DBuffer decals, provided that motion in depth prepass is enabled as well (r.VelocityOutputPass=0). Otherwise the fallback is the normal extracted from the depth buffer.
        r.Decal.NormalReprojectionThresholdHigh:
          hint: |-
            When reading the normal from a SceneTexture node in a DBuffer decal shader, the normal is a mix of the geometry normal (extracted from the depth buffer) and the normal from the reprojected previous frame. When the dot product of the geometry and reprojected normal is below the r.Decal.NormalReprojectionThresholdLow, the geometry normal is used. When that value is above r.Decal.NormalReprojectionThresholdHigh, the reprojected normal is used. Otherwise it uses a lerp between them.
        r.Decal.NormalReprojectionThresholdLow:
          hint: |-
            When reading the normal from a SceneTexture node in a DBuffer decal shader, the normal is a mix of the geometry normal (extracted from the depth buffer) and the normal from the reprojected previous frame. When the dot product of the geometry and reprojected normal is below the r.Decal.NormalReprojectionThresholdLow, the geometry normal is used. When that value is above r.Decal.NormalReprojectionThresholdHigh, the reprojected normal is used. Otherwise it uses a lerp between them.
        r.Decal.StencilSizeThreshold:
          hint: |-
            Control a per decal stencil pass that allows to large (screen space) decals faster. It adds more overhead per decals so this
              <0: optimization is disabled
               0: optimization is enabled no matter how small (screen space) the decal is
            0..1: optimization is enabled, value defines the minimum size (screen space) to trigger the optimization (default 0.1)
        r.DecalDepthBias:
          hint: |-
            Global depth bias used by mesh decals. Default is 0.005
        r.DefaultBackBufferPixelFormat:
          hint: |-
            Defines the default back buffer pixel format.
             0: 8bit RGBA
             1: 16bit RGBA
             2: Float RGB
             3: Float RGBA
             4: 10bit RGB, 2bit Alpha
        r.DefaultFeature.AmbientOcclusion:
          hint: |-
            Engine default (project setting) for AmbientOcclusion is (postprocess volume/camera/game setting still can override)
             0: off, sets AmbientOcclusionIntensity to 0
             1: on (default)
        r.DefaultFeature.AmbientOcclusionStaticFraction:
          hint: |-
            Engine default (project setting) for AmbientOcclusion is (postprocess volume/camera/game setting still can override)
             0: off, sets AmbientOcclusionStaticFraction to 0
             1: on (default, costs extra pass, only useful if there is some baked lighting)
        r.DefaultFeature.AutoExposure:
          hint: |-
            Engine default (project setting) for AutoExposure is (postprocess volume/camera/game setting still can override)
             0: off, sets AutoExposureMinBrightness and AutoExposureMaxBrightness to 1
             1: on (default)
        r.DefaultFeature.AutoExposure.Bias:
          hint: |-
            Engine default (project setting) for AutoExposure Exposure Bias (postprocess volume/camera/game setting still can override)
        r.DefaultFeature.AutoExposure.ExtendDefaultLuminanceRange:
          hint: |-
            Whether the default values for AutoExposure should support an extended range of scene luminance.
            This also change the PostProcessSettings.Exposure.MinBrightness, MaxBrightness, HistogramLogMin and HisogramLogMax
            to be expressed in EV100 values instead of in Luminance and Log2 Luminance.
             0: Legacy range (default)
             1: Extended range
        r.DefaultFeature.AutoExposure.Method:
          hint: |-
            Engine default (project setting) for AutoExposure Method (postprocess volume/camera/game setting still can override)
             0: Histogram based (requires compute shader, default)
             1: Basic AutoExposure
        r.DefaultFeature.Bloom:
          hint: |-
            Engine default (project setting) for Bloom is (postprocess volume/camera/game setting still can override)
             0: off, set BloomIntensity to 0
             1: on (default)
        r.DefaultFeature.LensFlare:
          hint: |-
            Engine default (project setting) for LensFlare is (postprocess volume/camera/game setting still can override)
             0: off, sets LensFlareIntensity to 0
             1: on (default)
        r.DefaultFeature.LightUnits:
          hint: |-
            Default units to use for point, spot and rect lights
             0: unitless 
             1: candelas (default)
             2: lumens
        r.DefaultFeature.MotionBlur:
          hint: |-
            Engine default (project setting) for MotionBlur is (postprocess volume/camera/game setting still can override)
             0: off, sets MotionBlurAmount to 0
             1: on (default)
        r.DeferSkeletalDynamicDataUpdateUntilGDME:
          hint: |-
            If > 0, then do skeletal mesh dynamic data updates will be deferred until GDME. Experimental option.
        r.DeferUniformExpressionCaching:
          hint: |-
            Whether to defer caching of uniform expressions until a rendering command needs them up to date.  Deferring updates is more efficient because multiple SetVectorParameterValue calls in a frame will only result in one update.
        r.DeferUpdateRenderStates:
          hint: |-
            Whether to defer updating the render states of material parameter collections when a paramter is changed until a rendering command needs them up to date.  Deferring updates is more efficient because multiple SetVectorParameterValue and SetScalarParameterValue calls in a frame will only result in one update.
        r.DemosaicVposOffset:
          hint: |-
            This offset is added to the rasterized position used for demosaic in the mobile tonemapping shader. It exists to workaround driver bugs on some Android devices that have a half-pixel offset.
        r.DemotedLocalMemoryWarning:
          hint: |-
            If set to 1, a warning will be displayed when local memory has been demoted to system memory.
        r.DepthOfField.DepthBlur.Amount:
          hint: |-
            This scale multiplier only affects the CircleDOF DepthBlur feature (value defines in how many km the radius goes to 50%).
             x: Multiply the existing Depth Blur Amount with x
            -x: Override the existing Depth Blur Amount with x (in km)
             1: No adjustments (default)
        r.DepthOfField.DepthBlur.ResolutionScale:
          hint: |-
            This scale multiplier only affects the CircleDOF DepthBlur feature. It's a temporary hack.
            It lineary scale the DepthBlur by the resolution increase over 1920 (in width), does only affect resolution larger than that.
            Actual math: float Factor = max(ViewWidth / 1920 - 1, 0); DepthBlurRadius *= 1 + Factor * (CVar - 1)
             1: No adjustments (default)
             x: if the resolution is 1920 there is no change, if 2x larger than 1920 it scale the radius by x
        r.DepthOfField.DepthBlur.Scale:
          hint: |-
            This scale multiplier only affects the CircleDOF DepthBlur feature. This is applied after r.DepthOfField.DepthBlur.ResolutionScale.
             0: Disable Depth Blur
             x: Multiply the existing Depth Blur Radius with x
            -x: Override the existing Depth Blur Radius with x
             1: No adjustments (default)
        r.DepthOfField.MaxSize:
          hint: |-
            Allows to clamp the gaussian depth of field radius (for better performance), default: 100
        r.DepthOfField.NearBlurSizeThreshold:
          hint: |-
            Sets the minimum near blur size before the effect is forcably disabled. Currently only affects Gaussian DOF.
             (default: 0.01)
        r.DepthOfFieldQuality:
          hint: |-
            Allows to adjust the depth of field quality. Currently only fully affects BokehDOF. GaussianDOF is either 0 for off, otherwise on.
             0: Off
             1: Low
             2: high quality (default, adaptive, can be 4x slower)
             3: very high quality, intended for non realtime cutscenes, CircleDOF only (slow)
             4: extremely high quality, intended for non realtime cutscenes, CircleDOF only (very slow)
        r.DetailMode:
          hint: |-
            Current detail mode; determines whether components of actors should be updated/ ticked.
             0: low, show only object with DetailMode low or higher
             1: medium, show all object with DetailMode medium or higher
             2: high, show all objects (default)
        r.DFDistanceScale:
          hint: |-
            Factor to scale directional light property 'DistanceField Shadows Distance', clamped to [0.0001, 10000].
            I.e.: DistanceFieldShadowsDistance *= r.DFDistanceScale.
            [0.0001,1): shorter distance
             1: normal (default)
            (1,10000]: larger distance.)
        r.DFFarTransitionScale:
          hint: |-
            Use to modify the length of the far transition (fade out) of the distance field shadows.
            1.0: (default) Calculate in the same way as other cascades.0.0: Disable fade out.
        r.DFFullResolution:
          hint: |-
            1 = full resolution distance field shadowing, 0 = half resolution with bilateral upsample.
        r.DFShadowAsyncCompute:
          hint: |-
            Whether render distance field shadows using async compute if possible
        r.DFShadowAverageObjectsPerCullTile:
          hint: |-
            Determines how much memory should be allocated in distance field object culling data structures.  Too much = memory waste, too little = flickering due to buffer overflow.
        r.DFShadowCompactCulledObjects:
          hint: |-
            Whether to compact culled object indices when using scattered tile culling. Note that each tile can only hold up to r.DFShadowAverageObjectsPerCullTile number of objects when compaction is not used.
        r.DFShadowCullTileWorldSize:
          hint: |-
            World space size of a tile used for culling for directional lights.
        r.DFShadowOffsetDataStructure:
          hint: |-
            Which data structure to store offset in, 0 - base, 1 - buffer, 2 - texture
        r.DFShadowQuality:
          hint: |-
            Defines the distance field shadow method which allows to adjust for quality or performance.
             0:off, 1:low (20 steps, no SSS), 2:medium (32 steps, no SSS), 3:high (64 steps, SSS, default)
        r.DFShadowScatterTileCulling:
          hint: |-
            Whether to use the rasterizer to scatter objects onto the tile grid for culling.
        r.DFTwoSidedMeshDistanceBias:
          hint: |-
            World space amount to expand distance field representations of two sided meshes.  This is useful to get tree shadows to match up with standard shadow mapping.
        r.DiffuseColor.Max:
          hint: |-
            Allows quick material test by remapping the diffuse color at 1 to a new value (0..1), Only for non shipping built!
            1: (default)
        r.DiffuseColor.Min:
          hint: |-
            Allows quick material test by remapping the diffuse color at 1 to a new value (0..1), Only for non shipping built!
            1: (default)
        r.DiffuseIndirect.Denoiser:
          hint: |-
            Denoising options (default = 1)
        r.DiffuseIndirect.HalfRes:
          hint: |-
            TODO(Guillaume)
        r.DiffuseIndirect.RayPerPixel:
          hint: |-
            TODO(Guillaume)
        r.DisableDistortion:
          hint: |-
            Prevents distortion effects from rendering.  Saves a full-screen framebuffer's worth of memory.
        r.DisableDriverWarningPopupIfGFN:
          hint: |-
            If non-zero, disable driver version warning popup if running on a GFN cloud machine.
        r.DisableEngineAndAppRegistration:
          hint: |-
            If true, disables engine and app registration, to disable GPU driver optimizations during debugging and development
            Changes will only take effect in new game/editor instances - can't be changed at runtime.
        r.DisableLODFade:
          hint: |-
            Disable fading for distance culling
        r.DiscardUnusedQuality:
          hint: |-
            Whether to keep or discard unused quality level shadermaps in memory.
            0: keep all quality levels in memory. (default)
            1: Discard unused quality levels on load.
        r.DisplayInternals:
          hint: |-
            Allows to enable screen printouts that show the internals on the engine/renderer
            This is mostly useful to be able to reason why a screenshots looks different.
             0: off (default)
             1: enabled
        r.DistanceFadeMaxTravel:
          hint: |-
            Max distance that the player can travel during the fade time.
        r.DistanceFieldAO:
          hint: |-
            Whether the distance field AO feature is allowed, which is used to implement shadows of Movable sky lights from static meshes.
        r.DistanceFieldAO.TraverseMips:
          hint: |-
            Whether to traverse mips while tracing AO cones against object SDFs.
        r.DistanceFields:
          hint: |-
            Enables distance fields rendering.
             0: Disabled.
             1: Enabled.
        r.DistanceFields.BlockAllocatorSizeInBricks:
          hint: |-
            Allocation granularity of the distance field block allocator. Higher number may cause more memory wasted on padding but allocation may be faster.
        r.DistanceFields.BrickAtlasMaxSizeZ:
          hint: |-
            Target for maximum depth of the Mesh Distance Field atlas, in 8^3 bricks.  32 => 128 * 128 * 32 * 8^3 = 256Mb.  Actual atlas size can go over since mip2 is always loaded.
        r.DistanceFields.BrickAtlasSizeXYInBricks:
          hint: |-
            Controls the allocation granularity of the atlas, which grows in Z.
        r.DistanceFields.Debug.ForceNumMips:
          hint: |-
            When set to > 0, overrides the requested number of mips for streaming.  1 = only lowest resolution mip loaded, 3 = all mips loaded.  Mips will still be clamped by available space in the atlas.
        r.DistanceFields.Debug.ResizeAtlasEveryFrame:
          hint: |-
            Whether to resize the Distance Field atlas every frame, which is useful for debugging.
        r.DistanceFields.DefaultVoxelDensity:
          hint: |-
            Determines how the default scale of a mesh converts into distance field voxel dimensions.
            Changing this will cause all distance fields to be rebuilt.  Large values can consume memory very quickly!
        r.DistanceFields.DefragmentIndirectionAtlas:
          hint: |-
            Whether to defragment the Distance Field indirection atlas when it requires resizing.
        r.DistanceFields.LogAtlasStats:
          hint: |-
            Set to 1 to dump atlas stats, set to 2 to dump atlas and SDF asset stats.
        r.DistanceFields.MaxIndirectionAtlasSizeXYZ:
          hint: |-
            Maximum size of indirection atlas texture
        r.DistanceFields.MaxObjectBoundingRadius:
          hint: |-
            Objects larger than this will not be included in the Mesh Distance Field scene, to improve performance.
        r.DistanceFields.MaxPerMeshResolution:
          hint: |-
            Highest resolution (in one dimension) allowed for a single static mesh asset, used to cap the memory usage of meshes with a large scale.
            Changing this will cause all distance fields to be rebuilt.  Large values such as 512 can consume memory very quickly! (64Mb for one asset at 512)
        r.DistanceFields.MinIndirectionAtlasSizeXYZ:
          hint: |-
            Minimum size of indirection atlas texture
        r.DistanceFields.ParallelUpdate:
          hint: |-
        r.DistanceFields.ReverseAtlasAllocationOrder:
          hint: |-
        r.DistanceFields.SupportEvenIfHardwareRayTracingSupported:
          hint: |-
            Whether to support distance fields when hardware ray tracing is supported.
            Setting it to 0 will skip distance field overhead when hardware ray tracing is supported.
        r.DistanceFields.SurfaceBiasExpand:
          hint: |-
            Fraction of a Mesh SDF voxel to expand the surface during intersection.  Expanding the surface improves representation quality, at the cost of over-occlusion.
        r.DistanceFields.TextureUploadLimitKBytes:
          hint: |-
            Max KB of distance field texture data to upload per frame from streaming requests.
        r.DistanceFields.TwoSidedSurfaceBiasExpand:
          hint: |-
            Amount to scale the surface bias for meshes with mostly two sided triangles.  Two sided meshes are not represented well with Signed Distance Fields, as no negative region gets created.  Expanding the surface improves representation quality, at the cost of over-occlusion.
        r.DistanceFieldShadowing:
          hint: |-
            Whether the distance field shadowing feature is allowed.
        r.DOF.Gather.AccumulatorQuality:
          hint: |-
            Controles the quality of the gathering accumulator.
        r.DOF.Gather.EnableBokehSettings:
          hint: |-
            Whether to applies bokeh settings on foreground and background gathering.
             0: Disable;
             1: Enable (default).
        r.DOF.Gather.PostfilterMethod:
          hint: |-
            Method to use to post filter a gather pass.
             0: None;
             1: Per RGB channel median 3x3 (default);
             2: Per RGB channel max 3x3.
        r.DOF.Gather.RingCount:
          hint: |-
            Number of rings for gathering kernels [[3; 5]]. Default to 5.
        r.DOF.Kernel.MaxBackgroundRadius:
          hint: |-
            Maximum size of the background bluring radius in screen space (default=0.025).
        r.DOF.Kernel.MaxForegroundRadius:
          hint: |-
            Maximum size of the foreground bluring radius in screen space (default=0.025).
        r.DOF.Recombine.EnableBokehSettings:
          hint: |-
            Whether to applies bokeh settings on slight out of focus done in recombine pass.
             0: Disable;
             1: Enable (default).
        r.DOF.Recombine.MinFullresBlurRadius:
          hint: |-
            Minimal blurring radius used in full resolution pixel width to actually do DOF  when slight out of focus is enabled (default = 0.1).
        r.DOF.Recombine.Quality:
          hint: |-
            Configures the quality of the recombine pass.
             0: No slight out of focus;
             1: Slight out of focus 24spp;
             2: Slight out of focus 32spp (default).
        r.DOF.Scatter.BackgroundCompositing:
          hint: |-
            Compositing mode of the background hybrid scattering.
             0: Disabled;
             1: Additive;
             2: Gather occlusion (default).
        r.DOF.Scatter.EnableBokehSettings:
          hint: |-
            Whether to enable bokeh settings on scattering.
             0: Disable;
             1: Enable (default).
        r.DOF.Scatter.ForegroundCompositing:
          hint: |-
            Compositing mode of the foreground hybrid scattering.
             0: Disabled;
             1: Additive (default).
        r.DOF.Scatter.MaxSpriteRatio:
          hint: |-
            Maximum ratio of scattered pixel quad as sprite, usefull to control DOF's scattering upperbound.  1 will allow to scatter 100% pixel quads, whereas 0.2 will only allow 20% (default = 0.1).
        r.DOF.Scatter.MinCocRadius:
          hint: |-
            Minimal Coc radius required to be scattered (default = 3).
        r.DOF.Scatter.NeighborCompareMaxColor:
          hint: |-
            Controles the linear color clamping upperbound applied before color of pixel and neighbors are compared. To low, and you may not scatter enough; to high you may scatter unnecessarily too much in highlights (Default: 10).
        r.DOF.TemporalAAQuality:
          hint: |-
            Quality of temporal AA pass done in DOF.
             0: Faster but lower quality; 1: Higher quality pass (default).
        r.DoLazyStaticMeshUpdate:
          hint: |-
            If true, then do not add meshes to the static mesh draw lists until they are visible. Experiemental option.
        r.DontLimitOnBattery:
          hint: |-
            0: Limit performance on devices with a battery.(default)
            1: Do not limit performance due to device having a battery.
        r.DoTiledReflections:
          hint: |-
            Compute Reflection Environment with Tiled compute shader..
             0: off
             1: on (default)
        r.DownsampledOcclusionQueries:
          hint: |-
            Whether to issue occlusion queries to a downsampled depth buffer
        r.DrawRectangleOptimization:
          hint: |-
            Controls an optimization for DrawRectangle(). When enabled a triangle can be used to draw a quad in certain situations (viewport sized quad).
            Using a triangle allows for slightly faster post processing in lower resolutions but can not always be used.
             0: Optimization is disabled, DrawDenormalizedQuad always render with quad
             1: Optimization is enabled, a triangle can be rendered where specified (default)
        r.DriverDetectionMethod:
          hint: |-
            Defines which implementation is used to detect the GPU driver (to check for old drivers, logs and statistics)
              0: Iterate available drivers in registry and choose the one with the same name, if in question use next method (happens)
              1: Get the driver of the primary adapter (might not be correct when dealing with multiple adapters)
              2: Use DirectX LUID (would be the best, not yet implemented)
              3: Use Windows functions, use the primary device (might be wrong when API is using another adapter)
              4: Use Windows functions, use names such as DirectX Device (newest, most promising)
        r.DumpGPU.Buffer:
          hint: |-
            Whether to dump buffer.
             0: Ignores all buffers
             1: Dump only buffers' descriptors
             2: Dump buffers' descriptors and binaries (default)
        r.DumpGPU.ConsoleVariables:
          hint: |-
            Whether to dump rendering console variables (enabled by default).
        r.DumpGPU.Directory:
          hint: |-
            Directory to dump to.
        r.DumpGPU.Draws:
          hint: |-
            Whether to dump resource after each individual draw call (disabled by default).
        r.DumpGPU.Explore:
          hint: |-
            Whether to open file explorer to where the GPU dump on completion (enabled by default).
        r.DumpGPU.Mask:
          hint: |-
            Whether to include GPU mask in the name of each Pass (has no effect unless system has multiple GPUs).
        r.DumpGPU.PassParameters:
          hint: |-
            Whether to dump the pass parameters.
        r.DumpGPU.Root:
          hint: |-
            Allows to filter the tree when using r.DumpGPU command, the pattern match is case sensitive.
        r.DumpGPU.Screenshot:
          hint: |-
            Whether to take a final screenshot.
        r.DumpGPU.Test.EnableDiskWrite:
          hint: |-
            Master switch whether any files should be written to disk, used for r.DumpGPU automation tests to not fill up workers' hard drive.
        r.DumpGPU.Test.PrettifyResourceFileNames:
          hint: |-
            Whether the resource file names should include resource name. May increase the likelyness of running into Windows' filepath limit.
        r.DumpGPU.Texture:
          hint: |-
            Whether to dump textures.
             0: Ignores all textures
             1: Dump only textures' descriptors
             2: Dump textures' descriptors and binaries (default)
        r.DumpGPU.Viewer.Visualize:
          hint: |-
            Name of RDG output resource to automatically open in the dump viewer.
        r.DumpingMovie:
          hint: |-
            Allows to dump each rendered frame to disk (slow fps, names MovieFrame..).
            <=0:off (default), <0:remains on, >0:remains on for n frames (n is the number specified)
        r.DumpShaderDebugInfo:
          hint: |-
            Dumps debug info for compiled shaders to GameName/Saved/ShaderDebugInfo
            When set to 1, debug info is dumped for all compiled shader
            When set to 2, it is restricted to shaders with compilation errors
            When set to 3, it is restricted to shaders with compilation errors or warnings
            The debug info is platform dependent, but usually includes a preprocessed version of the shader source.
            Global shaders automatically dump debug info if r.ShaderDevelopmentMode is enabled, this cvar is not necessary.
            On iOS, if the PowerVR graphics SDK is installed to the default path, the PowerVR shader compiler will be called and errors will be reported during the cook.
        r.DumpShaderDebugShortNames:
          hint: |-
            Only valid when r.DumpShaderDebugInfo > 0.
            When set to 1, will shorten names factory and shader type folder names to avoid issues with long paths.
        r.DumpShaderDebugWorkerCommandLine:
          hint: |-
            Only valid when r.DumpShaderDebugInfo > 0.
            When set to 1, it will generate a file that can be used with ShaderCompileWorker's -directcompile.
        r.DumpTransitionsForResource:
          hint: |-
            Prints callstack when the given resource is transitioned. Only implemented for DX11 at the moment.Name of the resource to dump
        r.DX11.LogRTRebinds:
          hint: |-
            Log # of rebinds of RTs per frame
        r.DX11.ReduceRTVRebinds:
          hint: |-
            Reduce # of SetRenderTargetCalls.
        r.DX11NumForcedGPUs:
          hint: |-
            Num Forced GPUs.
        r.DX12NVAfterMathEnabled:
          hint: |-
            Use NV Aftermath for GPU crash analysis in D3D12
        r.DX12NVAfterMathTrackResources:
          hint: |-
            Enable NV Aftermath resource tracing in D3D12
        r.DynamicGlobalIlluminationMethod:
          hint: |-
            0 - None.  Global Illumination can be baked into Lightmaps but no technique will be used for Dynamic Global Illumination.
            1 - Lumen.  Use Lumen Global Illumination for all lights, emissive materials casting light and SkyLight Occlusion.  Requires 'Generate Mesh Distance Fields' enabled for Software Ray Tracing and 'Support Hardware Ray Tracing' enabled for Hardware Ray Tracing.
            2 - SSGI.  Standalone Screen Space Global Illumination.  Low cost, but limited by screen space information.
            3 - RTGI.  Ray Traced Global Illumination technique.  Deprecated, use Lumen Global Illumination instead.
            4 - Plugin.  Use a plugin for Global Illumination.
        r.DynamicRes.ChangePercentageThreshold:
          hint: |-
            Minimal increase percentage threshold to alow when changing resolution.
        r.DynamicRes.CPUBoundScreenPercentage:
          hint: |-
            Screen percentage to converge to when CPU bound. This can be used when GPU and CPU share same memory.
        r.DynamicRes.CPUTimeHeadRoom:
          hint: |-
            Head room for the threads compared GPU time to avoid keep getting resolution fraction shrinking down when CPU bound (in milliseconds).
        r.DynamicRes.FrameTimeBudget:
          hint: |-
            Frame's time budget in milliseconds.
        r.DynamicRes.FrameWeightExponent:
          hint: |-
            Recursive weight of frame N-1 against frame N.
        r.DynamicRes.GPUTimingMeasureMethod:
          hint: |-
            Selects the method to use to measure GPU timings.
             0: Same as stat unit (default);
             1: Timestamp queries.
        r.DynamicRes.HistorySize:
          hint: |-
            Number of frames keept in the history.
        r.DynamicRes.IncreaseAmortizationBlendFactor:
          hint: |-
            Amortization blend factor when scale resolution back up to reduce resolution fraction oscillations.
        r.DynamicRes.MaxConsecutiveOverbudgetGPUFrameCount:
          hint: |-
            Maximum number of consecutive frame tolerated over GPU budget.
        r.DynamicRes.MaxScreenPercentage:
          hint: |-
            Maximal screen percentage.
        r.DynamicRes.MinResolutionChangePeriod:
          hint: |-
            Minimal number of frames between resolution changes, important to avoid input sample position interferences in TAA upsample.
        r.DynamicRes.MinScreenPercentage:
          hint: |-
            Minimal screen percentage.
        r.DynamicRes.OperationMode:
          hint: |-
            Select the operation mode for dynamic resolution.
             0: Disabled (default);
             1: Enable according to the game user settings;
             2: Enable regardless of the game user settings.
        r.DynamicRes.OutlierThreshold:
          hint: |-
            Ignore frame timing that have Game thread or render thread X time more than frame budget.
        r.DynamicRes.TargetedGPUHeadRoomPercentage:
          hint: |-
            Targeted GPU headroom (in percent from r.DynamicRes.FrameTimeBudget).
        r.DynamicRes.TestScreenPercentage:
          hint: |-
            Forces the screen percentage to a particular value with dynamic res.
             0: Disabled (default); > 0: Screen percentage is enabled.
        r.EarlyInitDynamicShadows:
          hint: |-
            Starts shadow culling tasks earlier in the frame.
        r.EarlyZPass:
          hint: |-
            Whether to use a depth only pass to initialize Z culling for the base pass. Cannot be changed at runtime.
            Note: also look at r.EarlyZPassMovable
              0: off
              1: good occluders only: not masked, and large on screen
              2: all opaque (including masked)
              x: use built in heuristic (default is 3)
        r.EarlyZPassOnlyMaterialMasking:
          hint: |-
            Whether to compute materials' mask opacity only in early Z pass. Changing this setting requires restarting the editor.
            Note: Needs r.EarlyZPass == 2 && r.EarlyZPassMovable == 1
        r.EarlyZSortMasked:
          hint: |-
            Sort EarlyZ masked draws to the end of the draw order.
        r.Editor.2DGridFade:
          hint: |-
            Tweak to define the grid rendering in 2D viewports.
        r.Editor.2DSnapFade:
          hint: |-
            Tweak to define the grid rendering in 2D viewports.
        r.Editor.2DSnapMin:
          hint: |-
            Tweak to define the grid rendering in 2D viewports.
        r.Editor.2DSnapScale:
          hint: |-
            Tweak to define the grid rendering in 2D viewports.
        r.Editor.3DGridFade:
          hint: |-
            Tweak to define the grid rendering in 3D viewports.
        r.Editor.3DSnapFade:
          hint: |-
            Tweak to define the grid rendering in 3D viewports.
        r.Editor.AlignedOrthoZoom:
          hint: |-
            Only affects the editor ortho viewports.
             0: Each ortho viewport zoom in defined by the viewport width
             1: All ortho viewport zoom are locked to each other to allow axis lines to be aligned with each other.
        r.Editor.MaxNumInstancesDetails:
          hint: |-
            Maximum number of instances shown in the details panel. Above this value, instances are hidden by default. 
            < 0 : No maximum
        r.Editor.NewLevelGrid:
          hint: |-
            Wether to show the new editor level grid
            0: off
            1: Analytical Antialiasing
            2: Texture based(default)
        r.Editor.SkipSourceControlCheckForEditablePackages:
          hint: |-
            Whether to skip the source control status check for editable packages, 0: Disable (Default), 1: Enable
        r.Editor.TemporalUpsampleDepth:
          hint: |-
            Temporal upsample factor of the depth buffer for depth testing editor primitives against.
        r.Editor.Viewport.HighDPI:
          hint: |-
            Controls whether editor & PIE viewports can be displayed at high DPI.
        r.Editor.Viewport.MaxRenderingResolution:
          hint: |-
            Controls the absolute maximum number of rendered pixel in editor viewports.
        r.Editor.Viewport.MinRenderingResolution:
          hint: |-
            Controls the minimum number of rendered pixel by default in editor viewports.
        r.Editor.Viewport.OverridePIEScreenPercentage:
          hint: |-
            Apply editor viewports' default screen percentage settings to game viewport clients in PIE.
        r.Editor.Viewport.ScreenPercentage:
          hint: |-
            Controls the editor viewports' default screen percentage when using r.Editor.Viewport.ScreenPercentageMode=0.
        r.Editor.Viewport.ScreenPercentageMode.NonRealTime:
          hint: |-
            Controls the default screen percentage mode for non-realtime editor viewports.
        r.Editor.Viewport.ScreenPercentageMode.RealTime:
          hint: |-
            Controls the default screen percentage mode for realtime editor viewports.
        r.EmitMeshDrawEvents:
          hint: |-
            Emits a GPU event around each drawing policy draw call.  /nUseful for seeing stats about each draw call, however it greatly distorts total time and time per draw call.
        r.Emitter.FastPoolEnable:
          hint: |-
            Should we use fast pools for emitters.
             0: Don't pool anything
             1: Pool the emitters bro (default)
        r.Emitter.FastPoolMaxFreeSize:
          hint: |-
            Max free pool size to keep around without cleaning up.
        r.Emitter.SkipRibbonSpawnInterp:
          hint: |-
            Ignore velocity based offsets when interpolating. This prevents ribbon quads from overlapping eachother (default=1)
        r.EmitterSpawnRateScale:
          hint: |-
            A global scale upon the spawn rate of emitters. Emitters can choose to apply or ignore it via their bApplyGlobalSpawnRateScale property.
        r.EnableAsyncComputeTranslucencyLightingVolumeClear:
          hint: |-
            Whether to clear the translucency lighting volume using async compute.
        r.EnableComputeBuildHZB:
          hint: |-
            If zero, build HZB using graphics pipeline.
        r.EnableDebugSpam_GetObjectPositionAndScale:
          hint: |-
            Enables or disables debug log spam for a bug in FParticleSystemSceneProxy::GetObjectPositionAndScale()
        r.EnableFrustumCull:
          hint: |-
            Enables or disables frustum culling.  Useful for comparing results to ensure culling is functioning properly.
        r.EnableMorphTargets:
          hint: |-
            Enable Morph Targets
        r.EnableMultiGPUForkAndJoin:
          hint: |-
            Whether to allow unused GPUs to speedup rendering by sharing work.
        r.EnableStereoEmulation:
          hint: |-
            Emulate stereo rendering
        r.ExpandAllOcclusionTestedBBoxesAmount:
          hint: |-
            Amount to expand all occlusion test bounds by.
        r.ExpandNewlyOcclusionTestedBBoxesAmount:
          hint: |-
            If we don't occlusion test a primitive for r.GFramesNotOcclusionTestedToExpandBBoxes frames, then we expand the BBox when we do occlusion test it for a few frames by this amount. See also r.FramesToExpandNewlyOcclusionTestedBBoxes, r.GFramesNotOcclusionTestedToExpandBBoxes.
        r.ExposureOffset:
          hint: |-
            For adjusting the exposure on top of post process settings and eye adaptation. For developers only. 0:default
        r.ExrReadAndProcessOnGPU:
          hint: |-
            Allows reading of Large Uncompressed EXR files directly into Structured Buffer.
            and be processed on GPU
        r.EyeAdaptation.Basic.Compute:
          hint: |-
            Use Pixel or Compute Shader to compute the basic eye adaptation. 
            = 0 : Pixel Shader
            > 0 : Compute Shader (default) 
        r.EyeAdaptation.BlackHistogramBucketInfluence:
          hint: |-
            This parameter controls how much weight to apply to completely dark 0.0 values in the exposure histogram.
            When set to 1.0, fully dark pixels will accumulate normally, whereas when set to 0.0 fully dark pixels
            will have no influence.
        r.EyeAdaptation.ExponentialTransitionDistance:
          hint: |-
            The auto exposure moves linearly, but when it gets ExponentialTransitionDistance F-stops away from the
            target exposure it switches to as slower exponential function.
        r.EyeAdaptation.LensAttenuation:
          hint: |-
            The camera lens attenuation (q). Set this number to 0.78 for lighting to be unitless (1.0cd/m^2 becomes 1.0 at EV100) or 0.65 to match previous versions (1.0cd/m^2 becomes 1.2 at EV100).
        r.EyeAdaptation.MethodOverride:
          hint: |-
            Override the camera metering method set in post processing volumes
            -2: override with custom settings (for testing Basic Mode)
            -1: no override
             1: Auto Histogram-based
             2: Auto Basic
             3: Manual
        r.EyeAdaptation.PreExposureOverride:
          hint: |-
            Overide the scene pre-exposure by a custom value. 
            = 0 : No override
            > 0 : Override PreExposure
        r.EyeAdaptation.VisualizeDebugType:
          hint: |-
            When enabling Show->Visualize->HDR (Eye Adaptation) is enabled, this flag controls the scene color.
                0: Scene Color after tonemapping (default).
                1: Histogram Debug
        r.EyeAdaptationQuality:
          hint: |-
            Defines the eye adaptation quality which allows to adjust for quality or performance.
            <=0: off (fastest)
              1: low quality (e.g. non histogram based, not yet implemented)
              2: normal quality (default)
              3: high quality (e.g. screen position localized, not yet implemented)
        r.FastBlurThreshold:
          hint: |-
            Defines at what radius the Gaussian blur optimization kicks in (estimated 25% - 40% faster).
            The optimization uses slightly less memory and has a quality loss on smallblur radius.
              0: use the optimization always (fastest, lowest quality)
              3: use the optimization starting at a 3 pixel radius (quite fast)
              7: use the optimization starting at a 7 pixel radius (default)
            >15: barely ever use the optimization (high quality)
        r.FASTBuild.JobProcessor.MaxTimeWithPendingJobs:
          hint: |-
            Specifies how much time in seconds we will wait to have the min amount of pending jobs. Past this time, the build will start anyways.
            Default = 10
        r.FASTBuild.JobProcessor.MinBatchSize:
          hint: |-
            Minimum number of shaders to compile with FASTBuild.
            Default = 100
        r.FASTBuild.JobProcessor.SleepTimeBetweenActions:
          hint: |-
            How much time the job processor thread should sleep between actions .
        r.FASTBuildController.Enabled:
          hint: |-
            Enables or disables the use of FASTBuild to build shaders.
            0: Controller will not be used (shaders will be built locally or using other controllers). 
            1: Distribute builds using FASTBuild.
        r.FASTBuildController.SendAllPossibleShaderDependencies:
          hint: |-
            Send all possible dependencies of the shaders to the remote machines.0: Use dependencies array reported in the task structure.
            1: Brute-force discover all possible dependencies. 
        r.FASTBuildController.SendSCWDebugSymbols:
          hint: |-
            Enable when distributed shader compiler workers crash.
            0: Do not send along debug information in FASTBuild. 
            1: Send along debug information in FASTBuild.
        r.FastVRam.BokehDOF:
          hint: |-
        r.FastVRam.CircleDOF:
          hint: |-
        r.FastVRam.CombineLUTs:
          hint: |-
        r.FastVRam.CustomDepth:
          hint: |-
        r.FastVRam.DBufferA:
          hint: |-
        r.FastVRam.DBufferB:
          hint: |-
        r.FastVRam.DBufferC:
          hint: |-
        r.FastVRam.DBufferMask:
          hint: |-
        r.FastVRam.DistanceFieldAOBentNormal:
          hint: |-
        r.FastVRam.DistanceFieldAODownsampledBentNormal:
          hint: |-
        r.FastVRam.DistanceFieldAOHistory:
          hint: |-
        r.FastVRam.DistanceFieldAOScreenGridResources:
          hint: |-
        r.FastVRam.DistanceFieldCulledObjectBuffers:
          hint: |-
        r.FastVRam.DistanceFieldIrradiance:
          hint: |-
        r.FastVRam.DistanceFieldNormal:
          hint: |-
        r.FastVRam.DistanceFieldShadows:
          hint: |-
        r.FastVRam.DistanceFieldTileIntersectionResources:
          hint: |-
        r.FastVRam.Distortion:
          hint: |-
        r.FastVRam.DOFPostfilter:
          hint: |-
        r.FastVRam.DOFReduce:
          hint: |-
        r.FastVRam.DOFSetup:
          hint: |-
        r.FastVRam.Downsample:
          hint: |-
        r.FastVRam.EyeAdaptation:
          hint: |-
        r.FastVRam.ForwardLightingCullingResources:
          hint: |-
        r.FastVRam.GBufferA:
          hint: |-
        r.FastVRam.GBufferB:
          hint: |-
        r.FastVRam.GBufferC:
          hint: |-
        r.FastVRam.GBufferD:
          hint: |-
        r.FastVRam.GBufferE:
          hint: |-
        r.FastVRam.GBufferF:
          hint: |-
        r.FastVRam.GBufferVelocity:
          hint: |-
        r.FastVRam.GlobalDistanceFieldCullGridBuffers:
          hint: |-
        r.FastVRam.Histogram:
          hint: |-
        r.FastVRam.HistogramReduce:
          hint: |-
        r.FastVRam.HZB:
          hint: |-
        r.FastVRam.MotionBlur:
          hint: |-
        r.FastVRam.PostProcessMaterial:
          hint: |-
        r.FastVRam.SceneColor:
          hint: |-
        r.FastVRam.SceneDepth:
          hint: |-
        r.FastVRam.ScreenSpaceAO:
          hint: |-
        r.FastVRam.ScreenSpaceShadowMask:
          hint: |-
        r.FastVRam.SeparateTranslucency:
          hint: |-
        r.FastVRam.SeparateTranslucencyModulate:
          hint: |-
        r.FastVRam.ShadowCSM:
          hint: |-
        r.FastVRam.ShadowPerObject:
          hint: |-
        r.FastVRam.ShadowPointLight:
          hint: |-
        r.FastVRam.SSR:
          hint: |-
        r.FastVRam.Tonemap:
          hint: |-
        r.FastVRam.Upscale:
          hint: |-
        r.FastVRam.VelocityFlat:
          hint: |-
        r.FastVRam.VelocityMax:
          hint: |-
        r.FastVRam.VolumetricFog:
          hint: |-
        r.FeatureLevelPreview:
          hint: |-
            If 1 the quick settings menu will contain an option to enable feature level preview modes
        r.FilmGrain:
          hint: |-
            Whether to enable film grain.
        r.FilmGrain.CacheTextureConstants:
          hint: |-
            Wether the constants related to the film grain should be cached.
        r.FilmGrain.SequenceLength:
          hint: |-
            Length of the random sequence for film grain (preferably a prime number, default=97).
        r.Filter.LoopMode:
          hint: |-
            Controls when to use either dynamic or unrolled loops to iterates over the Gaussian filtering.
            This passes is used for Gaussian Blur, Bloom and Depth of Field. The dynamic loop allows
            up to 128 samples versus the 32 samples of unrolled loops, but add an additional cost for
            the loop's stop test at every iterations.
             0: Unrolled loop only (default; limited to 32 samples).
             1: Fall back to dynamic loop if needs more than 32 samples.
             2: Dynamic loop only.
        r.Filter.SizeScale:
          hint: |-
            Allows to scale down or up the sample count used for bloom and Gaussian depth of field (scale is clamped to give reasonable results).
            Values down to 0.6 are hard to notice
             1 full quality (default)
             >1 more samples (slower)
             <1 less samples (faster, artifacts with HDR content or boxy results with GaussianDOF)
        r.FinishCurrentFrame:
          hint: |-
            If on, the current frame will be forced to finish and render to the screen instead of being buffered.  This will improve latency, but slow down overall performance.
        r.FlushRHIThreadOnSTreamingTextureLocks:
          hint: |-
            If set to 0, we won't do any flushes for streaming textures. This is safe because the texture streamer deals with these hazards explicitly.
        r.Fog:
          hint: |-
             0: disabled
             1: enabled (default)
        r.FogDensity:
          hint: |-
            Allows to override the FogDensity setting (needs ExponentialFog in the level).
            Using a strong value allows to quickly see which pixel are affected by fog.
            Using a start distance allows to cull pixels are can speed up rendering.
             <0: use default settings (default: -1)
            >=0: override settings by the given value (0:off, 1=very dense fog)
        r.FogStartDistance:
          hint: |-
            Allows to override the FogStartDistance setting (needs ExponentialFog in the level).
             <0: use default settings (default: -1)
            >=0: override settings by the given value (in world units)
        r.FogUseDepthBounds:
          hint: |-
            Allows enable depth bounds optimization on fog full screen pass.
             false: disabled
             true: enabled (default)
        r.ForceAllCoresForShaderCompiling:
          hint: |-
            When set to 1, it will ignore INI settings and launch as many ShaderCompileWorker instances as cores are available.
            Improves shader throughput but for big projects it can make the machine run OOM
        r.ForceDebugViewModes:
          hint: |-
            0: Setting has no effect.
            1: Forces debug view modes to be available, even on cooked builds.2: Forces debug view modes to be unavailable, even on editor builds.  Removes many shader permutations for faster shader iteration.
        r.ForceHighestMipOnUITextures:
          hint: |-
            If set to 1, texutres in the UI Group will have their highest mip level forced.
        r.ForceLOD:
          hint: |-
            LOD level to force, -1 is off.
        r.ForceLODShadow:
          hint: |-
            LOD level to force for the shadow map generation only, -1 is off.
        r.ForceSceneHasDecals:
          hint: |-
            Whether to always assume that scene has decals, so we don't switch depth state conditionally. This can significantly reduce total number of PSOs at a minor GPU cost.
        r.Forward.LightGridPixelSize:
          hint: |-
            Size of a cell in the light grid, in pixels.
        r.Forward.LightGridSizeZ:
          hint: |-
            Number of Z slices in the light grid.
        r.Forward.LightLinkedListCulling:
          hint: |-
            Uses a reverse linked list to store culled lights, removing the fixed limit on how many lights can affect a cell - it becomes a global limit instead.
        r.Forward.MaxCulledLightsPerCell:
          hint: |-
            Controls how much memory is allocated for each cell for light culling.  When r.Forward.LightLinkedListCulling is enabled, this is used to compute a global max instead of a per-cell limit on culled lights.
        r.ForwardShading:
          hint: |-
            Whether to use forward shading on desktop platforms - requires Shader Model 5 hardware.
            Forward shading has lower constant cost, but fewer features supported. 0:off, 1:on
            This rendering path is a work in progress with many unimplemented features, notably only a single reflection capture is applied per object and no translucency dynamic shadow receiving.
        r.FramesToExpandNewlyOcclusionTestedBBoxes:
          hint: |-
            If we don't occlusion test a primitive for r.GFramesNotOcclusionTestedToExpandBBoxes frames, then we expand the BBox when we do occlusion test it for this number of frames. See also r.GFramesNotOcclusionTestedToExpandBBoxes, r.ExpandNewlyOcclusionTestedBBoxesAmount
        r.FreeReflectionScratchAfterUse:
          hint: |-
            Free reflection scratch render targets after use.
        r.FreeSkeletalMeshBuffers:
          hint: |-
            Controls whether skeletal mesh buffers are kept in CPU memory to support merging of skeletal meshes.
            0: Keep buffers(default)
            1: Free buffers
        r.FreezeMouseCursor:
          hint: |-
            Free the mouse cursor position, for passes which use it to display debug information.
            0: default
            1: freeze mouse cursor position at current location
        r.FrustumCullNumWordsPerTask:
          hint: |-
            Performance tweak. Controls the granularity for the ParallelFor for frustum culling.
        r.FullScreenMode:
          hint: |-
            Defines how we do full screen when requested (e.g. command line option -fullscreen or in ini [SystemSettings] fullscreen=true)
             0: normal full screen (renders faster, more control over vsync, less GPU memory, 10bit color if possible)
             1: windowed full screen (quick switch between applications and window mode, slight performance loss)
             any other number behaves like 0
        r.FXAA.Quality:
          hint: |-
            Selects the quality permutation of FXAA.
             0: Console
             1: PC medium-dither 3-sample
             2: PC medium-dither 5-sample
             3: PC medium-dither 8-sample
             4: PC low-dither 12-sample (Default)
             5: PC extrem quality 12-samples
        r.Gamma:
          hint: |-
            Gamma on output
        r.GaussianBloom.Cross:
          hint: |-
            Experimental feature to give bloom kernel a more bright center sample (values between 1 and 3 work without causing aliasing)
            Existing bloom get lowered to match the same brightness
            <0 for a anisomorphic lens flare look (X only)
             0 off (default)
            >0 for a cross look (X and Y)
        r.GBufferDiffuseSampleOcclusion:
          hint: |-
            Whether the gbuffer contain occlusion information for individual diffuse samples.
        r.GBufferFormat:
          hint: |-
            Defines the memory layout used for the GBuffer.
            (affects performance, mostly through bandwidth, quality of normals and material attributes).
             0: lower precision (8bit per component, for profiling)
             1: low precision (default)
             3: high precision normals encoding
             5: high precision
        r.GeneralPurposeTweak:
          hint: |-
            Useful for low level shader development to get quick iteration time without having to change any c++ code.
            Value maps to Frame.GeneralPurposeTweak inside the shaders.
            Example usage: Multiplier on some value to tweak, toggle to switch between different algorithms (Default: 1.0)
            DON'T USE THIS FOR ANYTHING THAT IS CHECKED IN. Compiled out in SHIPPING to make cheating a bit harder.
        r.GeneralPurposeTweak2:
          hint: |-
            Useful for low level shader development to get quick iteration time without having to change any c++ code.
            Value maps to Frame.GeneralPurposeTweak2 inside the shaders.
            Example usage: Multiplier on some value to tweak, toggle to switch between different algorithms (Default: 1.0)
            DON'T USE THIS FOR ANYTHING THAT IS CHECKED IN. Compiled out in SHIPPING to make cheating a bit harder.
        r.GenerateMeshDistanceFields:
          hint: |-
            Whether to build distance fields of static meshes, needed for Lumen Software Ray Tracing and Distance Field AO, which is used to implement Movable SkyLight shadows.
            Enabling will increase mesh build times and memory usage.  Changing this value will cause a rebuild of all static meshes.
        r.GeometryCollection.Nanite:
          hint: |-
            Render geometry collections using Nanite.
        r.GeometryCollectionOptimizedTransforms:
          hint: |-
            Whether to optimize transform update by skipping automatic updates in GPUScene.
        r.GeometryCollectionSetDynamicData.ISPC:
          hint: |-
            Whether to use ISPC optimizations to set dynamic data in geometry collections
        r.GeometryCollectionTripleBufferUploads:
          hint: |-
            Whether to triple buffer geometry collection uploads, which allows Lock_NoOverwrite uploads which are much faster on the GPU with large amounts of data.
        r.GFramesNotOcclusionTestedToExpandBBoxes:
          hint: |-
            If we don't occlusion test a primitive for this many frames, then we expand the BBox when we do occlusion test it for a few frames. See also r.ExpandNewlyOcclusionTestedBBoxesAmount, r.FramesToExpandNewlyOcclusionTestedBBoxes
        r.GlobalDistanceFieldHeightFieldThicknessScale:
          hint: |-
            Thickness of the height field when it's entered into the global distance field, measured in distance field voxels. Defaults to 4 which means 4x the voxel size as thickness.
        r.GlobalIllumination.Denoiser.HistoryConvolution.KernelSpreadFactor:
          hint: |-
            Multiplication factor applied on the kernel sample offset (default=3).
        r.GlobalIllumination.Denoiser.HistoryConvolution.SampleCount:
          hint: |-
            Number of samples to use for history post filter (default = 1).
        r.GlobalIllumination.Denoiser.PreConvolution:
          hint: |-
            Number of pre-convolution passes (default = 1).
        r.GlobalIllumination.Denoiser.ReconstructionSamples:
          hint: |-
            Maximum number of samples for the reconstruction pass (default = 16).
        r.GlobalIllumination.Denoiser.TemporalAccumulation:
          hint: |-
            Accumulates the samples over multiple frames.
        r.gpucrash.collectionenable:
          hint: |-
            Stores GPU crash data from scoped events when a applicable crash debugging system is available.
        r.gpucrash.datadepth:
          hint: |-
            Limits the amount of marker scope depth we record for GPU crash debugging to the given scope depth.
        r.GPUCrashDebugging:
          hint: |-
            Enable vendor specific GPU crash analysis tools
        r.GPUCrashDebugging.Aftermath.Callstack:
          hint: |-
            Enable callstack capture in Aftermath dumps
        r.GPUCrashDebugging.Aftermath.Markers:
          hint: |-
            Enable draw event markers in Aftermath dumps
        r.GPUCrashDebugging.Aftermath.ResourceTracking:
          hint: |-
            Enable resource tracking for Aftermath dumps
        r.GPUCrashDebugging.Aftermath.TrackAll:
          hint: |-
            Enable maximum tracking for Aftermath dumps
        r.GPUCrashDump:
          hint: |-
            Enable vendor specific GPU crash dumps
        r.GPUCrashOnOutOfMemory:
          hint: |-
            Enable crash reporting on GPU OOM
        r.GPUCsvStatsEnabled:
          hint: |-
            Enables or disables GPU stat recording to CSVs
        r.GPUDefrag.AllowOverlappedMoves:
          hint: |-
            Allows defrag relocations that partially overlap themselves.
        r.GPUDefrag.EnableTimeLimits:
          hint: |-
            Limits CPU time spent doing GPU defragmentation.
        r.GPUDefrag.MaxRelocations:
          hint: |-
            Limits the number of total relocations in a frame regardless of number of bytes moved..
        r.GPUMessage.LogAllMessages:
          hint: |-
            Log all messages to the console.
            0: Disabled
            1: Enabled
        r.GPUMessage.MaxBufferSize:
          hint: |-
            Specifies the maximum size of the GPU message buffer, in KiB.
            default: 64
        r.GPUParticle.AFRReinject:
          hint: |-
            Toggle optimization when running in AFR to re-inject particle injections on the next GPU rather than doing a slow GPU->GPU transfer of the texture data
              0: Reinjection off
              1: Reinjection on
        r.GPUParticle.FixDeltaSeconds:
          hint: |-
            GPU particle fix delta seconds.
        r.GPUParticle.FixTolerance:
          hint: |-
            Delta second tolerance before switching to a fix delta seconds.
        r.GPUParticle.MaxNumIterations:
          hint: |-
            Max number of iteration when using a fix delta seconds.
        r.GPUParticle.Simulate:
          hint: |-
            Enable or disable GPU particle simulation
        r.GpuProfilerMaxEventBufferSizeKB:
          hint: |-
            Size of the scratch buffer in kB.
        r.GPUScene.AllowDeferredAllocatorMerges:
          hint: |-
        r.GPUScene.DebugDrawRange:
          hint: |-
            Maximum distance the to draw instance bounds, the default is -1.0 <=> infinite range.
        r.GPUScene.DebugMode:
          hint: |-
            Debug Rendering Mode:
            0 - (show nothing, decault)
             1 - Draw All
             2 - Draw Selected (in the editor)
             3 - Draw Updated (updated this frame)
            You can use r.GPUScene.DebugDrawRange to limit the range
        r.GPUScene.InstanceBVH:
          hint: |-
            Add instances to BVH. (WIP)
        r.GPUScene.InstanceUploadViaCreate:
          hint: |-
            When uploading GPUScene InstanceData, upload via resource creation when the RHI supports it efficiently.
        r.GPUScene.MaxPooledUploadBufferSize:
          hint: |-
            Maximum size of GPU Scene upload buffer size to pool.
        r.GPUScene.ParallelUpdate:
          hint: |-
        r.GPUScene.UploadEveryFrame:
          hint: |-
            Whether to upload the entire scene's primitive data every frame.  Useful for debugging.
        r.GPUScene.ValidateInstanceBuffer:
          hint: |-
            Whether to readback the GPU instance data and assert if it doesn't match the RT primitive data.  Useful for debugging.
        r.GPUScene.ValidatePrimitiveBuffer:
          hint: |-
            Whether to readback the GPU primitive data and assert if it doesn't match the RT primitive data.  Useful for debugging.
        r.GPUSkin.CopyBones.ISPC:
          hint: |-
            Whether to use ISPC optimizations when copying bones for GPU skinning
        r.GPUSkin.Limit2BoneInfluences:
          hint: |-
            Whether to use 2 bones influence instead of default 4/8 for GPU skinning. Cannot be changed at runtime.
        r.GpuSkin.Pool:
          hint: |-
            Should we pool gpu skins.
             0: Don't pool anything
             1: Pool gpu skins bro (default)
        r.GPUSkin.Support16BitBoneIndex:
          hint: |-
            If enabled, a new mesh imported will use 8 bit (if <=256 bones) or 16 bit (if > 256 bones) bone indices for rendering.
        r.GPUSkin.UnlimitedBoneInfluences:
          hint: |-
            Whether to use unlimited bone influences instead of default 4/8 for GPU skinning. Cannot be changed at runtime.
        r.GPUSkin.UnlimitedBoneInfluencesThreshold:
          hint: |-
            Unlimited Bone Influences Threshold to use unlimited bone influences buffer if r.GPUSkin.UnlimitedBoneInfluences is enabled. Should be unsigned int. Cannot be changed at runtime.
        r.GPUStatsChildTimesIncluded:
          hint: |-
            If this is enabled, the child stat timings will be included in their parents' times.
            This presents problems for non-hierarchical stats if we're expecting them to add up
            to the total GPU time, so we probably want this disabled.
        r.GPUStatsEnabled:
          hint: |-
            Enables or disables GPU stat recording
        r.GPUStatsMaxQueriesPerFrame:
          hint: |-
            Limits the number of timestamps allocated per frame. -1 = no limit
        r.GPUTracingStatsEnabled:
          hint: |-
            Enables or disables GPU stat recording to tracing profiler
        r.GraphicsAdapter:
          hint: |-
            User request to pick a specific graphics adapter (e.g. when using a integrated graphics card with a discrete one)
            For Windows D3D, unless a specific adapter is chosen we reject Microsoft adapters because we don't want the software emulation.
            This takes precedence over -prefer{AMD|NVidia|Intel} when the value is >= 0.
             -2: Take the first one that fulfills the criteria
             -1: Favour non integrated because there are usually faster (default)
              0: Adapter #0
              1: Adapter #1, ...
        r.GTAO.Combined:
          hint: |-
            Enable Spatial Filter for GTAO 
             0: Off 
             1: On (default)
        r.GTAO.Downsample:
          hint: |-
            Perform GTAO at Halfres 
             0: Off 
             1: On (default)
        r.GTAO.FalloffEnd:
          hint: |-
            Distance at when the occlusion completes the fall off.  
        r.GTAO.FalloffStartRatio:
          hint: |-
            Ratio of the r.GTAO.FalloffEnd value at which it starts to fall off. 
             Must be Between 0 and 1. 
        r.GTAO.FilterWidth:
          hint: |-
            Size of the noise pattern and filter width
             5: 5x5 Pattern (default) 
             4: 4x4 Pattern 
        r.GTAO.NumAngles:
          hint: |-
            How Many Angles we choose per pixel 
             Must be Between 1 and 16. 
        r.GTAO.PauseJitter:
          hint: |-
            Whether to pause Jitter when Temporal filter is off 
        r.GTAO.SpatialFilter:
          hint: |-
            Enable Spatial Filter for GTAO 
             0: Off 
             1: On (default)
        r.GTAO.TemporalFilter:
          hint: |-
            Enable Temporal Filter for GTAO 
             0: Off 
             1: On (default)
        r.GTAO.ThicknessBlend:
          hint: |-
            A heuristic to bias occlusion for thin or thick objects. 
             0  : Off 
             >0 : On - Bigger values lead to reduced occlusion 
             0.5: On (default)
        r.GTAO.Upsample:
          hint: |-
            Enable Simple or Depth aware upsample filter for GTAO 
             0: Simple 
             1: DepthAware (default)
        r.GTAO.UseNormals:
          hint: |-
            Whether to use GBuffer Normals or Depth Derived normals 
             0: Off 
             1: On (default)
        r.GTSyncType:
          hint: |-
            Determines how the game thread syncs with the render thread, RHI thread and GPU.
            Syncing to the GPU swap chain flip allows for lower frame latency.
             0 - Sync the game thread with the render thread (default).
             1 - Sync the game thread with the RHI thread.
             2 - Sync the game thread with the GPU swap chain flip (only on supported platforms).
        r.HairStrands.AsyncLoad:
          hint: |-
            Allow groom asset to be loaded asynchronously in the editor
        r.HairStrands.Binding:
          hint: |-
            Enable/Disable hair binding, i.e., hair attached to skeletal meshes.
        r.HairStrands.BindingValidation:
          hint: |-
            Enable groom binding validation, which report error/warnings with details about the cause.
        r.HairStrands.Cards:
          hint: |-
            Enable/Disable hair cards rendering. This variable needs to be turned on when the engine starts.
        r.HairStrands.Cards.AtlasWidthScale:
          hint: |-
            Scale the cards resolution along the width
        r.HairStrands.Cards.BulkData.AsyncLoading:
          hint: |-
            Load hair cards/meshes data with async loading so that it is not blocking the rendering thread. This value define the MinLOD at which this happen. Default disabled (-1)
        r.HairStrands.Cards.DebugAtlas:
          hint: |-
            Draw debug hair cards atlas.
        r.HairStrands.Cards.DebugGuides.Render:
          hint: |-
            Draw debug hair cards guides (1: Rest, 2: Deformed).
        r.HairStrands.Cards.DebugGuides.Sim:
          hint: |-
            Draw debug hair sim guides (1: Rest, 2: Deformed).
        r.HairStrands.Cards.DebugIndex:
          hint: |-
            ID of the hair card to debug
        r.HairStrands.Cards.DebugVoxel:
          hint: |-
            Draw debug hair cards voxel datas.
        r.HairStrands.Cards.DynamicAtlasRefresh:
          hint: |-
            Enable dynamic refresh of hair cards texture atlas
        r.HairStrands.Cards.InterpolationType:
          hint: |-
            Hair cards interpolation type: 0: None, 1:physics simulation, 2: RBF deformation
        r.HairStrands.Cards.MaxAtlasSample:
          hint: |-
            Max super sampling count when generating cards atlas texture
        r.HairStrands.Cards.MaxClusterCount:
          hint: |-
            Max number of cluster for debug purpose
        r.HairStrands.Cards.MaxHairStrandsSegmentPerCards:
          hint: |-
            Limit the number of segment which are raytraced during the cards generation
        r.HairStrands.Cards.WidthScale:
          hint: |-
            Scale the cards resolution along the width
        r.HairStrands.CardsAtlas.DefaultResolution:
          hint: |-
            Default cards atlas resolution.
        r.HairStrands.CardsAtlas.DefaultResolution.LOD0:
          hint: |-
            Default cards atlas resolution for LOD0.
        r.HairStrands.CardsAtlas.DefaultResolution.LOD1:
          hint: |-
            Default cards atlas resolution for LOD1.
        r.HairStrands.CardsAtlas.DefaultResolution.LOD2:
          hint: |-
            Default cards atlas resolution for LOD2.
        r.HairStrands.CardsAtlas.DefaultResolution.LOD3:
          hint: |-
            Default cards atlas resolution for LOD3.
        r.HairStrands.CardsAtlas.DefaultResolution.LOD4:
          hint: |-
            Default cards atlas resolution for LOD4.
        r.HairStrands.CardsAtlas.DefaultResolution.LOD5:
          hint: |-
            Default cards atlas resolution for LOD5.
        r.HairStrands.CardsAtlas.DefaultResolution.LOD6:
          hint: |-
            Default cards atlas resolution for LOD6.
        r.HairStrands.CardsAtlas.DefaultResolution.LOD7:
          hint: |-
            Default cards atlas resolution for LOD7.
        r.HairStrands.Cluster.CullingFreezeCamera:
          hint: |-
            Freeze camera when enabled. It will disable HZB culling because hzb buffer is not frozen.
        r.HairStrands.Cluster.Debug:
          hint: |-
            Draw debug the world bounding box of hair clusters used for culling optimisation (0:off, 1:visible cluster, 2:culled cluster, 3:colored LOD, 4:LOD info).
        r.HairStrands.Cluster.ForceLOD:
          hint: |-
            Force a specific hair LOD.
        r.HairStrands.ClusterBuilder.MaxVoxelResolution:
          hint: |-
            Max voxel resolution used when building hair strands cluster data to avoid too long building time (default:128).  
        r.HairStrands.Components.GlobalScattering:
          hint: |-
            Enable/disable hair BSDF component global scattering
        r.HairStrands.Components.LocalScattering:
          hint: |-
            Enable/disable hair BSDF component local scattering
        r.HairStrands.Components.R:
          hint: |-
            Enable/disable hair BSDF component R
        r.HairStrands.Components.TRT:
          hint: |-
            Enable/disable hair BSDF component TRT
        r.HairStrands.Components.TT:
          hint: |-
            Enable/disable hair BSDF component TT
        r.HairStrands.Components.TTModel:
          hint: |-
            Select hair TT model
        r.HairStrands.ComposeAfterTranslucency:
          hint: |-
            0: Compose hair before translucent objects. 1: Compose hair after translucent objects, but before separate translucent objects. 2: Compose hair after all/seperate translucent objects, 3: Compose hair after translucent objects but before translucent render after DOF (which allows depth testing against hair depth)
        r.HairStrands.DDCLog:
          hint: |-
            Enable DDC logging for groom assets and groom binding assets
        r.HairStrands.DebugData.MaxSegmentPerVoxel:
          hint: |-
            Max number of segments per Voxel size when creating debug data.
        r.HairStrands.DebugData.VoxelSize:
          hint: |-
            Voxel size use for creating debug data.
        r.HairStrands.DebugMode:
          hint: |-
            Draw various stats/debug mode about hair rendering
        r.HairStrands.DebugMode.SampleIndex:
          hint: |-
            Debug value for a given sample index (default:-1, i.e., average sample information).
        r.HairStrands.DebugMode.Tangent:
          hint: |-
            Draw debug tangent for hair strands and hair cards.
        r.HairStrands.DebugMode.Tangent.TileSize:
          hint: |-
            Draw debug tangent - Grid size for drawing debug tangent
        r.HairStrands.DeepShadow.AABBScale:
          hint: |-
            Scaling value for loosing/tighting deep shadow bounding volume
        r.HairStrands.DeepShadow.DebugDOMIndex:
          hint: |-
            Index of the DOM texture to draw
        r.HairStrands.DeepShadow.DebugDOMScale:
          hint: |-
            Scaling value for the DeepOpacityMap when drawing the deep shadow stats
        r.HairStrands.DeepShadow.DebugMode:
          hint: |-
            Color debug mode for deep shadow
        r.HairStrands.DeepShadow.DensityScale:
          hint: |-
            Set density scale for compensating the lack of hair fiber in an asset
        r.HairStrands.DeepShadow.DepthBiasScale:
          hint: |-
            Set depth bias scale for transmittance computation
        r.HairStrands.DeepShadow.GPUDriven:
          hint: |-
            Enable deep shadow to be driven by GPU bounding box, rather CPU ones. This allows more robust behavior
        r.HairStrands.DeepShadow.InjectVoxelDepth:
          hint: |-
            Inject voxel content to generate the deep shadow map instead of rasterizing groom. This is an experimental path
        r.HairStrands.DeepShadow.KernelAperture:
          hint: |-
            Set the aperture angle, in degree, used by the kernel for evaluating the hair transmittance when using PCSS kernel
        r.HairStrands.DeepShadow.KernelType:
          hint: |-
            Set the type of kernel used for evaluating hair transmittance, 0:linear, 1:PCF_2x2, 2: PCF_6x4, 3:PCSS, 4:PCF_6x6_Accurate
        r.HairStrands.DeepShadow.MaxFrustumAngle:
          hint: |-
            Max deep shadow frustum angle to avoid strong deformation. Default:90
        r.HairStrands.DeepShadow.MipTraversal:
          hint: |-
            Evaluate transmittance using mip-map traversal (faster).
        r.HairStrands.DeepShadow.RandomType:
          hint: |-
            Change how traversal jittering is initialized. Valid value are 0, 1, and 2. Each type makes different type of tradeoff.
        r.HairStrands.DeepShadow.Resolution:
          hint: |-
            Shadow resolution for Deep Opacity Map rendering. (default = 2048)
        r.HairStrands.DeepShadow.ShadowMaskKernelType:
          hint: |-
            Set the kernel type for filtering shadow cast by hair on opaque geometry (0:2x2, 1:4x4, 2:Gaussian8, 3:Gaussian16, 4:Gaussian8 with transmittance. Default is 4
        r.HairStrands.DeepShadow.ShadowMaskPassType:
          hint: |-
            Change how shadow mask from hair onto opaque geometry is generated. 0: one pass per hair group, 1: one pass for all groups.
        r.HairStrands.DeepShadow.SuperSampling:
          hint: |-
            Evaluate transmittance with supersampling. This is expensive and intended to be used only in cine mode.
        r.HairStrands.DOFDepth:
          hint: |-
            Compose hair with DOF by lerping hair depth based on its opacity.
        r.HairStrands.DualScatteringRoughness:
          hint: |-
            Override all roughness for the dual scattering evaluation. 0 means no override. Default:0
        r.HairStrands.Dump:
          hint: |-
            Dump all the loaded groom assets, groom binding assets, and instanciated groom components.
        r.HairStrands.Dump.GroomAsset:
          hint: |-
            Dump information of all the loaded groom assets.
        r.HairStrands.Dump.GroomBindingAsset:
          hint: |-
            Dump information of all the loaded groom binding assets.
        r.HairStrands.Dump.GroomComponent:
          hint: |-
            Dump information of all active groom components.
        r.HairStrands.Enable:
          hint: |-
            Enable/Disable the entire hair strands system. This affects all geometric representations (i.e., strands, cards, and meshes).
        r.HairStrands.EnableAdaptiveSubsteps:
          hint: |-
            Enable adaptive solver substeps
        r.HairStrands.HairGroupBuilder.MaxVoxelResolution:
          hint: |-
            Max voxel resolution used when voxelizing hair strands to transfer group index grom strands to cards. This avoids too long building time (default:64).  
        r.HairStrands.HairLUT.AbsorptionCount:
          hint: |-
            Change the number of slices of the hair LUT for the absorption axis
        r.HairStrands.HairLUT.IncidentAngleCount:
          hint: |-
            Change the number of slices of the hair LUT for the incident angle axis
        r.HairStrands.HairLUT.RoughnessCount:
          hint: |-
            Change the number of slices of the hair LUT for the roughness axis
        r.HairStrands.HairLUT.SampleCountScale:
          hint: |-
            Change the number of sample used for computing the hair LUT. This is a multiplier, default is 1.
        r.HairStrands.Interoplation.FrustumCulling:
          hint: |-
            Swap rendering buffer at the end of frame. This is an experimental toggle. Default:1
        r.HairStrands.Interpolation.Debug:
          hint: |-
            Enable debug rendering for hair interpolation
        r.HairStrands.InterpolationMetric.Angle:
          hint: |-
            Hair strands interpolation metric weights for angle
        r.HairStrands.InterpolationMetric.AngleAttenuation:
          hint: |-
            Hair strands interpolation angle attenuation
        r.HairStrands.InterpolationMetric.Distance:
          hint: |-
            Hair strands interpolation metric weights for distance
        r.HairStrands.InterpolationMetric.Length:
          hint: |-
            Hair strands interpolation metric weights for length
        r.HairStrands.LightFunction:
          hint: |-
            Enables Light function on hair
        r.HairStrands.LightSampleFormat:
          hint: |-
            Define the format used for storing the lighting of hair samples (0: RGBA-16bits, 1: RGB-11.11.10bits)
        r.HairStrands.LoadAsset:
          hint: |-
            Allow groom asset to be loaded
        r.HairStrands.Log:
          hint: |-
            Enable warning log report for groom related asset (0: no logging, 1: error only, 2: error & warning only, other: all logs). By default all logging are enabled (-1). Value needs to be set at startup time.
        r.HairStrands.Log.BindingBuilderWarning:
          hint: |-
            Enable/disable warning during groom binding builder
        r.HairStrands.ManualSkinCache:
          hint: |-
            If skin cache is not enabled, and grooms use skinning method, this enable a simple skin cache mechanisme for groom. Default:disable
        r.HairStrands.MaterialCompaction.DepthThreshold:
          hint: |-
            Compaction threshold for depth value for material compaction (in centimeters). Default 1 cm.
        r.HairStrands.MaterialCompaction.TangentThreshold:
          hint: |-
            Compaciton threshold for tangent value for material compaction (in degrees). Default 10 deg.
        r.HairStrands.MaxSimulatedLOD:
          hint: |-
            Maximum hair LOD to be simulated
        r.HairStrands.Meshes:
          hint: |-
            Enable/Disable hair meshes rendering. This variable needs to be turned on when the engine starts.
        r.HairStrands.MeshProjection.DebugInUVsSpace:
          hint: |-
            Render debug mes projection in UVs space
        r.HairStrands.MeshProjection.DebugSkinCache:
          hint: |-
            Render debug mes projection
        r.HairStrands.MeshProjection.Render.Deformed.Frames:
          hint: |-
            Render debug mes projection
        r.HairStrands.MeshProjection.Render.Deformed.Triangles:
          hint: |-
            Render debug mes projection
        r.HairStrands.MeshProjection.Render.Rest.Frames:
          hint: |-
            Render debug mes projection
        r.HairStrands.MeshProjection.Render.Rest.Triangles:
          hint: |-
            Render debug mes projection
        r.HairStrands.MeshProjection.Sim.Deformed.Frames:
          hint: |-
            Render debug mes projection
        r.HairStrands.MeshProjection.Sim.Deformed.Triangles:
          hint: |-
            Render debug mes projection
        r.HairStrands.MeshProjection.Sim.Rest.Frames:
          hint: |-
            Render debug mes projection
        r.HairStrands.MeshProjection.Sim.Rest.Triangles:
          hint: |-
            Render debug mes projection
        r.HairStrands.MinLOD:
          hint: |-
            Clamp the min hair LOD to this value, preventing to reach lower/high-quality LOD.
        r.HairStrands.PathTracing.InvalidationDebug:
          hint: |-
            Enable bounding box drawing for groom element causing path tracer invalidation
        r.HairStrands.PathTracing.InvalidationThreshold:
          hint: |-
            Define the minimal distance to invalidate path tracer output when groom changes (in cm, default: 0.5mm)
            Set to a negative value to disable this feature
        r.HairStrands.PlotBsdf:
          hint: |-
            Debug view for visualizing hair BSDF.
        r.HairStrands.PlotBsdf.BaseColor:
          hint: |-
            Change the base color / absorption of the debug BSDF plot.
        r.HairStrands.PlotBsdf.Exposure:
          hint: |-
            Change the exposure of the plot.
        r.HairStrands.PlotBsdf.Roughness:
          hint: |-
            Change the roughness of the debug BSDF plot.
        r.HairStrands.Projection.MaxTrianglePerIteration:
          hint: |-
            Change the number of triangles which are iterated over during one projection iteration step. In kilo triangle (e.g., 8 == 8000 triangles). Default is 8.
        r.HairStrands.RasterizationScale:
          hint: |-
            Rasterization scale to snap strand to pixel
        r.HairStrands.Raytracing:
          hint: |-
            Enable/Disable hair strands raytracing geometry. This is anopt-in option per groom asset/groom instance.
        r.HairStrands.RaytracingProceduralSplits:
          hint: |-
            Change how many AABBs are used per hair segment to balance between BVH build cost and ray tracing performance. (default: 4)
        r.HairStrands.RaytracingRadiusScale:
          hint: |-
            Override the per instance scale factor for raytracing hair strands geometry (0: disabled, >0:enabled)
        r.HairStrands.RectLightingOptim:
          hint: |-
            Hair Visibility use projected view rect to light only relevant pixels
        r.HairStrands.ScatterSceneLighting:
          hint: |-
            Enable scene color lighting scattering into hair (valid for short hair only).
        r.HairStrands.Selection.CoverageThreshold:
          hint: |-
            Coverage threshold for making hair strands outline selection finer
        r.HairStrands.Shadow.CastShadowWhenNonVisible:
          hint: |-
            Enable shadow casting for hair strands even when culled out from the primary view
        r.HairStrands.Shadow.CullPerObjectShadowCaster:
          hint: |-
            Enable CPU culling of object casting per-object shadow (stationnary object)
        r.HairStrands.ShadowRasterizationScale:
          hint: |-
            Rasterization scale to snap strand to pixel in shadow view
        r.HairStrands.Simulation:
          hint: |-
            Enable/disable hair simulation
        r.HairStrands.Simulation.ResetAll:
          hint: |-
            Reset hair strands simulation on all groom components.
        r.HairStrands.SimulationMaxDelay:
          hint: |-
            Maximum tick Delay before starting the simulation
        r.HairStrands.SimulationRestUpdate:
          hint: |-
            Update the simulation rest pose
        r.HairStrands.SkyAO:
          hint: |-
            Enable (sky) AO on hair.
        r.HairStrands.SkyAO.DistanceThreshold:
          hint: |-
            Max distance for occlusion search.
        r.HairStrands.SkyAO.SampleCount:
          hint: |-
            Number of samples used for evaluating hair AO (default is set to 16).
        r.HairStrands.SkyLighting:
          hint: |-
            Enable sky lighting on hair.
        r.HairStrands.SkyLighting.ConeAngle:
          hint: |-
            Cone angle for tracing sky lighting on hair.
        r.HairStrands.SkyLighting.DebugSample:
          hint: |-
            Enable debug view for visualizing sample used for the sky integration
        r.HairStrands.SkyLighting.DistanceThreshold:
          hint: |-
            Max distance for occlusion search.
        r.HairStrands.SkyLighting.IntegrationType:
          hint: |-
            Hair env. lighting integration type (0:Adhoc, 1:Uniform.
        r.HairStrands.SkyLighting.SampleCount:
          hint: |-
            Number of samples used for evaluating multiple scattering and visible area (default is set to 16).
        r.HairStrands.SkyLighting.TransmissionDensityScale:
          hint: |-
            Density scale for controlling how much sky lighting is transmitted.
        r.HairStrands.SkyLighting.UseViewHairCount:
          hint: |-
            Use the view hair count texture for estimating background transmitted light (enabled by default).
        r.HairStrands.StableRasterizationScale:
          hint: |-
            Rasterization scale to snap strand to pixel for 'stable' hair option. This value can't go below 1.
        r.HairStrands.Strands:
          hint: |-
            Enable/Disable hair strands rendering
        r.HairStrands.Strands.BulkData.AsyncLoading:
          hint: |-
            Load hair strands data with async loading so that it is not blocking the rendering thread. This value define the MinLOD at which this happen. Default disabled (-1)
        r.HairStrands.Strands.BulkData.ReleaseAfterUse:
          hint: |-
            Release CPU bulk data once hair groom/groom binding asset GPU resources are created. This saves memory
        r.HairStrands.Strands.BulkData.Validation:
          hint: |-
            Validate some hair strands data at serialization/loading time.
        r.HairStrands.Strands.DebugControlPoint:
          hint: |-
            Draw debug hair strands control points).
        r.HairStrands.Strands.Raytracing.ForceRebuildBVH:
          hint: |-
            Force BVH rebuild instead of doing a BVH refit when hair positions changed
        r.HairStrands.Strands.TransferPrevPos:
          hint: |-
            Transfer strands prev. position to current position on LOD switching to avoid large discrepancy causing large motion vector
        r.HairStrands.StrandsMode:
          hint: |-
            Render debug mode for hair strands. 0:off, 1:simulation strands, 2:render strands with colored simulation strands influence, 3:hair UV, 4:hair root UV, 5: hair seed, 6: dimensions
        r.HairStrands.StrandWidth:
          hint: |-
            Width of hair strand
        r.HairStrands.Streaming.Prediction:
          hint: |-
            Enable LOD streaming prediction.
        r.HairStrands.SwapType:
          hint: |-
            Swap rendering buffer at the end of frame. This is an experimental toggle. Default:1
        r.HairStrands.Textures.DilationCount:
          hint: |-
            Number of dilation pass run onto the generated hair strands textures (Default:8).
        r.HairStrands.Tile:
          hint: |-
            Enable tile generation & usage for hair strands.
        r.HairStrands.UseCardsInsteadOfStrands:
          hint: |-
            Force cards geometry on all groom elements. If no cards data is available, nothing will be displayed
        r.HairStrands.UseGPUPositionOffset:
          hint: |-
            Use GPU position offset to improve hair strands position precision.
        r.HairStrands.UseProxyLocalToWorld:
          hint: |-
            Enable the use of the groom proxy local to world instead of extracting it from the game thread.
        r.HairStrands.VelocityMagnitudeScale:
          hint: |-
            Velocity magnitude (in pixel) at which a hair will reach its pic velocity-rasterization-scale under motion to reduce aliasing. Default is 100.
        r.HairStrands.VelocityRasterizationScale:
          hint: |-
            Rasterization scale to snap strand to pixel under high velocity
        r.HairStrands.VelocityThreshold:
          hint: |-
            Threshold value (in pixel) above which a pixel is forced to be resolve with responsive AA (in order to avoid smearing). Default is 3.
        r.HairStrands.VelocityType:
          hint: |-
            Type of velocity filtering (0:avg, 1:closest, 2:max). Default is 1.
        r.HairStrands.Visibility.Clear:
          hint: |-
            Clear hair strands visibility buffer
        r.HairStrands.Visibility.ComputeRaster:
          hint: |-
            Hair Visiblity uses raster compute.
        r.HairStrands.Visibility.ComputeRaster.MaxPixelCount:
          hint: |-
            Define the maximal length rasterize in compute.
        r.HairStrands.Visibility.ComputeRaster.SamplePerPixel:
          hint: |-
            Define the number of sampler per pixel using raster compute.
        r.HairStrands.Visibility.ComputeRaster.Stochastic:
          hint: |-
            Enable stochastic compute rasterization (faster, but more prone to aliasting). Experimental.
        r.HairStrands.Visibility.FullCoverageThreshold:
          hint: |-
            Define the coverage threshold at which a pixel is considered fully covered.
        r.HairStrands.Visibility.HairCount.DistanceThreshold:
          hint: |-
            Distance threshold defining if opaque depth get injected into the 'view-hair-count' buffer.
        r.HairStrands.Visibility.MSAA.MeanSamplePerPixel:
          hint: |-
            Scale the numer of sampler per pixel for limiting memory allocation (0..1, default 0.5f)
        r.HairStrands.Visibility.MSAA.SamplePerPixel:
          hint: |-
            Hair strands visibility sample count (2, 4, or 8)
        r.HairStrands.Visibility.PPLL:
          hint: |-
            Hair Visibility uses per pixel linked list
        r.HairStrands.Visibility.PPLL.Debug:
          hint: |-
            Draw debug per pixel light list rendering.
        r.HairStrands.Visibility.PPLL.MeanSamplePerPixel:
          hint: |-
            Scale the maximum number of node allowed for all linked list element (0..1, default 1). It will be width*height*SamplerPerPixel*Scale.
        r.HairStrands.Visibility.PPLL.SamplePerPixel:
          hint: |-
            The maximum number of node allowed to be independently shaded and composited per pixel. Total amount of node will be width*height*VisibilityPPLLMaxRenderNodePerPixel. The last node is used to aggregate all furthest strands to shade into a single one.
        r.HairStrands.Visibility.SortByDepth:
          hint: |-
            Sort hair fragment by depth and update their coverage based on ordered transmittance.
        r.HairStrands.Visibility.UseCoverageMappping:
          hint: |-
            Use hair count to coverage transfer function.
        r.HairStrands.Visibility.WriteVelocityCoverageThreshold:
          hint: |-
            Define the coverage threshold at which a pixel write its hair velocity (default: 0, i.e., write for all pixel)
        r.HairStrands.Voxelization:
          hint: |-
            Enable hair voxelization for transmittance evaluation
        r.HairStrands.Voxelization.AABBScale:
          hint: |-
            Scale the hair macro group bounding box
        r.HairStrands.Voxelization.DensityScale:
          hint: |-
            Scale the hair density when computing voxel transmittance. Default value is 2 (arbitraty)
        r.HairStrands.Voxelization.DensityScale.AO:
          hint: |-
            Scale the hair density when computing voxel AO. (Default:-1, it will use the global density scale
        r.HairStrands.Voxelization.DensityScale.Environment:
          hint: |-
            Scale the hair density when computing voxel environment. (Default:-1, it will use the global density scale
        r.HairStrands.Voxelization.DensityScale.Raytracing:
          hint: |-
            Scale the hair density when computing voxel raytracing. (Default:-1, it will use the global density scale
        r.HairStrands.Voxelization.DensityScale.Shadow:
          hint: |-
            Scale the hair density when computing voxel shadow. (Default:-1, it will use the global density scale
        r.HairStrands.Voxelization.DensityScale.Transmittance:
          hint: |-
            Scale the hair density when computing voxel transmittance. (Default:-1, it will use the global density scale
        r.HairStrands.Voxelization.DepthBiasScale.Environment:
          hint: |-
            Set depth bias for voxel ray marching for environement lights. Offset the origin position towards the light
        r.HairStrands.Voxelization.DepthBiasScale.Light:
          hint: |-
            Set depth bias for voxel ray marching for analyticaly light. Offset the origin position towards the light for transmittance computation
        r.HairStrands.Voxelization.DepthBiasScale.Shadow:
          hint: |-
            Set depth bias for voxel ray marching for analyticaly light. Offset the origin position towards the light for shadow computation
        r.HairStrands.Voxelization.DepthBiasScale.Transmittance:
          hint: |-
            Set depth bias for voxel ray marching for analyticaly light. Offset the origin position towards the light for transmittance computation
        r.HairStrands.Voxelization.ForceTransmittanceAndShadow:
          hint: |-
            For transmittance and shadow to be computed with density volume. This requires voxelization is enabled.
        r.HairStrands.Voxelization.GPUDriven:
          hint: |-
            Enable GPU driven voxelization.
        r.HairStrands.Voxelization.GPUDriven.MaxPageIndexResolution:
          hint: |-
            Max resolution of the page index. This is used for allocating a conservative page index buffer when GPU driven allocation is enabled.
        r.HairStrands.Voxelization.InjectOpaque.BiasCount:
          hint: |-
            Bias, in number of voxel, at which opaque depth is injected.
        r.HairStrands.Voxelization.InjectOpaque.MarkCount:
          hint: |-
            Number of voxel marked as opaque starting along the view direction beneath the opaque surface.
        r.HairStrands.Voxelization.InjectOpaqueDepth:
          hint: |-
            Inject opaque geometry depth into the voxel volume for acting as occluder.
        r.HairStrands.Voxelization.Raymarching.SteppingScale:
          hint: |-
            Stepping scale used for raymarching the voxel structure for shadow.
        r.HairStrands.Voxelization.Raymarching.SteppingScale.Environment:
          hint: |-
            Stepping scale used for raymarching the voxel structure, override scale for env. lighting (default -1).
        r.HairStrands.Voxelization.Raymarching.SteppingScale.Raytracing:
          hint: |-
            Stepping scale used for raymarching the voxel structure, override scale for raytracing (default -1).
        r.HairStrands.Voxelization.Raymarching.SteppingScale.Shadow:
          hint: |-
            Stepping scale used for raymarching the voxel structure, override scale for shadow (default -1).
        r.HairStrands.Voxelization.Raymarching.SteppingScale.Transmission:
          hint: |-
            Stepping scale used for raymarching the voxel structure, override scale for transmittance (default -1).
        r.HairStrands.Voxelization.UseIndiretScatterPageAllocate:
          hint: |-
            Enable indirect scatter page allocation (faster).
        r.HairStrands.Voxelization.Virtual:
          hint: |-
            Enable the two voxel hierachy.
        r.HairStrands.Voxelization.Virtual.Adaptive:
          hint: |-
            Enable adaptive voxel allocation (default = 1)
        r.HairStrands.Voxelization.Virtual.Adaptive.CorrectionSpeed:
          hint: |-
            Define the speed at which allocation adaption runs (value in 0..1, default = 0.25). A higher number means faster adaptation, but with a risk of oscillation i.e. over and under allocation
        r.HairStrands.Voxelization.Virtual.Adaptive.CorrectionThreshold:
          hint: |-
            Define the allocation margin to limit over allocation (value in 0..1, default = 0.95)
        r.HairStrands.Voxelization.Virtual.ComputeRasterMaxVoxelCount:
          hint: |-
            Max number of voxel which are rasterized for a given hair segment. This is for debug purpose only.
        r.HairStrands.Voxelization.Virtual.DebugTraversalType:
          hint: |-
            Traversal mode (0:linear, 1:mip) for debug voxel visualization.
        r.HairStrands.Voxelization.Virtual.DrawDebugPage:
          hint: |-
            When voxel debug rendering is enable 1: render the page bounds, instead of the voxel 2: the occupancy within the page (i.e., 8x8x8 brick)
        r.HairStrands.Voxelization.Virtual.ForceMipLevel:
          hint: |-
            Force a particular mip-level
        r.HairStrands.Voxelization.Virtual.InvalidateEmptyPageIndex:
          hint: |-
            Invalid voxel page index which does not contain any voxelized data.
        r.HairStrands.Voxelization.Virtual.Jitter:
          hint: |-
            Change jittered for voxelization/traversal. 0: No jitter 1: Regular randomized jitter: 2: Constant Jitter (default = 1)
        r.HairStrands.Voxelization.Virtual.UseDirectPageAllocation:
          hint: |-
            Use the indirect page allocation code path, but force internally direct page allocation (for debugging purpose only).
        r.HairStrands.Voxelization.Virtual.VoxelPageCountPerDim:
          hint: |-
            Number of voxel pages per texture dimension. The voxel page memory is allocated with a 3D texture. This value provide the resolution of this texture.
        r.HairStrands.Voxelization.Virtual.VoxelPageResolution:
          hint: |-
            Resolution of a voxel page.
        r.HairStrands.Voxelization.Virtual.VoxelWorldSize:
          hint: |-
            World size of a voxel in cm.
        r.HairStrands.VoxelizationRasterizationScale:
          hint: |-
            Rasterization scale to snap strand to pixel for voxelization
        r.HairStrands.WriteGBufferData:
          hint: |-
            Write hair hair material data into GBuffer before post processing run. 0: no write, 1: dummy write into GBuffer A/B (Normal/ShadingModel), 2: write into GBuffer A/B (Normal/ShadingModel). 2: Write entire GBuffer data. (default 1).
        r.HDR.Display.ColorGamut:
          hint: |-
            Color gamut of the output display:
            0: Rec709 / sRGB, D65 (default)
            1: DCI-P3, D65
            2: Rec2020 / BT2020, D65
            3: ACES, D60
            4: ACEScg, D60
        r.HDR.Display.OutputDevice:
          hint: |-
            Device format of the output display:
            0: sRGB (LDR)
            1: Rec709 (LDR)
            2: Explicit gamma mapping (LDR)
            3: ACES 1000 nit ST-2084 (Dolby PQ) (HDR)
            4: ACES 2000 nit ST-2084 (Dolby PQ) (HDR)
            5: ACES 1000 nit ScRGB (HDR)
            6: ACES 2000 nit ScRGB (HDR)
            7: Linear EXR (HDR)
            8: Linear final color, no tone curve (HDR)
            9: Linear final color with tone curve
        r.HDR.EnableHDROutput:
          hint: |-
            Creates an HDR compatible swap-chain and enables HDR display output.0: Disabled (default)
            1: Enable hardware-specific implementation
        r.HDR.UI.CompositeMode:
          hint: |-
            Mode used when compositing the UI layer:
            0: Standard compositing
            1: Shader pass to improve HDR blending
        r.HDR.UI.Level:
          hint: |-
            Luminance level for UI elements when compositing into HDR framebuffer (default: 1.0).
        r.HeightFields.AtlasDimInTiles:
          hint: |-
            Number of tiles the atlas has in one dimension
        r.HeightFields.AtlasDownSampleLevel:
          hint: |-
            Max number of times a suballocation can be down-sampled
        r.HeightFields.AtlasTileSize:
          hint: |-
            Suballocation granularity
        r.HeightFields.VisibilityAtlasDimInTiles:
          hint: |-
            Number of tiles the atlas has in one dimension
        r.HeightFields.VisibilityAtlasDownSampleLevel:
          hint: |-
            Max number of times a suballocation can be down-sampled
        r.HeightFields.VisibilityAtlasTileSize:
          hint: |-
            Suballocation granularity
        r.HeightFieldShadowing:
          hint: |-
            Whether the height field shadowing feature is allowed.
        r.HFShadowAverageObjectsPerCullTile:
          hint: |-
            Determines how much memory should be allocated in height field object culling data structures.  Too much = memory waste, too little = flickering due to buffer overflow.
        r.HFShadowQuality:
          hint: |-
            Defines the height field shadow method which allows to adjust for quality or performance.
             0:off, 1:low (8 steps), 2:medium (16 steps, default), 3:high (32 steps, hole aware)
        r.HighQualityLightMaps:
          hint: |-
            If set to 1, allow high quality lightmaps which don't bake in direct lighting of stationary lights
        r.HighResScreenshot.AdditionalCmds:
          hint: |-
            Additional command to execute when a high res screenshot is requested.
        r.HighResScreenshotDelay:
          hint: |-
            When high-res screenshots are requested there is a small delay to allow temporal effects to converge.
            Default: 4. Using a value below the default will disable TemporalAA for improved image quality.
        r.Histogram.UseAtomic:
          hint: |-
            Uses atomic to speed up the generation of the histogram.
        r.HLOD.DistanceOverride:
          hint: |-
            If non-zero, overrides the distance that HLOD transitions will take place for all objects at the HLOD level index, formatting is as follows:
            'r.HLOD.DistanceOverride 5000, 10000, 20000' would result in HLOD levels 0, 1 and 2 transitioning at 5000, 1000 and 20000 respectively.
        r.HLOD.DistanceOverrideScale:
          hint: |-
            Scales the value in r.HLOD.DistanceOverride, Default off.
            This is an optional scale intended to allow game logic to dynamically modify without impacting scalability.
        r.HLOD.DitherPauseTime:
          hint: |-
            HLOD dither pause time in seconds
        r.HLOD.ForceDisableCastDynamicShadow:
          hint: |-
            If non-zero, will set bCastDynamicShadow to false for all LODActors, regardless of the shadowing setting of their subactors.
        r.HLOD.MaximumLevel:
          hint: |-
            How far down the LOD hierarchy to allow showing (can be used to limit quality loss and streaming texture memory usage on high scalability settings)
            -1: No maximum level (default)
            0: Prevent ever showing a HLOD cluster instead of individual meshes
            1: Allow only the first level of HLOD clusters to be shown
            2+: Allow up to the Nth level of HLOD clusters to be shown
        r.HZB.BuildUseCompute:
          hint: |-
            Selects whether HZB should be built with compute.
        r.HZBOcclusion:
          hint: |-
            Defines which occlusion system is used.
             0: Hardware occlusion queries
             1: Use HZB occlusion system (default, less GPU and CPU cost, more conservative results) 2: Force HZB occlusion system (overrides rendering platform preferences)
        r.IncludeNonVirtualTexturedLightmaps:
          hint: |-
            If 'r.VirtualTexturedLightmaps' is enabled, controls whether non-VT lightmaps are generated/saved as well.
            Including non-VT lightmaps will constrain lightmap atlas size, which removes some of the benefit of VT lightmaps.
             0: Not included.
             1: Included.
        r.IndirectLightingCache:
          hint: |-
            Whether to use the indirect lighting cache on dynamic objects.  0 is off, 1 is on (default)
        r.InstanceCulling.AllowBatchedBuildRenderingCommands:
          hint: |-
            Whether to allow batching BuildRenderingCommands for GPU instance culling
        r.InstanceCulling.AllowInstanceOrderPreservation:
          hint: |-
            Whether or not to allow instances to preserve instance draw order using GPU compaction.
        r.InstanceCulling.OcclusionCull:
          hint: |-
            Whether to do per instance occlusion culling for GPU instance culling.
        r.IrisNormal:
          hint: |-
            0 to disable iris normal.
             0: off
             1: on
        r.KeepOverrideVertexColorsOnCPU:
          hint: |-
            Keeps a CPU copy of override vertex colors.  May be required for some blueprints / object spawning.
        r.KeepPreCulledIndicesThreshold:
          hint: |-
        r.LandscapeLOD0DistributionScale:
          hint: |-
            Multiplier for the landscape LOD0DistributionSetting property
        r.LandscapeLODDistributionScale:
          hint: |-
            Multiplier for the landscape LODDistributionSetting property
        r.LensFlareQuality:
          hint: |-
             0: off but best for performance
             1: low quality with good performance
             2: good quality (default)
             3: very good quality but bad performance
        r.LightCulling.MaxDistanceOverrideKilometers:
          hint: |-
            Used to override the maximum far distance at which we can store data in the light grid.
             If this is increase, you might want to update r.Forward.LightGridSizeZ to a reasonable value according to your use case light count and distribution. <=0: off 
             >0: the far distance in kilometers.
        r.LightCulling.Quality:
          hint: |-
            Whether to run compute light culling pass.
             0: off 
             1: on (default)
        r.LightFunctionQuality:
          hint: |-
            Defines the light function quality which allows to adjust for quality or performance.
            <=0: off (fastest)
              1: low quality (e.g. half res with blurring, not yet implemented)
              2: normal quality (default)
              3: high quality (e.g. super-sampled or colored, not yet implemented)
        r.LightMaxDrawDistanceScale:
          hint: |-
            Scale applied to the MaxDrawDistance of lights.  Useful for fading out local lights more aggressively on some platforms.
        r.LightShaftAllowTAA:
          hint: |-
            Allows temporal filtering for lightshafts.
              0: off
              1: on (default)
        r.LightShaftBlurPasses:
          hint: |-
            Number of light shaft blur passes.
        r.LightShaftDownSampleFactor:
          hint: |-
            Downsample factor for light shafts. range: 1..8
        r.LightShaftFirstPassDistance:
          hint: |-
            Fraction of the distance to the light to blur on the first radial blur pass.
        r.LightShaftNumSamples:
          hint: |-
            Number of samples per light shaft radial blur pass.  Also affects how quickly the blur distance increases with each pass.
        r.LightShaftQuality:
          hint: |-
            Defines the light shaft quality (mobile and non mobile).
              0: off
              1: on (default)
        r.LightShaftRenderToSeparateTranslucency:
          hint: |-
            If enabled, light shafts will be rendered to the separate translucency buffer.
            This ensures postprocess materials with BL_BeforeTranslucnecy are applied before light shafts
        r.LimitRenderingFeatures:
          hint: |-
            Allows to quickly reduce render feature to increase render performance.
            This is just a quick way to alter multiple show flags and console variables in the game
            Disabled more feature the higher the number
             <=0:off, order is defined in code (can be documented here when we settled on an order)
        r.LocalExposure:
          hint: |-
            Whether to support local exposure
        r.LocalExposure.VisualizeDebugMode:
          hint: |-
            When enabling Show->Visualize->Local Exposure is enabled, this flag controls which mode to use.
                0: Local Exposure
                1: Base Luminance
                2: Detail Luminance
        r.LODFadeTime:
          hint: |-
            How long LOD takes to fade (in seconds).
        r.LogShaderCompilerStats:
          hint: |-
            When set to 1, Log detailed shader compiler stats.
        r.Lumen.DiffuseIndirect.Allow:
          hint: |-
            Whether to allow Lumen Global Illumination.  Lumen GI is enabled in the project settings, this cvar can only disable it.
        r.Lumen.DiffuseIndirect.CardInterpolateInfluenceRadius:
          hint: |-
            .
        r.Lumen.DiffuseIndirect.CardTraceEndDistanceFromCamera:
          hint: |-
        r.Lumen.DiffuseIndirect.CullGridDistributionLogZOffset:
          hint: |-
        r.Lumen.DiffuseIndirect.CullGridDistributionLogZScale:
          hint: |-
        r.Lumen.DiffuseIndirect.CullGridDistributionZScale:
          hint: |-
        r.Lumen.DiffuseIndirect.CullGridPixelSize:
          hint: |-
            Size of a cell in the card grid, in pixels.
        r.Lumen.DiffuseIndirect.MeshSDFAverageCulledCount:
          hint: |-
        r.Lumen.DiffuseIndirect.MeshSDFRadiusThreshold:
          hint: |-
        r.Lumen.DiffuseIndirect.MinSampleRadius:
          hint: |-
            .
        r.Lumen.DiffuseIndirect.MinTraceDistance:
          hint: |-
            .
        r.Lumen.DiffuseIndirect.SurfaceBias:
          hint: |-
            .
        r.Lumen.DiffuseIndirect.TraceStepFactor:
          hint: |-
            .
        r.Lumen.DiffuseIndirect.VoxelStepFactor:
          hint: |-
        r.Lumen.HardwareRayTracing:
          hint: |-
            Uses Hardware Ray Tracing for Lumen features, when available.
            Lumen will fall back to Software Ray Tracing otherwise.
            Note: Hardware ray tracing has significant scene update costs for
            scenes with more than 100k instances.
        r.Lumen.HardwareRayTracing.FarFieldBias:
          hint: |-
            Determines bias for the far field traces. Default = 200
        r.Lumen.HardwareRayTracing.Inline:
          hint: |-
            Uses Hardware Inline Ray Tracing for selected Lumen passes, when available.
        r.Lumen.HardwareRayTracing.LightingMode:
          hint: |-
            Determines the lighting mode (Default = 0)
            0: interpolate final lighting from the surface cache
            1: evaluate material, and interpolate irradiance and indirect irradiance from the surface cache
            2: evaluate material and direct lighting, and interpolate indirect irradiance from the surface cache
            3: evaluate material, direct lighting, and unshadowed skylighting at the hit point
        r.Lumen.HardwareRayTracing.MaxIterations:
          hint: |-
            Limit number of ray tracing traversal iterations on supported platfoms.
            Incomplete misses will be treated as hitting a black surface (can cause overocculsion).
            Incomplete hits will be treated as a hit (can cause leaking).
        r.Lumen.HardwareRayTracing.MaxTranslucentSkipCount:
          hint: |-
            Determines the maximum number of translucent surfaces skipped during ray traversal (Default = 2)
        r.Lumen.HardwareRayTracing.PullbackBias:
          hint: |-
            Determines the pull-back bias when resuming a screen-trace ray (default = 8.0)
        r.Lumen.IrradianceFieldGather:
          hint: |-
            Whether to use the Irradiance Field Final Gather, an experimental opaque final gather that interpolates from pre-calculated irradiance in probes for cheaper, but lower quality GI.
        r.Lumen.IrradianceFieldGather.ClipmapDistributionBase:
          hint: |-
            Base of the Pow() that controls the size of each successive clipmap relative to the first.
        r.Lumen.IrradianceFieldGather.ClipmapWorldExtent:
          hint: |-
            World space extent of the first clipmap
        r.Lumen.IrradianceFieldGather.GridResolution:
          hint: |-
            Resolution of the probe placement grid within each clipmap
        r.Lumen.IrradianceFieldGather.IrradianceProbeResolution:
          hint: |-
            Resolution of the probe's 2d irradiance layout.
        r.Lumen.IrradianceFieldGather.NumClipmaps:
          hint: |-
            Number of radiance cache clipmaps.
        r.Lumen.IrradianceFieldGather.NumMipmaps:
          hint: |-
            Number of radiance cache mipmaps.
        r.Lumen.IrradianceFieldGather.NumProbesToTraceBudget:
          hint: |-
            Number of probes that can be updated in a frame before downsampling.
        r.Lumen.IrradianceFieldGather.OcclusionProbeResolution:
          hint: |-
            Resolution of the probe's 2d occlusion layout.
        r.Lumen.IrradianceFieldGather.ProbeAtlasResolutionInProbes:
          hint: |-
            Number of probes along one dimension of the probe atlas cache texture.  This controls the memory usage of the cache.  Overflow currently results in incorrect rendering.
        r.Lumen.IrradianceFieldGather.ProbeOcclusionNormalBias:
          hint: |-
            Bias along the normal to reduce self-occlusion artifacts from Probe Occlusion
        r.Lumen.IrradianceFieldGather.ProbeOcclusionViewBias:
          hint: |-
            Bias along the view direction to reduce self-occlusion artifacts from Probe Occlusion
        r.Lumen.IrradianceFieldGather.ProbeResolution:
          hint: |-
            Resolution of the probe's 2d radiance layout.  The number of rays traced for the probe will be ProbeResolution ^ 2
        r.Lumen.IrradianceFieldGather.RadianceCache.Stats:
          hint: |-
            GPU print out Radiance Cache update stats.
        r.Lumen.MaxConeSteps:
          hint: |-
            Maximum steps to use for Cone Stepping of proxy cards.
        r.Lumen.ProbeHierarchy:
          hint: |-
            Whether to use probe based denoiser for all indirect lighting.
        r.Lumen.ProbeHierarchy.AdditionalSpecularRayThreshold:
          hint: |-
            Roughness treshold under which to shoot an additional ray for specular.
        r.Lumen.ProbeHierarchy.AntiTileAliasing:
          hint: |-
            Whether to enable anti tile aliasing.
        r.Lumen.ProbeHierarchy.CounterParrallaxError:
          hint: |-
            How much parrallax error is tolerated between probe in the hierarchy. Higher value is higher quality, but more expensive.
        r.Lumen.ProbeHierarchy.DebugAntiTileAliasingX:
          hint: |-
        r.Lumen.ProbeHierarchy.DebugAntiTileAliasingY:
          hint: |-
        r.Lumen.ProbeHierarchy.Depth:
          hint: |-
            Run time depth of the probe hierarchy (default to 4).
        r.Lumen.ProbeHierarchy.DiffuseIndirect.MipLevel:
          hint: |-
            Sample the cosine emisphere in specific mip level of the cubemap of the probes to reduce noise when can't afford many rays.
        r.Lumen.ProbeHierarchy.EnableBentNormal:
          hint: |-
            Whether to occlude GI by material's bent normal.
        r.Lumen.ProbeHierarchy.LeafProbeSamplingDivisor:
          hint: |-
            Divisor on the number of sample that should be done per texel of the probes' IBL for leaves of the hierarchy.
        r.Lumen.ProbeHierarchy.MaxProbeResolution:
          hint: |-
            Maximum resolution of the probes' IBL (default to 8, power of two, min at 4, max at 32).
        r.Lumen.ProbeHierarchy.MaxProbeSuperSampling:
          hint: |-
            Square root maximum of super sampling allowed of ray per texel of the probes' IBL (default to 2, power of two, min at 1, max at 4).
        r.Lumen.ProbeHierarchy.ProbeOcclusion:
          hint: |-
            Whether to do any probe occlusion.
        r.Lumen.ProbeHierarchy.SamplePerPixel:
          hint: |-
            Number of sample to do per full res pixel.
        r.Lumen.ProbeHierarchy.ScreenSpaceProbeTracing:
          hint: |-
            Whether to trace probes with screen space rays.
        r.Lumen.ProbeHierarchy.SSGIProbeOcclusion:
          hint: |-
            Whether to trace screen space rays to test probe occlusion.
        r.Lumen.ProbeHierarchy.TileClassification:
          hint: |-
            Whether to use tile classification for faster probe occlusion and probe hierarchy tracing.
        r.Lumen.ProbeHierarchy.TraceMeshSDFs:
          hint: |-
            .
        r.Lumen.ProbeHierarchy.VoxelDiffuseProbeOcclusion:
          hint: |-
            Whether to cone trace voxel to test diffuse probe occlusion.
        r.Lumen.RadianceCache.DownsampleDistanceFromCamera:
          hint: |-
            Probes further than this distance from the camera are always downsampled.
        r.Lumen.RadianceCache.ForceFullUpdate:
          hint: |-
        r.Lumen.RadianceCache.HardwareRayTracing:
          hint: |-
            Enables hardware ray tracing for Lumen radiance cache (Default = 1)
        r.Lumen.RadianceCache.HardwareRayTracing.Indirect:
          hint: |-
            Enables indirect dispatch for hardware ray tracing for Lumen radiance cache (Default = 1)
        r.Lumen.RadianceCache.HardwareRayTracing.PersistentTracingGroupCount:
          hint: |-
            Determines the number of trace tile groups to submit in the 1D dispatch
        r.Lumen.RadianceCache.HardwareRayTracing.Retrace.FarField:
          hint: |-
            Determines whether a second trace will be fired for far-field contribution (Default = 1)
        r.Lumen.RadianceCache.HardwareRayTracing.TemporaryBufferAllocationDownsampleFactor:
          hint: |-
            Downsample factor on the temporary buffer used by Hardware Ray Tracing Radiance Cache.  Higher downsample factors save more transient allocator memory, but may cause overflow and artifacts.
        r.Lumen.RadianceCache.NumFramesToKeepCachedProbes:
          hint: |-
        r.Lumen.RadianceCache.OverrideCacheOcclusionLighting:
          hint: |-
        r.Lumen.RadianceCache.ShowBlackRadianceCacheLighting:
          hint: |-
        r.Lumen.RadianceCache.SortTraceTiles:
          hint: |-
            Whether to sort Trace Tiles by direction before tracing to extract coherency
        r.Lumen.RadianceCache.SpatialFilterMaxRadianceHitAngle:
          hint: |-
            In Degrees.  Larger angles allow filtering of nearby features but more leaking.
        r.Lumen.RadianceCache.SpatialFilterProbes:
          hint: |-
            Whether to filter probe radiance between neighbors
        r.Lumen.RadianceCache.SupersampleDistanceFromCamera:
          hint: |-
            Only probes closer to the camera than this distance can be supersampled.
        r.Lumen.RadianceCache.SupersampleTileBRDFThreshold:
          hint: |-
            Value of the BRDF [0-1] above which to trace more rays to supersample the probe radiance.
        r.Lumen.RadianceCache.Update:
          hint: |-
            Whether to update radiance cache every frame
        r.Lumen.RadianceCache.Visualize:
          hint: |-
        r.Lumen.RadianceCache.VisualizeClipmapIndex:
          hint: |-
            Selects which radiance cache clipmap should be visualized. -1 visualizes all clipmaps at once.
        r.Lumen.RadianceCache.VisualizeProbeRadius:
          hint: |-
            Whether to visualize radiance cache probe radius
        r.Lumen.RadianceCache.VisualizeRadiusScale:
          hint: |-
            Scales the size of the spheres used to visualize radiance cache samples.
        r.Lumen.Reflections.Allow:
          hint: |-
            Whether to allow Lumen Reflections.  Lumen Reflections is enabled in the project settings, this cvar can only disable it.
        r.Lumen.Reflections.BilateralFilter:
          hint: |-
            Whether to do a bilateral filter as a last step in denoising Lumen Reflections.
        r.Lumen.Reflections.BilateralFilter.DepthWeightScale:
          hint: |-
            Scales the depth weight of the bilateral filter
        r.Lumen.Reflections.BilateralFilter.NormalAngleThresholdScale:
          hint: |-
            Scales the Normal angle threshold of the bilateral filter
        r.Lumen.Reflections.BilateralFilter.NumSamples:
          hint: |-
            Number of bilateral filter samples.
        r.Lumen.Reflections.BilateralFilter.SpatialKernelRadius:
          hint: |-
            Spatial kernel radius, as a fraction of the viewport size
        r.Lumen.Reflections.BilateralFilter.StrongBlurVarianceThreshold:
          hint: |-
            Pixels whose variance from the spatial resolve filter are higher than this value get a stronger bilateral blur.
        r.Lumen.Reflections.DownsampleFactor:
          hint: |-
        r.Lumen.Reflections.GGXSamplingBias:
          hint: |-
        r.Lumen.Reflections.HairStrands.ScreenTrace:
          hint: |-
            Whether to trace against hair depth for hair casting shadow onto opaques.
        r.Lumen.Reflections.HairStrands.VoxelTrace:
          hint: |-
            Whether to trace against hair voxel structure for hair casting shadow onto opaques.
        r.Lumen.Reflections.HardwareRayTracing:
          hint: |-
            Enables hardware ray tracing for Lumen reflections (Default = 1)
        r.Lumen.Reflections.HardwareRayTracing.BucketMaterials:
          hint: |-
            Determines whether a secondary traces will be bucketed for coherent material access (default = 1
        r.Lumen.Reflections.HardwareRayTracing.Default.GroupCount:
          hint: |-
            Determines the active number of groups (Default = 1)
        r.Lumen.Reflections.HardwareRayTracing.Default.ThreadCount:
          hint: |-
            Determines the active number of threads (Default = 32768)
        r.Lumen.Reflections.HardwareRayTracing.Indirect:
          hint: |-
            Enables indirect ray tracing dispatch on compatible hardware (Default = 1)
        r.Lumen.Reflections.HardwareRayTracing.Retrace.FarField:
          hint: |-
            Determines whether a second trace will be fired for far-field contribution (Default = 1)
        r.Lumen.Reflections.HardwareRayTracing.Retrace.GroupCount:
          hint: |-
            Determines the active number of groups for re-traces (Default = 1)
        r.Lumen.Reflections.HardwareRayTracing.Retrace.HitLighting:
          hint: |-
            Determines whether a second trace will be fired for hit-lighting for invalid surface-cache hits (Default = 0)
        r.Lumen.Reflections.HardwareRayTracing.Retrace.ThreadCount:
          hint: |-
            Determines the active number of threads for re-traces (Default = 32768)
        r.Lumen.Reflections.HierarchicalScreenTraces.HistoryDepthTestRelativeThickness:
          hint: |-
            Distance between HZB trace hit and previous frame scene depth from which to allow hits, as a relative depth threshold.
        r.Lumen.Reflections.HierarchicalScreenTraces.MaxIterations:
          hint: |-
            Max iterations for HZB tracing.
        r.Lumen.Reflections.HierarchicalScreenTraces.MinimumOccupancy:
          hint: |-
            Minimum number of threads still tracing before aborting the trace.  Can be used for scalability to abandon traces that have a disproportionate cost.
        r.Lumen.Reflections.HierarchicalScreenTraces.RelativeDepthThickness:
          hint: |-
            Determines depth thickness of objects hit by HZB tracing, as a relative depth threshold.
        r.Lumen.Reflections.MaxRayIntensity:
          hint: |-
            Clamps the maximum ray lighting intensity (with PreExposure) to reduce fireflies.
        r.Lumen.Reflections.MaxRoughnessToTrace:
          hint: |-
        r.Lumen.Reflections.RadianceCache:
          hint: |-
            Whether to reuse Lumen's ScreenProbeGather Radiance Cache, when it is available.  When enabled, reflection rays from rough surfaces are shortened and distant lighting comes from interpolating from the Radiance Cache, speeding up traces.
        r.Lumen.Reflections.RadianceCache.AngleThresholdScale:
          hint: |-
            Controls when the Radiance Cache is used for distant lighting.  A value of 1 means only use the Radiance Cache when appropriate for the reflection cone, lower values are more aggressive.
        r.Lumen.Reflections.RadianceCache.ReprojectionRadiusScale:
          hint: |-
            Scales the radius of the sphere around each Radiance Cache probe that is intersected for parallax correction when interpolating from the Radiance Cache.
        r.Lumen.Reflections.RoughnessFadeLength:
          hint: |-
        r.Lumen.Reflections.ScreenSpaceReconstruction:
          hint: |-
            Whether to use the screen space BRDF reweighting reconstruction
        r.Lumen.Reflections.ScreenSpaceReconstruction.KernelRadius:
          hint: |-
            Screen space reflection filter kernel radius in pixels
        r.Lumen.Reflections.ScreenSpaceReconstruction.NumSamples:
          hint: |-
            Number of samples to use for the screen space BRDF reweighting reconstruction
        r.Lumen.Reflections.ScreenSpaceReconstruction.RoughnessScale:
          hint: |-
            Values higher than 1 allow neighbor traces to be blurred together more aggressively, but is not physically correct.
        r.Lumen.Reflections.ScreenTraces:
          hint: |-
            Whether to trace against the screen for reflections before falling back to other methods.
        r.Lumen.Reflections.SmoothBias:
          hint: |-
            Values larger than 0 apply a global material roughness bias for Lumen Reflections, where 1 is fully mirror.
        r.Lumen.Reflections.SurfaceCacheFeedback:
          hint: |-
            Whether to allow writing into virtual surface cache feedback buffer from reflection rays.
        r.Lumen.Reflections.Temporal:
          hint: |-
            Whether to use a temporal filter
        r.Lumen.Reflections.Temporal.DistanceThreshold:
          hint: |-
            World space distance threshold needed to discard last frame's lighting results.  Lower values reduce ghosting from characters when near a wall but increase flickering artifacts.
        r.Lumen.Reflections.Temporal.MaxFramesAccumulated:
          hint: |-
        r.Lumen.Reflections.TraceCompaction.GroupSizeInTraceTiles:
          hint: |-
            Size of the trace compaction threadgroup.  Larger group = better coherency in the compacted traces.  Currently only supported by WaveOps path.
        r.Lumen.Reflections.TraceCompaction.WaveOps:
          hint: |-
            Whether to use Wave Ops path for trace compaction.
        r.Lumen.Reflections.TraceMeshSDFs:
          hint: |-
        r.Lumen.Reflections.VisualizeTracingCoherency:
          hint: |-
            Set to 1 to capture traces from a random wavefront and draw them on the screen. Set to 1 again to re-capture.  Shaders must enable support first, see DEBUG_SUPPORT_VISUALIZE_TRACE_COHERENCY
        r.Lumen.ScreenProbeGather:
          hint: |-
            Whether to use the Screen Probe Final Gather
        r.Lumen.ScreenProbeGather.AdaptiveProbeAllocationFraction:
          hint: |-
            Fraction of uniform probes to allow for adaptive probe placement.
        r.Lumen.ScreenProbeGather.AdaptiveProbeMinDownsampleFactor:
          hint: |-
            Screen probes will be placed where needed down to this downsample factor of the GBuffer.
        r.Lumen.ScreenProbeGather.DiffuseIntegralMethod:
          hint: |-
            Spherical Harmonic = 0, Importance Sample BRDF = 1, Numerical Integral Reference = 2
        r.Lumen.ScreenProbeGather.DownsampleFactor:
          hint: |-
            Pixel size of the screen tile that a screen probe will be placed on.
        r.Lumen.ScreenProbeGather.Filtering.WaveOps:
          hint: |-
            Whether to use Wave Ops path for screen probe filtering.
        r.Lumen.ScreenProbeGather.FixedJitterIndex:
          hint: |-
            If zero or greater, overrides the temporal jitter index with a fixed index.  Useful for debugging and inspecting sampling patterns.
        r.Lumen.ScreenProbeGather.FullResolutionJitterWidth:
          hint: |-
            Size of the full resolution jitter applied to Screen Probe upsampling, as a fraction of a screen tile.  A width of 1 results in jittering by DownsampleFactor number of pixels.
        r.Lumen.ScreenProbeGather.GatherNumMips:
          hint: |-
            Number of mip maps to prepare for diffuse integration
        r.Lumen.ScreenProbeGather.GatherOctahedronResolutionScale:
          hint: |-
            Resolution that probe filtering and integration will happen at, as a scale of TracingOctahedronResolution
        r.Lumen.ScreenProbeGather.HairStrands.ScreenTrace:
          hint: |-
            Whether to trace against hair depth for hair casting shadow onto opaques.
        r.Lumen.ScreenProbeGather.HairStrands.VoxelTrace:
          hint: |-
            Whether to trace against hair voxel structure for hair casting shadow onto opaques.
        r.Lumen.ScreenProbeGather.HardwareRayTracing:
          hint: |-
            0. Software raytracing of diffuse indirect from Lumen cubemap tree.1. Enable hardware ray tracing of diffuse indirect. (Default)
        r.Lumen.ScreenProbeGather.HardwareRayTracing.AvoidSelfIntersectionTraceDistance:
          hint: |-
            Distance to trace with backface culling enabled, useful when the Ray Tracing geometry doesn't match the GBuffer (Nanite Proxy geometry)
        r.Lumen.ScreenProbeGather.HardwareRayTracing.Default.GroupCount:
          hint: |-
            Determines the active number of groups (Default = 1)
        r.Lumen.ScreenProbeGather.HardwareRayTracing.Default.ThreadCount:
          hint: |-
            Determines the active number of threads (Default = 32768)
        r.Lumen.ScreenProbeGather.HardwareRayTracing.Indirect:
          hint: |-
            Enables indirect ray tracing dispatch on compatible hardware (Default = 1)
        r.Lumen.ScreenProbeGather.HardwareRayTracing.NormalBias:
          hint: |-
            Bias along the shading normal, useful when the Ray Tracing geometry doesn't match the GBuffer (Nanite Proxy geometry)
        r.Lumen.ScreenProbeGather.HardwareRayTracing.Retrace.FarField:
          hint: |-
            Determines whether a second trace will be fired for far-field contribution (Default = 1)
        r.Lumen.ScreenProbeGather.ImportanceSample:
          hint: |-
            Whether to use Importance Sampling to generate probe trace directions.
        r.Lumen.ScreenProbeGather.ImportanceSample.BRDFOctahedronResolution:
          hint: |-
            Resolution of the BRDF PDF octahedron per probe.
        r.Lumen.ScreenProbeGather.ImportanceSample.HistoryDistanceThreshold:
          hint: |-
        r.Lumen.ScreenProbeGather.ImportanceSample.IncomingLighting:
          hint: |-
            Whether to Importance Sample incoming lighting to generate probe trace directions.  When disabled, only the BRDF will be importance sampled.
        r.Lumen.ScreenProbeGather.ImportanceSample.MinPDFToTrace:
          hint: |-
            Minimum normalized BRDF PDF to trace rays for.  Larger values cause black corners, but reduce noise as more rays are able to be reassigned to an important direction.
        r.Lumen.ScreenProbeGather.ImportanceSample.NumLevels:
          hint: |-
            Number of refinement levels to use for screen probe importance sampling.  Currently only supported by the serial reference path in ScreenProbeGenerateRaysCS.
        r.Lumen.ScreenProbeGather.ImportanceSample.ProbeRadianceHistory:
          hint: |-
            Whether to Importance Sample incoming lighting from last frame's filtered traces to generate probe trace directions.  When disabled, the Radiance Cache will be used instead.
        r.Lumen.ScreenProbeGather.IntegrationTileClassification:
          hint: |-
            Whether to use tile classification during diffuse integration.  Tile Classification splits compute dispatches by VGPRs for better occupancy, but can introduce errors if implemented incorrectly.
        r.Lumen.ScreenProbeGather.IrradianceFormat:
          hint: |-
            Prefilter irradiance format
            0 - SH3 slower
            1 - Octahedral probe. Faster, but reverts to SH3 when ScreenSpaceBentNormal.ApplyDuringIntegration is enabled
        r.Lumen.ScreenProbeGather.MaxRayIntensity:
          hint: |-
            Clamps the maximum ray lighting intensity (with PreExposure) to reduce fireflies.
        r.Lumen.ScreenProbeGather.OctahedralSolidAngleTextureSize:
          hint: |-
            Resolution of the lookup texture to compute Octahedral Solid Angle.
        r.Lumen.ScreenProbeGather.RadianceCache:
          hint: |-
            Whether to enable the Persistent world space Radiance Cache
        r.Lumen.ScreenProbeGather.RadianceCache.ClipmapDistributionBase:
          hint: |-
            Base of the Pow() that controls the size of each successive clipmap relative to the first.
        r.Lumen.ScreenProbeGather.RadianceCache.ClipmapWorldExtent:
          hint: |-
            World space extent of the first clipmap
        r.Lumen.ScreenProbeGather.RadianceCache.GridResolution:
          hint: |-
            Resolution of the probe placement grid within each clipmap
        r.Lumen.ScreenProbeGather.RadianceCache.NumClipmaps:
          hint: |-
            Number of radiance cache clipmaps.
        r.Lumen.ScreenProbeGather.RadianceCache.NumMipmaps:
          hint: |-
            Number of radiance cache mipmaps.
        r.Lumen.ScreenProbeGather.RadianceCache.NumProbesToTraceBudget:
          hint: |-
        r.Lumen.ScreenProbeGather.RadianceCache.ProbeAtlasResolutionInProbes:
          hint: |-
            Number of probes along one dimension of the probe atlas cache texture.  This controls the memory usage of the cache.  Overflow currently results in incorrect rendering.
        r.Lumen.ScreenProbeGather.RadianceCache.ProbeResolution:
          hint: |-
            Resolution of the probe's 2d radiance layout.  The number of rays traced for the probe will be ProbeResolution ^ 2
        r.Lumen.ScreenProbeGather.RadianceCache.ReprojectionRadiusScale:
          hint: |-
        r.Lumen.ScreenProbeGather.RadianceCache.Stats:
          hint: |-
            GPU print out Radiance Cache update stats. Requires r.ShaderPrintEnable 1.
        r.Lumen.ScreenProbeGather.ReferenceMode:
          hint: |-
            When enabled, traces 1024 uniform rays per probe with no filtering, Importance Sampling or Radiance Caching.
        r.Lumen.ScreenProbeGather.ScreenSpaceBentNormal:
          hint: |-
            Whether to compute screen space directional occlusion to add high frequency occlusion (contact shadows) which Screen Probes lack due to downsampling.
        r.Lumen.ScreenProbeGather.ScreenSpaceBentNormal.ApplyDuringIntegration:
          hint: |-
            Whether Screen Space Bent Normal should be applied during BRDF integration, which has higher quality but is before the temporal filter so causes streaking on moving objects.
        r.Lumen.ScreenProbeGather.ScreenSpaceBentNormal.SlopeCompareToleranceScale:
          hint: |-
            Scales the slope threshold that screen space traces use to determine whether there was a hit.
        r.Lumen.ScreenProbeGather.ScreenTraces:
          hint: |-
            Whether to trace against the screen before falling back to other tracing methods.
        r.Lumen.ScreenProbeGather.ScreenTraces.HZBTraversal:
          hint: |-
            Whether to use HZB tracing for SSGI instead of fixed step count intersection.  HZB tracing is much more accurate, in particular not missing thin features, but is about ~3x slower.
        r.Lumen.ScreenProbeGather.ScreenTraces.HZBTraversal.HistoryDepthTestRelativeThickness:
          hint: |-
            Distance between HZB trace hit and previous frame scene depth from which to allow hits, as a relative depth threshold.
        r.Lumen.ScreenProbeGather.ScreenTraces.HZBTraversal.MaxIterations:
          hint: |-
            Max iterations for HZB tracing.
        r.Lumen.ScreenProbeGather.ScreenTraces.HZBTraversal.NumThicknessStepsToDetermineCertainty:
          hint: |-
            Number of linear search steps to determine if a hit feature is thin and should be ignored.
        r.Lumen.ScreenProbeGather.ScreenTraces.HZBTraversal.RelativeDepthThickness:
          hint: |-
            Determines depth thickness of objects hit by HZB tracing, as a relative depth threshold.
        r.Lumen.ScreenProbeGather.ScreenTraces.MinimumOccupancy:
          hint: |-
            Minimum number of threads still tracing before aborting the trace.  Can be used for scalability to abandon traces that have a disproportionate cost.
        r.Lumen.ScreenProbeGather.ScreenTraces.ThicknessScaleWhenNoFallback:
          hint: |-
            Larger scales effectively treat depth buffer surfaces as thicker for screen traces when there is no Distance Field present to resume the occluded ray.
        r.Lumen.ScreenProbeGather.SpatialFilterHalfKernelSize:
          hint: |-
            Experimental
        r.Lumen.ScreenProbeGather.SpatialFilterMaxRadianceHitAngle:
          hint: |-
            In Degrees.  Larger angles allow more filtering but lose contact shadows.
        r.Lumen.ScreenProbeGather.SpatialFilterNumPasses:
          hint: |-
            Number of spatial filter passes
        r.Lumen.ScreenProbeGather.SpatialFilterPositionWeightScale:
          hint: |-
            Determines how far probes can be in world space while still filtering lighting
        r.Lumen.ScreenProbeGather.SpatialFilterProbes:
          hint: |-
            Whether to spatially filter probe traces to reduce noise.
        r.Lumen.ScreenProbeGather.StochasticInterpolation:
          hint: |-
            Where to interpolate screen probes stochastically (1 sample) or bilinearly (4 samples)
        r.Lumen.ScreenProbeGather.Temporal:
          hint: |-
            Whether to use a temporal filter
        r.Lumen.ScreenProbeGather.Temporal.ClearHistoryEveryFrame:
          hint: |-
            Whether to clear the history every frame for debugging
        r.Lumen.ScreenProbeGather.Temporal.DebugForceTracesMoving:
          hint: |-
        r.Lumen.ScreenProbeGather.Temporal.DistanceThreshold:
          hint: |-
            Relative distance threshold needed to discard last frame's lighting results.  Lower values reduce ghosting from characters when near a wall but increase flickering artifacts.
        r.Lumen.ScreenProbeGather.Temporal.FastUpdateModeUseNeighborhoodClamp:
          hint: |-
            Whether to clamp history values to the current frame's screen space neighborhood, in areas around moving objects.
        r.Lumen.ScreenProbeGather.Temporal.FractionOfLightingMovingForFastUpdateMode:
          hint: |-
        r.Lumen.ScreenProbeGather.Temporal.MaxFastUpdateModeAmount:
          hint: |-
            Maximum amount of fast-responding temporal filter to use when traces hit a moving object.  Values closer to 1 cause more noise, but also faster reaction to scene changes.
        r.Lumen.ScreenProbeGather.Temporal.MaxFramesAccumulated:
          hint: |-
            Lower values cause the temporal filter to propagate lighting changes faster, but also increase flickering from noise.
        r.Lumen.ScreenProbeGather.Temporal.NeighborhoodClamp:
          hint: |-
            Whether to use a neighborhood clamp temporal filter instead of depth rejection.  Experimental.
        r.Lumen.ScreenProbeGather.Temporal.NormalThreshold:
          hint: |-
            Maximum angle that the history texel's normal can be from the current pixel to accept it's history lighting, in degrees.
        r.Lumen.ScreenProbeGather.Temporal.RejectBasedOnNormal:
          hint: |-
            Whether to reject history lighting based on their normal.  Increases cost of the temporal filter but can reduce streaking especially around character feet.
        r.Lumen.ScreenProbeGather.Temporal.RelativeSpeedDifferenceToConsiderLightingMoving:
          hint: |-
        r.Lumen.ScreenProbeGather.TemporalFilterProbes:
          hint: |-
            Whether to temporally filter probe traces to reduce noise.
        r.Lumen.ScreenProbeGather.TemporalFilterProbes.HistoryDistanceThreshold:
          hint: |-
        r.Lumen.ScreenProbeGather.TemporalFilterProbes.HistoryWeight:
          hint: |-
        r.Lumen.ScreenProbeGather.TraceMeshSDFs:
          hint: |-
            Whether to trace against Mesh Signed Distance fields for Lumen's Screen Probe Gather.
        r.Lumen.ScreenProbeGather.TracingOctahedronResolution:
          hint: |-
            Resolution of the tracing octahedron.  Determines how many traces are done per probe.
        r.Lumen.ScreenProbeGather.VisualizeTraces:
          hint: |-
            Whether to visualize traces for the center screen probe, useful for debugging
        r.Lumen.ScreenProbeGather.VisualizeTracesFreeze:
          hint: |-
            Whether to freeze updating the visualize trace data.  Note that no changes to cvars or shaders will propagate until unfrozen.
        r.Lumen.Supported:
          hint: |-
            Whether Lumen is supported at all for the project, regardless of platform.  This can be used to avoid compiling shaders and other load time overhead.
        r.Lumen.SurfaceCache.HeightfieldCaptureMargin:
          hint: |-
            Amount to expand heightfield component bbox for card capture purposes.
        r.Lumen.TraceDistanceScale:
          hint: |-
            Scales the tracing distance for all tracing methods and Lumen features, used by scalability.
        r.Lumen.TraceMeshSDFs:
          hint: |-
            Whether Lumen should trace against Mesh Signed Distance fields.  When enabled, Lumen's Software Tracing will be more accurate, but scenes with high instance density (overlapping meshes) will have high tracing costs.  When disabled, lower resolution Global Signed Distance Field will be used instead.
        r.Lumen.TraceMeshSDFs.Allow:
          hint: |-
            Whether Lumen should trace against Mesh Signed Distance fields.  When enabled, Lumen's Software Tracing will be more accurate, but scenes with high instance density (overlapping meshes) will have high tracing costs.  When disabled, lower resolution Global Signed Distance Field will be used instead.
        r.Lumen.TraceMeshSDFs.TraceDistance:
          hint: |-
            Max trace distance against Mesh Distance Fields and Heightfields.
        r.Lumen.TranslucencyReflections.ClipmapFadeSize:
          hint: |-
            Size in Radiance Cache probes of the dithered transition region between clipmaps
        r.Lumen.TranslucencyReflections.Enable:
          hint: |-
            Whether to use the Radiance Cache to provide Lumen Reflections on Translucent Surfaces.
        r.Lumen.TranslucencyReflections.MarkDownsampleFactor:
          hint: |-
            Downsample factor for marking translucent surfaces in the Lumen Radiance Cache.  Too low of factors will cause incorrect Radiance Cache coverage.  Should be a power of 2.
        r.Lumen.TranslucencyReflections.ReprojectionRadiusScale:
          hint: |-
            Larger values treat the Radiance Cache lighting as more distant.
        r.Lumen.TranslucencyVolume.Enable:
          hint: |-
        r.Lumen.TranslucencyVolume.EndDistanceFromCamera:
          hint: |-
        r.Lumen.TranslucencyVolume.GridDistributionLogZOffset:
          hint: |-
        r.Lumen.TranslucencyVolume.GridDistributionLogZScale:
          hint: |-
        r.Lumen.TranslucencyVolume.GridDistributionZScale:
          hint: |-
        r.Lumen.TranslucencyVolume.GridPixelSize:
          hint: |-
            Size of a cell in the translucency grid, in pixels.
        r.Lumen.TranslucencyVolume.HardwareRayTracing:
          hint: |-
            Enables hardware ray tracing for Lumen translucency volume (Default = 1)
        r.Lumen.TranslucencyVolume.MaxRayIntensity:
          hint: |-
            .
        r.Lumen.TranslucencyVolume.RadianceCache:
          hint: |-
            Whether to use the Radiance Cache for Translucency
        r.Lumen.TranslucencyVolume.RadianceCache.ClipmapDistributionBase:
          hint: |-
            Base of the Pow() that controls the size of each successive clipmap relative to the first.
        r.Lumen.TranslucencyVolume.RadianceCache.ClipmapWorldExtent:
          hint: |-
            World space extent of the first clipmap
        r.Lumen.TranslucencyVolume.RadianceCache.FarField:
          hint: |-
            Whether to trace against the FarField representation
        r.Lumen.TranslucencyVolume.RadianceCache.GridResolution:
          hint: |-
            Resolution of the probe placement grid within each clipmap
        r.Lumen.TranslucencyVolume.RadianceCache.NumMipmaps:
          hint: |-
            Number of radiance cache mipmaps.
        r.Lumen.TranslucencyVolume.RadianceCache.NumProbesToTraceBudget:
          hint: |-
        r.Lumen.TranslucencyVolume.RadianceCache.ProbeAtlasResolutionInProbes:
          hint: |-
            Number of probes along one dimension of the probe atlas cache texture.  This controls the memory usage of the cache.  Overflow currently results in incorrect rendering.
        r.Lumen.TranslucencyVolume.RadianceCache.ProbeResolution:
          hint: |-
            Resolution of the probe's 2d radiance layout.  The number of rays traced for the probe will be ProbeResolution ^ 2
        r.Lumen.TranslucencyVolume.RadianceCache.ReprojectionRadiusScale:
          hint: |-
        r.Lumen.TranslucencyVolume.RadianceCache.Stats:
          hint: |-
            GPU print out Radiance Cache update stats.
        r.Lumen.TranslucencyVolume.RadianceCache.Visualize:
          hint: |-
        r.Lumen.TranslucencyVolume.SpatialFilter:
          hint: |-
            Whether to use a spatial filter on the volume traces.
        r.Lumen.TranslucencyVolume.SpatialFilter.NumPasses:
          hint: |-
            How many passes of the spatial filter to do
        r.Lumen.TranslucencyVolume.Temporal.HistoryWeight:
          hint: |-
            How much the history value should be weighted each frame.  This is a tradeoff between visible jittering and responsiveness.
        r.Lumen.TranslucencyVolume.Temporal.Jitter:
          hint: |-
            Whether to apply jitter to each frame's translucency GI computation, achieving temporal super sampling.
        r.Lumen.TranslucencyVolume.TemporalReprojection:
          hint: |-
            Whether to use temporal reprojection.
        r.Lumen.TranslucencyVolume.TraceFromVolume:
          hint: |-
            Whether to ray trace from the translucency volume's voxels to gather indirect lighting.  Only makes sense to disable if TranslucencyVolume.RadianceCache is enabled.
        r.Lumen.TranslucencyVolume.TraceStepFactor:
          hint: |-
            .
        r.Lumen.TranslucencyVolume.TracingOctahedronResolution:
          hint: |-
            Resolution of the tracing octahedron.  Determines how many traces are done per voxel of the translucency lighting volume.
        r.Lumen.TranslucencyVolume.VoxelStepFactor:
          hint: |-
            .
        r.Lumen.TranslucencyVolume.VoxelTraceStartDistanceScale:
          hint: |-
            .
        r.Lumen.Visualize:
          hint: |-
            Lumen scene visualization mode.
            0 - Disable
            1 - Final lighting
            2 - Reflection View
            3 - Surface Cache Coverage
            4 - Overview
            5 - Albedo
            6 - Geometry normals
            7 - Normals
            8 - Emissive
            9 - Opacity
            10 - Card weights
            11 - Direct lighting
            12 - Indirect lighting
            13 - Local Position (hardware ray-tracing only)
            14 - Velocity (hardware ray-tracing only)
            15 - Direct lighting updates
            16 - Indirect lighting updates
            17 - Last used pages
            18 - Last used high res pages
        r.Lumen.Visualize.CardGenerationCluster:
          hint: |-
        r.Lumen.Visualize.CardGenerationMaxSurfel:
          hint: |-
        r.Lumen.Visualize.CardGenerationSurfels:
          hint: |-
        r.Lumen.Visualize.CardGenerationSurfelScale:
          hint: |-
        r.Lumen.Visualize.CardInterpolateInfluenceRadius:
          hint: |-
        r.Lumen.Visualize.CardPlacement:
          hint: |-
        r.Lumen.Visualize.CardPlacementDistance:
          hint: |-
        r.Lumen.Visualize.CardPlacementIndex:
          hint: |-
            Visualize only a single card per mesh.
        r.Lumen.Visualize.CardPlacementLOD:
          hint: |-
            0 - all
            1 - only primitives
            2 - only merged instances
            3 - only merged components
            4 - only far field
        r.Lumen.Visualize.CardPlacementPrimitives:
          hint: |-
            Whether to visualize primitive bounding boxes.
        r.Lumen.Visualize.ClipmapIndex:
          hint: |-
            Which clipmap to use for the Lumen scene visualization. -1 uses all possible clipmaps.
        r.Lumen.Visualize.ConeAngle:
          hint: |-
            Visualize cone angle, in degrees.
        r.Lumen.Visualize.ConeStepFactor:
          hint: |-
            Cone step scale on sphere radius step size.
        r.Lumen.Visualize.GridPixelSize:
          hint: |-
        r.Lumen.Visualize.HardwareRayTracing:
          hint: |-
            Enables visualization of hardware ray tracing (Default = 1)
        r.Lumen.Visualize.HardwareRayTracing.BucketMaterials:
          hint: |-
            Determines whether a secondary traces will be bucketed for coherent material access (default = 1
        r.Lumen.Visualize.HardwareRayTracing.Compact:
          hint: |-
            Determines whether a second trace will be compacted before traversal (default = 1
        r.Lumen.Visualize.HardwareRayTracing.DeferredMaterial:
          hint: |-
            Enables deferred material pipeline (Default = 1)
        r.Lumen.Visualize.HardwareRayTracing.DeferredMaterial.TileDimension:
          hint: |-
            Determines the tile dimension for material sorting (Default = 64)
        r.Lumen.Visualize.HardwareRayTracing.GroupCount:
          hint: |-
            Determines the active group count when dispatching raygen shader (default = 4096
        r.Lumen.Visualize.HardwareRayTracing.Retrace.FarField:
          hint: |-
            Determines whether a second trace will be fired for far-field contribution (default = 1
        r.Lumen.Visualize.HardwareRayTracing.Retrace.HitLighting:
          hint: |-
            Determines whether a second trace will be fired for hit-lighting for invalid surface-cache hits (default = 1
        r.Lumen.Visualize.HardwareRayTracing.ThreadCount:
          hint: |-
            Determines the active group count when dispatching raygen shader (default = 64
        r.Lumen.Visualize.HiResSurface:
          hint: |-
            Whether visualization should sample highest available surface data or use lowest res always resident pages.
        r.Lumen.Visualize.IndirectDiffuse:
          hint: |-
            Visualize Lumen Indirect Diffuse.
        r.Lumen.Visualize.MaxMeshSDFTraceDistance:
          hint: |-
            Max trace distance for Lumen scene visualization rays. Values below 0 will automatically derrive this from cone angle.
        r.Lumen.Visualize.MaxTraceDistance:
          hint: |-
        r.Lumen.Visualize.MinTraceDistance:
          hint: |-
        r.Lumen.Visualize.RayTracingGroups:
          hint: |-
            0 - disable
            1 - all groups
            2 - groups with a single instance
        r.Lumen.Visualize.Stats:
          hint: |-
            Print out Lumen scene stats.
        r.Lumen.Visualize.SurfaceCacheFeedback:
          hint: |-
            Whether visualization should write surface cache feedback requests into the feedback buffer.
        r.Lumen.Visualize.TraceMeshSDFs:
          hint: |-
            Whether to use Mesh SDF tracing for lumen scene visualization.
        r.Lumen.Visualize.TraceRadianceCache:
          hint: |-
            Whether to use radiance cache for Lumen scene visualization.
        r.Lumen.Visualize.ViewMode:
          hint: |-
            When the viewport view-mode is set to 'Lumen Visualization', this command specifies which of the various channels to display. Values entered other than the allowed values shown below will be ignored.
              Overview
              LumenScene
              ReflectionView
              SurfaceCache
        r.Lumen.Visualize.VoxelFaceIndex:
          hint: |-
            Which voxel face to use for the Lumen scene visualization -X,+X,-Y,+Y,-Z,+Z. -1 uses all voxel faces.
        r.Lumen.Visualize.Voxels:
          hint: |-
            Visualize Lumen voxel Representation.
        r.Lumen.Visualize.VoxelStepFactor:
          hint: |-
        r.LumenScene.DirectLighting:
          hint: |-
        r.LumenScene.DirectLighting.CloudTransmittance:
          hint: |-
            Whether to sample cloud shadows when avaible.
        r.LumenScene.DirectLighting.ForceShadowMaps:
          hint: |-
            Use shadow maps for all lights casting shadows.
        r.LumenScene.DirectLighting.GlobalSDF.ShadowRayBias:
          hint: |-
            Bias for tracing global SDF shadow rays.
        r.LumenScene.DirectLighting.HardwareRayTracing:
          hint: |-
            Enables hardware ray tracing for Lumen direct lighting (Default = 1)
        r.LumenScene.DirectLighting.HardwareRayTracing.GroupCount:
          hint: |-
            Determines the dispatch group count
        r.LumenScene.DirectLighting.HardwareRayTracing.HeightfieldProjectionBias:
          hint: |-
            Applies a projection bias such that an occlusion ray starts on the ray-tracing heightfield representation.
        r.LumenScene.DirectLighting.HardwareRayTracing.HeightfieldProjectionBiasSearchRadius:
          hint: |-
            Determines the search radius for heightfield projection bias. Larger search radius corresponds to increased traversal cost (default = 256).
        r.LumenScene.DirectLighting.HardwareRayTracing.Indirect:
          hint: |-
            Enables indirect dispatch for hardware ray tracing (Default = 1)
        r.LumenScene.DirectLighting.HardwareRayTracing.ShadowRayBias:
          hint: |-
            Bias for hardware ray tracing shadow rays.
        r.LumenScene.DirectLighting.Heightfield.ShadowRayBias:
          hint: |-
            Bias for tracing heightfield shadow rays.
        r.LumenScene.DirectLighting.MaxLightsPerTile:
          hint: |-
        r.LumenScene.DirectLighting.MeshSDF.ShadowRayBias:
          hint: |-
            Bias for tracing mesh SDF shadow rays.
        r.LumenScene.DirectLighting.OffscreenShadowing.TraceMeshSDFs:
          hint: |-
            Whether to trace against Mesh Signed Distance Fields for offscreen shadowing, or to trace against the lower resolution Global SDF.
        r.LumenScene.DirectLighting.OffscreenShadowingTraceStepFactor:
          hint: |-
        r.LumenScene.DirectLighting.ReuseShadowMaps:
          hint: |-
            Whether to use shadow maps for shadowing Lumen Scene, where they are available (onscreen).  Offscreen areas will still use ray tracing.
        r.LumenScene.DirectLighting.ShadowMap.SamplingBias:
          hint: |-
            Bias for sampling shadow maps.
        r.LumenScene.DirectLighting.UpdateFactor:
          hint: |-
            Controls for how many texels direct lighting will be updated every frame. Texels = SurfaceCacheTexels / Factor.
        r.LumenScene.DirectLighting.VirtualShadowMap:
          hint: |-
            Whether to sample virtual shadow when avaible.
        r.LumenScene.DirectLighting.VirtualShadowMap.SamplingBias:
          hint: |-
            Bias for sampling virtual shadow maps.
        r.LumenScene.DistantScene:
          hint: |-
            0: off, 1: on, 2: only on if r.LumenScene.FastCameraMode is enabled
        r.LumenScene.DistantScene.CardResolution:
          hint: |-
        r.LumenScene.DistantScene.CascadeDistributionExponent:
          hint: |-
        r.LumenScene.DistantScene.DrawCascadeBounds:
          hint: |-
        r.LumenScene.DistantScene.EndDistanceFromCamera:
          hint: |-
        r.LumenScene.DistantScene.MaxTraceDistance:
          hint: |-
        r.LumenScene.DistantScene.MinInstanceBoundsRadius:
          hint: |-
        r.LumenScene.DistantScene.NaniteLODBias:
          hint: |-
            LOD bias for Nanite geometry in Lumen distant scene representation. 0 - full detail. > 0 - reduced detail.
        r.LumenScene.DistantScene.NumCascades:
          hint: |-
            Todo - shader only supports 1 cascade
        r.LumenScene.DistantScene.SnapOrigin:
          hint: |-
        r.LumenScene.DistantScene.StartDistanceFromCamera:
          hint: |-
        r.LumenScene.DistantScene.UpdateCaptures:
          hint: |-
        r.LumenScene.DistantScene.UpdatePlacement:
          hint: |-
        r.LumenScene.DumpStats:
          hint: |-
            Whether to log Lumen scene stats on the next frame. 2 - dump mesh DF. 3 - dump LumenScene objects.
        r.LumenScene.FarField:
          hint: |-
            Enable/Disable Lumen far-field ray tracing.
        r.LumenScene.FarField.DitheredStartDistanceFactor:
          hint: |-
            Starting distance for far-field dithered t-min, as a percentage of near-field t-max (Default = 0.66f).
        r.LumenScene.FarField.MaxTraceDistance:
          hint: |-
            Maximum hit-distance for Lumen far-field ray tracing (Default = 1.0e6).
        r.LumenScene.FarField.ReferencePos.Z:
          hint: |-
            Far-field reference position in Z (default = 100000.0)
        r.LumenScene.FastCameraMode:
          hint: |-
            Whether to update the Lumen Scene for fast camera movement - lower quality, faster updates so lighting can keep up with the camera.
        r.LumenScene.GlobalSDF.ClipmapExtent:
          hint: |-
        r.LumenScene.GlobalSDF.FullyCoveredExpandSurfaceScale:
          hint: |-
            Scales the half voxel SDF expand used by the Global SDF to reconstruct surfaces that are thinner than the distance between two voxels, erring on the side of over-occlusion.
        r.LumenScene.GlobalSDF.Resolution:
          hint: |-
        r.LumenScene.GlobalSDF.UncoveredExpandSurfaceScale:
          hint: |-
            Scales the half voxel SDF expand used by the Global SDF to reconstruct surfaces that are thinner than the distance between two voxels, for regions of space that only contain Two Sided Mesh SDFs.
        r.LumenScene.GlobalSDF.UncoveredMinStepScale:
          hint: |-
            Scales the min step size to improve performance, for regions of space that only contain Two Sided Mesh SDFs.
        r.LumenScene.Heightfield.CullForView:
          hint: |-
            Enables Heightfield culling (default = 1)
        r.LumenScene.Heightfield.FroxelCulling:
          hint: |-
            Enables Heightfield froxel view culling (default = 1)
        r.LumenScene.Heightfield.MaxTracingSteps:
          hint: |-
            Sets the maximum steps for heightfield (Landscape) software ray tracing (default = 32)
        r.LumenScene.Heightfield.ReceiverBias:
          hint: |-
            Extra bias for Landscape surface points. Helps to fix mismatching LOD artifacts between fixed LOD in Surface Cache and Landscape CLOD.
        r.LumenScene.Heightfield.Tracing:
          hint: |-
            Enables heightfield (Landscape) software ray tracing (default = 1)
        r.LumenScene.Lighting.Feedback:
          hint: |-
            Whether to prioritize surface cache lighting updates based on the feedback.
        r.LumenScene.Lighting.ForceLightingUpdate:
          hint: |-
        r.LumenScene.Lighting.Stats:
          hint: |-
            GPU print out Lumen lighting update stats. Requires r.ShaderPrintEnable 1.
        r.LumenScene.MeshCardsPerTask:
          hint: |-
            How many mesh cards to process per single surface cache update task.
        r.LumenScene.ParallelUpdate:
          hint: |-
            Whether to run the Lumen Scene update in parallel.
        r.LumenScene.PrimitivesPerTask:
          hint: |-
            How many primitives to process per single surface cache update task.
        r.LumenScene.Radiosity:
          hint: |-
            Whether to enable the Radiosity, which is an indirect lighting gather from the Surface Cache that provides multibounce diffuse.
        r.LumenScene.Radiosity.DistanceFieldSurfaceBias:
          hint: |-
            .
        r.LumenScene.Radiosity.DistanceFieldSurfaceSlopeBias:
          hint: |-
            .
        r.LumenScene.Radiosity.HardwareRayTracing:
          hint: |-
            Enables hardware ray tracing for radiosity (default = 1).
        r.LumenScene.Radiosity.HardwareRayTracing.AvoidSelfIntersectionTraceDistance:
          hint: |-
            When greater than zero, a short trace skipping backfaces will be done to escape the surface, followed by the remaining trace that can hit backfaces.
        r.LumenScene.Radiosity.HardwareRayTracing.Indirect:
          hint: |-
            Enables indirect dispatch for hardware ray tracing for radiosity (default = 1).
        r.LumenScene.Radiosity.HardwareRayTracing.SlopeSurfaceBias:
          hint: |-
            .
        r.LumenScene.Radiosity.HardwareRayTracing.SurfaceBias:
          hint: |-
            .
        r.LumenScene.Radiosity.HemisphereProbeResolution:
          hint: |-
            Number of traces along one dimension of the hemisphere probe layout.
        r.LumenScene.Radiosity.MaxRayIntensity:
          hint: |-
            Clamps Radiosity trace intensity, relative to current view exposure.  Useful for reducing artifacts from small bright emissive sources, but loses energy and adds view dependence.
        r.LumenScene.Radiosity.MinTraceDistanceToSampleSurface:
          hint: |-
            Ray hit distance from which we can start sampling surface cache in order to fix radiosity feedback loop where surface cache texel hits itself every frame.
        r.LumenScene.Radiosity.ProbeOcclusion:
          hint: |-
            Whether to depth test against the probe hit depths during interpolation and filtering to reduce leaking.  Not available with Software Ray Tracing due to imprecision.
        r.LumenScene.Radiosity.ProbePlaneWeighting:
          hint: |-
            Whether to weight Radiosity probes by plane distance, useful to prevent leaking.
        r.LumenScene.Radiosity.ProbeSpacing:
          hint: |-
            Distance between probes, in Surface Cache texels
        r.LumenScene.Radiosity.SpatialFilterProbes:
          hint: |-
            Whether to spatially filter Radiosity probes.  Filtering reduces noise but increases leaking.
        r.LumenScene.Radiosity.SpatialFilterProbes.KernelSize:
          hint: |-
            Larger kernels reduce noise but increase leaking.
        r.LumenScene.Radiosity.SpatialFilterProbes.PlaneWeightingDepthScale:
          hint: |-
            Controls the distance at which probes can be interpolated from.  Higher values introduce leaking.
        r.LumenScene.Radiosity.Temporal:
          hint: |-
            Whether to use temporal super sampling on Radiosity.  Increases quality, but also adds latency to the speed that lighting changes propagate, and animated noise in the results.
        r.LumenScene.Radiosity.Temporal.FixedJitterIndex:
          hint: |-
            If zero or greater, overrides the temporal jitter index with a fixed index.  Useful for debugging and inspecting sampling patterns.
        r.LumenScene.Radiosity.Temporal.MaxFramesAccumulated:
          hint: |-
            Lower values cause the temporal filter to propagate lighting changes faster, but also increase flickering from noise.
        r.LumenScene.Radiosity.UpdateFactor:
          hint: |-
            Controls for how many texels radiosity will be updated every frame. Texels = SurfaceCacheTexels / Factor.
        r.LumenScene.Radiosity.VoxelStepFactor:
          hint: |-
            .
        r.LumenScene.SurfaceCache.AtlasSize:
          hint: |-
            Surface cache card atlas size.
        r.LumenScene.SurfaceCache.CardCameraDistanceTexelDensityScale:
          hint: |-
            Lumen card texels per world space distance
        r.LumenScene.SurfaceCache.CardCaptureFactor:
          hint: |-
            Controls how many texels can be captured per frame. Texels = SurfaceCacheTexels / Factor.
        r.LumenScene.SurfaceCache.CardCaptureMargin:
          hint: |-
            How far from Lumen scene range start to capture cards.
        r.LumenScene.SurfaceCache.CardCaptureRefreshFraction:
          hint: |-
            Fraction of card capture budget allowed to be spent on re-capturing existing pages in order to refresh surface cache materials.
            0 disables card refresh.
        r.LumenScene.SurfaceCache.CardCapturesPerFrame:
          hint: |-
        r.LumenScene.SurfaceCache.CardFixedDebugResolution:
          hint: |-
            Lumen card resolution
        r.LumenScene.SurfaceCache.CardMaxResolution:
          hint: |-
            Maximum card resolution in Lumen Scene
        r.LumenScene.SurfaceCache.CardMaxTexelDensity:
          hint: |-
            Lumen card texels per world space distance
        r.LumenScene.SurfaceCache.CardMinResolution:
          hint: |-
            Minimum mesh card size resolution to be visible in Lumen Scene
        r.LumenScene.SurfaceCache.Compress:
          hint: |-
            Whether to use run time compression for surface cache.
            0 - Disabled
            1 - Compress using UAV aliasing if supported
            2 - Compress using CopyTexture (may be very slow on some RHIs)
        r.LumenScene.SurfaceCache.DiffuseReflectivityOverride:
          hint: |-
            Override captured material diffuse for debugging. 0 disables override.
        r.LumenScene.SurfaceCache.FarField.Distance:
          hint: |-
            Far Field Lumen card culling distance
        r.LumenScene.SurfaceCache.FarField.TexelDensity:
          hint: |-
            Far Field Lumen card texels per world space unit
        r.LumenScene.SurfaceCache.Feedback:
          hint: |-
            Whether to use surface cache feedback to selectively map higher quality surface cache pages.
        r.LumenScene.SurfaceCache.Feedback.MinPageHits:
          hint: |-
            Min number of page hits to demand a new page.
        r.LumenScene.SurfaceCache.Feedback.ResLevelBias:
          hint: |-
            Bias resolution of on demand surface cache pages.
        r.LumenScene.SurfaceCache.Feedback.TileSize:
          hint: |-
            One surface cache feedback element will be writen out per tile. Aligned to a power of two.
        r.LumenScene.SurfaceCache.Feedback.UniqueElements:
          hint: |-
            Limit of unique surface cache feedback elements. Used to resize buffers.
        r.LumenScene.SurfaceCache.ForceEvictHiResPages:
          hint: |-
            Evict all optional hi-res surface cache pages.
        r.LumenScene.SurfaceCache.Freeze:
          hint: |-
            Freeze surface cache updates for debugging.
        r.LumenScene.SurfaceCache.FreezeUpdateFrame:
          hint: |-
            Keep updating the same subset of surface cache for debugging and profiling.
        r.LumenScene.SurfaceCache.LogUpdates:
          hint: |-
            Whether to log Lumen surface cache updates.
            2 - will log mesh names.
        r.LumenScene.SurfaceCache.MeshCardsCullFaces:
          hint: |-
        r.LumenScene.SurfaceCache.MeshCardsDebugSingleCard:
          hint: |-
            Spawn only a specified card on mesh. Useful for debugging.
        r.LumenScene.SurfaceCache.MeshCardsMaxLOD:
          hint: |-
            Max LOD level for the card representation. 0 - lowest quality.
        r.LumenScene.SurfaceCache.MeshCardsMergeComponents:
          hint: |-
            Whether to merge all components with the same RayTracingGroupId into a single MeshCards.
        r.LumenScene.SurfaceCache.MeshCardsMergedCardMinSurfaceArea:
          hint: |-
            Minimum area to spawn a merged card.
        r.LumenScene.SurfaceCache.MeshCardsMergedMaxWorldSize:
          hint: |-
            Only merged bounds less than this size on any axis are considered, since Lumen Scene streaming relies on object granularity.
        r.LumenScene.SurfaceCache.MeshCardsMergedResolutionScale:
          hint: |-
            Scale on the resolution calculation for a merged MeshCards.  This compensates for the merged box getting a higher resolution assigned due to being closer to the viewer.
        r.LumenScene.SurfaceCache.MeshCardsMergeInstances:
          hint: |-
            Whether to merge all instances of a Instanced Static Mesh Component into a single MeshCards.
        r.LumenScene.SurfaceCache.MeshCardsMergeInstancesMaxSurfaceAreaRatio:
          hint: |-
            Only merge if the (combined box surface area) / (summed instance box surface area) < MaxSurfaceAreaRatio
        r.LumenScene.SurfaceCache.MeshCardsMinSize:
          hint: |-
            Minimum mesh cards world space size to be included in Lumen Scene.
        r.LumenScene.SurfaceCache.NaniteMultiViewCapture:
          hint: |-
            Toggle multi view Lumen Nanite Card capture for debugging.
        r.LumenScene.SurfaceCache.NaniteMultiViewRaster:
          hint: |-
            Toggle multi view Lumen Nanite Card rasterization for debugging.
        r.LumenScene.SurfaceCache.NumFramesToKeepUnusedPages:
          hint: |-
            Num frames to keep unused pages in surface cache.
        r.LumenScene.SurfaceCache.RecaptureEveryFrame:
          hint: |-
        r.LumenScene.SurfaceCache.ResampleLighting:
          hint: |-
            Whether to resample card lighting when cards are reallocated.  This is needed for Radiosity temporal accumulation but can be disabled for debugging.
        r.LumenScene.SurfaceCache.Reset:
          hint: |-
            Reset all atlases and captured cards.
        r.LumenScene.SurfaceCache.ResetEveryNthFrame:
          hint: |-
            Continuosly reset all atlases and captured cards every N-th frame.
        r.LumenScene.UpdateViewOrigin:
          hint: |-
            Whether to update view origin for voxel lighting and global distance field. Useful for debugging.
        r.LumenScene.UploadEveryFrame:
          hint: |-
            Whether to upload the entire Lumen Scene's data every frame. Useful for debugging.
        r.LumenScene.VoxelLighting.AverageObjectsPerVisBufferTile:
          hint: |-
            Average expected number of objects per vis buffer tile, used to preallocate memory for the cull grid.
        r.LumenScene.VoxelLighting.ClipmapResolution:
          hint: |-
        r.LumenScene.VoxelLighting.ClipmapWorldExtent:
          hint: |-
        r.LumenScene.VoxelLighting.ClipmapZResolutionDivisor:
          hint: |-
        r.LumenScene.VoxelLighting.DistantScene:
          hint: |-
        r.LumenScene.VoxelLighting.ForceFullUpdate:
          hint: |-
        r.LumenScene.VoxelLighting.ForceMovementUpdate:
          hint: |-
            Whether to force N texel border on X, Y and Z update each frame.
        r.LumenScene.VoxelLighting.ForceUpdateClipmapIndex:
          hint: |-
        r.LumenScene.VoxelLighting.MaskDownsampleShift:
          hint: |-
        r.LumenScene.VoxelLighting.MeshSDFRadiusThresholdFactor:
          hint: |-
        r.LumenScene.VoxelLighting.NumClipmapLevels:
          hint: |-
        r.LumenScene.VoxelLighting.Reset:
          hint: |-
            Reset all voxel lighting.
        r.LUT.Size:
          hint: |-
            Size of film LUT
        r.Material.DumpDDCKeys:
          hint: |-
            if != 0, DDC keys for each material shadermap will be dumped into project's Saved directory (MaterialDDCKeys subdirectory)
        r.Material.EnergyConservation:
          hint: |-
            Enable energy conservation for material (project settings, read only).
        r.Material.ExcludeNonPipelinedShaders:
          hint: |-
            if != 0, standalone shaders that are also part of FShaderPipeline will not be compiled (default).
        r.Material.RoughDiffuse:
          hint: |-
            Enable rough diffuse material.
        r.MaterialEditor.AnalyticDeriv:
          hint: |-
            Enable analytic derivative code generation.
        r.MaterialEditor.AnalyticDeriv.DebugEmitInvalidDerivTokens:
          hint: |-
            Debug: Emit '$' tokens to mark expressions with invalid derivatives.
        r.MaterialEditor.AnalyticDeriv.DebugGenerateAllFunctions:
          hint: |-
            Debug: Generate all derivative functions.
        r.MaterialEditor.AnalyticDeriv.DebugTextureSample:
          hint: |-
            Debug: Instrument texture sampling with modes that can be controlled with r.GeneralPurposeTweak/r.GeneralPurposeTweak2.
        r.MaterialEditor.LWCEnabled:
          hint: |-
            Enable generation of LWC values in materials. If disabled, materials will perform all operations at float-precision
        r.MaterialEditor.UseDevShaders:
          hint: |-
            Toggles whether the material editor will use shaders that include extra overhead incurred by the editor. Material editor must be re-opened if changed at runtime.
        r.MaterialEnableControlFlow:
          hint: |-
            Allows experemental control flow to be used in the material editor.
        r.MaterialEnableNewHLSLGenerator:
          hint: |-
            Enables the new (WIP) material HLSL generator.
        r.MaterialParameterLegacyChecks:
          hint: |-
            When enabled, sanity check new material parameter logic against legacy path.
            Note that this can be slow
        r.MaterialQualityLevel:
          hint: |-
            0 corresponds to low quality materials, as defined by quality switches in materials, 1 corresponds to high, 2 for medium, and 3 for Epic.
        r.MaxAnisotropy:
          hint: |-
            MaxAnisotropy should range from 1 to 16. Higher values mean better texure quality when using anisotropic filtering but at a cost to performance. Default is 4.
        r.MaxCSMRadiusToAllowPerObjectShadows:
          hint: |-
            Only stationary lights with a CSM radius smaller than this will create per object shadows for dynamic objects.
        r.MaxQualityMode:
          hint: |-
            If set to 1, override certain system settings to highest quality regardless of performance impact
        r.MaxVertexBytesAllocatedPerFrame:
          hint: |-
            The maximum number of transient vertex buffer bytes to allocate before we start panic logging who is doing the allocations
        r.MeshCardRepresentation:
          hint: |-
        r.MeshCardRepresentation.Async:
          hint: |-
            .
        r.MeshCardRepresentation.Debug.SurfelDirection:
          hint: |-
            Generate cards for only surfels pointing in a specific direction.
        r.MeshCardRepresentation.DistanceTresholdXY:
          hint: |-
            Max distance (in surfels) when surface elements should be clustered together along XY.
        r.MeshCardRepresentation.DistanceTresholdZ:
          hint: |-
            Max distance (in surfels) when surface elements should be clustered together along Z.
        r.MeshCardRepresentation.GrowIterations:
          hint: |-
            Max number of grow iterations.
        r.MeshCardRepresentation.MinDensity:
          hint: |-
            How much of filled area needs to be there to spawn a card, [0;1] range.
        r.MeshCardRepresentation.NormalTreshold:
          hint: |-
            Normal treshold when surface elements should be clustered together.
        r.MeshCardRepresentation.ParallelBuild:
          hint: |-
            Whether to use task for mesh card building.
        r.MeshCardRepresentation.SeedIterations:
          hint: |-
            Max number of clustering iterations.
        r.MeshDrawCommands.AllowOnDemandShaderCreation:
          hint: |-
            How to create RHI shaders:
            	0: Always create them on a Rendering Thread, before executing other MDC tasks.
            	1: If RHI supports multi-threaded shader creation, create them on demand on tasks threads, at the time of submitting the draws.
        r.MeshDrawCommands.CacheMultithreaded:
          hint: |-
            Enable multithreading of draw command caching for static meshes. 0=disabled, 1=enabled (default)
        r.MeshDrawCommands.DynamicInstancing:
          hint: |-
            Whether to dynamically combine multiple compatible visible Mesh Draw Commands into one instanced draw on vertex factories that support it.
        r.MeshDrawCommands.LogDynamicInstancingStats:
          hint: |-
            Whether to log dynamic instancing stats on the next frame
        r.MeshDrawCommands.LogMeshDrawCommandMemoryStats:
          hint: |-
            Whether to log mesh draw command memory stats on the next frame
        r.MeshDrawCommands.ParallelPassSetup:
          hint: |-
            Whether to setup mesh draw command pass in parallel.
        r.MeshDrawCommands.UseCachedCommands:
          hint: |-
            Whether to render from cached mesh draw commands (on vertex factories that support it), or to generate draw commands every frame.
        r.MeshMerge.StoreImposterInfoInUVs:
          hint: |-
            Determines whether or not to store imposter info (position.xy in UV2, position.z + scale in UV3) in the merged mesh UV channels
            0: Do not store imposters info in UVs (default)
            1: Store imposter info in UVs (legacy)
        r.MeshParticle.MinDetailModeForMotionBlur:
          hint: |-
            Sets the minimum detail mode before mesh particles emit motion blur (Low  = 0, Med = 1, High = 2, Max = 3). Set to -1 to disable mesh particles motion blur entirely. Defaults to -1.
        r.MeshReductionModule:
          hint: |-
            Name of what mesh reduction module to choose. If blank it chooses any that exist.
        r.MeshStreaming:
          hint: |-
            Experimental - When non zero, enables mesh stremaing.
        r.MinRoughnessOverride:
          hint: |-
            WARNING: This is an experimental feature that may change at any time.
            Sets a global limit for roughness when used in the direct lighting calculations.
            This can be used to limit the amount of fireflies caused by low roughness, in particular when AA is not in use.
             0.0: no change (default)
        r.MinScreenRadiusForCSMDepth:
          hint: |-
            Threshold below which meshes will be culled from CSM depth pass.
        r.MinScreenRadiusForDepthPrepass:
          hint: |-
            Threshold below which meshes will be culled from depth only pass.
        r.MinScreenRadiusForLights:
          hint: |-
            Threshold below which lights will be culled.
        r.MinYResolutionFor3DView:
          hint: |-
            Defines the smallest Y resolution we want to support in the 3D view
        r.MinYResolutionForUI:
          hint: |-
            Defines the smallest Y resolution we want to support in the UI (default is 720)
        r.MipMapLODBias:
          hint: |-
            Apply additional mip map bias for all 2D textures, range of -15.0 to 15.0
        r.Mobile.AdrenoOcclusionMode:
          hint: |-
            0: Render occlusion queries after the base pass (default).
            1: Render occlusion queries after translucency and a flush, which can help Adreno devices in GL mode.
        r.Mobile.AllowDistanceFieldShadows:
          hint: |-
            0: Do not generate shader permutations to render distance field shadows from stationary directional lights.
            1: Generate shader permutations to render distance field shadows from stationary directional lights. (default)
        r.Mobile.AllowDitheredLODTransition:
          hint: |-
            Whether to support 'Dithered LOD Transition' material option on mobile platforms
        r.Mobile.AllowMovableDirectionalLights:
          hint: |-
            0: Do not generate shader permutations to render movable directional lights.
            1: Generate shader permutations to render movable directional lights. (default)
        r.Mobile.AllowPerPixelShadingModels:
          hint: |-
            Whether to allow 'Per-Pixel Shader Models (From Material Expression)' in materials for ES3.1 feature level.
        r.Mobile.AllowPixelDepthOffset:
          hint: |-
            Whether to allow 'Pixel Depth Offset' in materials for ES3.1 feature level. Depth modification in pixel shaders may reduce GPU performance
        r.Mobile.AmbientOcclusion:
          hint: |-
            Causion: An extra sampler will be occupied in mobile base pass pixel shader after enable the mobile ambient occlusion.
            0: Disable Ambient Occlusion on mobile platform. [default]
            1: Enable Ambient Occlusion on mobile platform.
        r.Mobile.AmbientOcclusionDepthBoundsTest:
          hint: |-
            Whether to use depth bounds test to cull distant pixels during AO pass. This option is only valid when pixel shader path is used
        r.Mobile.AmbientOcclusionQuality:
          hint: |-
            The quality of screen space ambient occlusion on mobile platform.
            0: Disabled.
            1: Low.(Default)
            2: Medium.
            3: High.
        r.Mobile.AmbientOcclusionShaderType:
          hint: |-
            0: ComputeShader.
            1: Seperate ComputeShader.
            2: PixelShader.
        r.Mobile.AmbientOcclusionTechnique:
          hint: |-
            0: GTAO (default).
            1: SSAO.
        r.Mobile.AntiAliasing:
          hint: |-
            Mobile default AntiAliasingMethod
             0: off (no anti-aliasing)
             1: FXAA (default, faster than TemporalAA but much more shimmering for non static cases)
             2: TemporalAA(it will fallback to FXAA if SupportsGen4TAA is disabled) 
             3: MSAA
        r.Mobile.CompressLandscapeWeightMaps:
          hint: |-
            Whether to compress the terrain weight maps for mobile.
        r.Mobile.CustomDepthDownSample:
          hint: |-
            Perform Mobile CustomDepth at HalfRes 
             0: Off (default)
             1: On 
        r.Mobile.CustomDepthForTranslucency:
          hint: |-
             Whether to render custom depth/stencil if any tranclucency in the scene uses it. 
             0 = Off 
             1 = On [default]
        r.Mobile.DisableVertexFog:
          hint: |-
            Set to 1 to disable vertex fogging in all mobile shaders.
        r.Mobile.EarlyZPass:
          hint: |-
            Whether to use a depth only pass to initialize Z culling for the mobile base pass.
              0: off
              1: all opaque 
        r.Mobile.EarlyZPassOnlyMaterialMasking:
          hint: |-
            Whether to compute materials' mask opacity only in early Z pass for Mobile platform. Changing this setting requires restarting the editor.
            <=0: off
              1: on
        r.Mobile.EnableCloth:
          hint: |-
            If enabled, compile cloth shader permutations and render simulated cloth on mobile platforms and Windows ES3.1. Cannot be changed at runtime
        r.Mobile.EnableMovableLightCSMShaderCulling:
          hint: |-
            0: All primitives lit by movable directional light render with CSM.
            1: Primitives lit by movable directional light render with the CSM shader when determined to be within CSM range. (default)
        r.Mobile.EnableMovableSpotlights:
          hint: |-
            If 1 then enable movable spotlight support
        r.Mobile.EnableMovableSpotlightsShadow:
          hint: |-
            If 1 then enable movable spotlight shadow support
        r.Mobile.EnableNoPrecomputedLightingCSMShader:
          hint: |-
            0: CSM shaders for scenes without any precomputed lighting are not generated unless r.AllowStaticLighting is 0. (default)
            1: CSM shaders for scenes without any precomputed lighting are always generated.
        r.Mobile.EnableOcclusionExtraFrame:
          hint: |-
            Whether to allow extra frame for occlusion culling (enabled by default)
        r.Mobile.EnableStaticAndCSMShadowReceivers:
          hint: |-
            0: Primitives can receive only static shadowing from stationary lights.
            1: Primitives can receive both CSM and static shadowing from stationary lights. (default)
        r.Mobile.EyeAdaptation:
          hint: |-
            EyeAdaptation for mobile platform.
             0: Disable
             1: Enabled (Default)
        r.Mobile.FloatPrecisionMode:
          hint: |-
            0: Use Half-precision (default)
            1: Half precision, except Full precision for material expressions
            2: Force use of high precision in pixel shaders.
        r.Mobile.ForceDepthResolve:
          hint: |-
            0: Depth buffer is resolved by switching out render targets. (Default)
            1: Depth buffer is resolved by switching out render targets and drawing with the depth texture.
        r.Mobile.ForceRHISwitchVerticalAxis:
          hint: |-
            Enable RHISwitchVerticalAxis when previewing mobile renderer. (Useful to test GLES y-axis flip codepaths)
            0: RHISwitchVerticalAxis disabled (default).
            1: RHISwitchVerticalAxis enabled.
        r.Mobile.GTAOPreIntegratedTextureType:
          hint: |-
            0: No Texture.
            1: Texture2D LUT.
            2: Volume LUT(Default).
        r.Mobile.HighQualitySkyCaptureFiltering:
          hint: |-
            1: (default) use high quality filtering when generating mobile sky captures.0: use simple bilinear filtering when generating mobile sky captures.
        r.Mobile.LandscapeHoleMesh:
          hint: |-
            Set to 0 to skip loading of landscape hole meshes on mobile.
        r.Mobile.MaxVisibleMovableSpotLightsShadow:
          hint: |-
            The max number of visible spotlighs can cast shadow sorted by screen size, should be as less as possible for performance reason
        r.Mobile.MeshSortingMethod:
          hint: |-
            How to sort mesh commands on mobile:
            	0: Sort by state, roughly front to back (Default).
            	1: Strict front to back sorting.
        r.Mobile.MobileSupportBloomSetupRareCases:
          hint: |-
            0: Don't generate permutations for BloomSetup rare cases. (default, like Sun+MetalMSAAHDRDecode, Dof+MetalMSAAHDRDecode, EyeAdaptaion+MetalMSAAHDRDecode, and any of their combinations)
            1: Generate permutations for BloomSetup rare cases. 
        r.Mobile.PixelFogDepthTest:
          hint: |-
            Whether to use depth and stencil tests for fog rendering
        r.Mobile.PixelFogQuality:
          hint: |-
            Exponentional height fog rendering quality.
            0 - basic per-pixel fog1 - all per-pixel fog features (second fog, directional inscattering, aerial perspective)
        r.Mobile.PixelProjectedReflectionQuality:
          hint: |-
            The quality of pixel projected reflection on mobile platform.
            0: Disabled
            1: Best performance but may have some artifacts in some view angles. [default]
            2: Better quality and reasonable performance and could fix some artifacts.
            3: Best quality but will be much heavier.
        r.Mobile.PlanarReflectionMode:
          hint: |-
            The PlanarReflection will work differently on different mode on mobile platform, choose the proper mode as expect.
            0: The PlanarReflection actor works as usual on all platforms. [default]
            1: The PlanarReflection actor is only used for mobile pixel projection reflection, it will not affect PC/Console. MobileMSAA will be disabled as a side effect.
            2: The PlanarReflection actor still works as usual on PC/Console platform and is used for mobile pixel projected reflection on mobile platform. MobileMSAA will be disabled as a side effect.
        r.Mobile.PropagateAlpha:
          hint: |-
            0: Disabled1: Propagate Full Alpha Propagate
        r.Mobile.ReflectionCaptureCompression:
          hint: |-
            Whether to use the Reflection Capture Compression or not for mobile. It will use ETC2 format to do the compression.
        r.Mobile.SceneColorFormat:
          hint: |-
            Overrides the memory layout (RGBA) used for the scene color of the mobile renderer.
            Unsupported overridden formats silently use default 0: (default) Automatically select the appropriate format depending on project settings and device support.
             1: PF_FloatRGBA 64Bit 
             2: PF_FloatR11G11B10 32Bit
             3: PF_B8G8R8A8 32Bit
        r.Mobile.SceneDepthAux:
          hint: |-
            1: 16F SceneDepthAux Format2: 32F SceneDepthAux Format
        r.Mobile.ShadingPath:
          hint: |-
            0: Forward shading (default)1: Deferred shading
        r.Mobile.Shadow.CSMDebugHint:
          hint: |-
        r.Mobile.Shadow.CSMShaderCullingDebugGfx:
          hint: |-
        r.Mobile.Shadow.CSMShaderCullingMethod:
          hint: |-
            Method to determine which primitives will receive CSM shaders:
            0 - disabled (all primitives will receive CSM)
            1 - Light frustum, all primitives whose bounding box is within CSM receiving distance. (default)
            2 - Combined caster bounds, all primitives whose bounds are within CSM receiving distance and the capsule of the combined bounds of all casters.
            3 - Light frustum + caster bounds, all primitives whose bounds are within CSM receiving distance and capsule of at least one caster. (slowest)
            4 - Cull all. Prevent primitives from receiving CSM shadows.
            5 - Disable culling if mobile distance field shadowing is used for all views.
            Combine with 16 to change primitive bounding test to spheres instead of box. (i.e. 18 == combined casters + sphere test)
        r.Mobile.ShadowmapRoundUpToPowerOfTwo:
          hint: |-
            Round the shadow map up to power of two on mobile platform, in case there is any compatibility issue.
             0: Disable (Default)
             1: Enabled
        r.Mobile.SkyLightPermutation:
          hint: |-
            0: Generate both sky-light and non-skylight permutations. (default)
            1: Generate only non-skylight permutations.
            2: Generate only skylight permutations
        r.Mobile.SupportGPUScene:
          hint: |-
            Whether to support GPU scene, required for auto-instancing (only ES3.1 feature level)
        r.Mobile.SupportsGen4TAA:
          hint: |-
            Support desktop Gen4 TAA with mobile rendering
            0: Fallback to FXAA1: Support Desktop Gen4 TAA (default)
        r.Mobile.UseClusteredDeferredShading:
          hint: |-
            Toggle use of clustered deferred shading for lights that support it. 0 is off (default), 1 is on
        r.Mobile.UseCSMShaderBranch:
          hint: |-
            0: Use two shader permutations for CSM and non-CSM shading. (default)
            1: Use a single shader pemutation with a branch in a shader to apply CSM (only with r.AllowStaticLighting=0)
        r.Mobile.UseHWsRGBEncoding:
          hint: |-
            0: Write sRGB encoding in the shader
            1: Use GPU HW to convert linear to sRGB automatically (device must support sRGB write control)
        r.Mobile.UseLightStencilCulling:
          hint: |-
            Whether to use stencil to cull local lights. 0 is off, 1 is on (default)
        r.Mobile.VirtualTextures:
          hint: |-
            Whether virtual texture streaming is enabled on mobile platforms. Requires r.VirtualTextures enabled as well. 
        r.MobileContentScaleFactor:
          hint: |-
            Content scale multiplier (equates to iOS's contentScaleFactor to support Retina displays
        r.MobileHDR:
          hint: |-
            0: Mobile renders in LDR gamma space. (suggested for unlit games targeting low-end phones)
            1: Mobile renders in HDR linear space. (default)
        r.MobileMaxLoadedMips:
          hint: |-
            Maximum number of loaded mips for nonstreaming mobile platforms.
        r.MobileNumDynamicPointLights:
          hint: |-
            The number of dynamic point lights to support on mobile devices. Setting this to 0 for games which do not require dynamic point lights will reduce the number of shaders generated.
        r.MobileReduceLoadedMips:
          hint: |-
            Reduce loaded texture mipmaps for nonstreaming mobile platforms.
        r.MobileTonemapperUpscale:
          hint: |-
            On mobile, whether to allow upscaling as part of the tonemapper or as a separate pass when possible0: separate pass (default)
            1: as part of the tonemapper pass
        r.MorphTarget.ForceUpdate:
          hint: |-
            Force morph target deltas to be calculated every frame.
             0: Default
             1: Force Update
        r.MorphTarget.Mode:
          hint: |-
            Use GPU for computing morph targets.
             0: Use original CPU method (loop per morph then by vertex)
             1: Enable GPU method (default)
        r.MorphTarget.WeightThreshold:
          hint: |-
            Set MorphTarget Weight Threshold (Default : 0.000000).
        r.MotionBlur.AllowExternalVelocityFlatten:
          hint: |-
            Whether to allow motion blur's velocity flatten into other pass.
        r.MotionBlur.Amount:
          hint: |-
            Allows to override the postprocess setting (scale of motion blur)
            -1: override (default)
        r.MotionBlur.Directions:
          hint: |-
            Number of bluring direction (default = 1).
        r.MotionBlur.HalfResGather:
          hint: |-
            Whether to do motion blur filter dynamically at half res under heavy motion.
        r.MotionBlur.HalfResInput:
          hint: |-
            Whether motion blur also blur with a half resolution input.
        r.MotionBlur.Max:
          hint: |-
            Allows to override the postprocess setting (max length of motion blur, in percent of the screen width)
            -1: override (default)
        r.MotionBlur.Scale:
          hint: |-
            Allows to scale the postprocess intensity/amount setting in the postprocess.
            1: don't do any scaling (default)
        r.MotionBlur.TargetFPS:
          hint: |-
            Allows to override the postprocess setting (target FPS for motion blur velocity length scaling).
            -1: override (default) 0: target current frame rate with moving average
            [1,120]: target FPS for motion blur velocity scaling
        r.MotionBlur2ndScale:
          hint: |-
        r.MotionBlurDebug:
          hint: |-
            Defines if we log debugging output for motion blur rendering.
             0: off (default)
             1: on
        r.MotionBlurFiltering:
          hint: |-
            Useful developer variable
            0: off (default, expected by the shader for better quality)
            1: on
        r.MotionBlurQuality:
          hint: |-
            Defines the motion blur method which allows to adjust for quality or performance.
             0:off, 1:low, 2:medium, 3:high (default), 4: very high
        r.MotionBlurScatter:
          hint: |-
            Forces scatter based max velocity method (slower).
        r.MotionBlurSeparable:
          hint: |-
            Adds a second motion blur pass that smooths noise for a higher quality blur.
        r.MotionVectorSimulation:
          hint: |-
            Controls whether to allow simulated motion vectors on scene components, geometry caches and skinned meshes on camera cut frames.
        r.MrMesh.BrickCullingDebugState:
          hint: |-
            MR Mesh brick culling debug state: 0=off, 1=on, 2=paused
        r.MSAA.AllowCustomResolves:
          hint: |-
            Whether to use builtin HW resolve or allow custom shader MSAA resolves
        r.MSAA.CompositingSampleCount:
          hint: |-
            Affects the render quality of the editor 3d objects.
             1: no MSAA, lowest quality
             2: 2x MSAA, medium quality (medium GPU memory consumption)
             4: 4x MSAA, high quality (high GPU memory consumption)
             8: 8x MSAA, very high quality (insane GPU memory consumption)
        r.MSAACount:
          hint: |-
            Number of MSAA samples to use with the forward renderer.  Only used when MSAA is enabled in the rendering project settings.
            0: MSAA disabled (Temporal AA enabled)
            1: MSAA disabled
            2: Use 2x MSAA
            4: Use 4x MSAA
            8: Use 8x MSAA
        r.MultithreadedLightmapEncode:
          hint: |-
            Lightmap encoding after rebuild lightmaps is done multithreaded.
        r.MultithreadedShadowmapEncode:
          hint: |-
            Shadowmap encoding after rebuild lightmaps is done multithreaded.
        r.Nanite:
          hint: |-
            Render static meshes using Nanite.
        r.Nanite.AsyncRasterization:
          hint: |-
        r.Nanite.AutoShaderCulling:
          hint: |-
        r.Nanite.BoxCullingFrustum:
          hint: |-
        r.Nanite.BoxCullingHZB:
          hint: |-
        r.Nanite.ClassifyWithResolve:
          hint: |-
        r.Nanite.ClusterPerPage:
          hint: |-
        r.Nanite.CoarseMeshStreaming:
          hint: |-
            Generates 2 Nanite coarse mesh LODs and dynamically streams in the higher quality LOD depending on TLAS usage of the proxy.
        r.Nanite.CoarseMeshStreamingMode:
          hint: |-
            Streaming mode:
            0: Use TLAS proxies to drive what to stream within the budget (default)
            1: Stream in all registered meshes
            2: Don't stream in any coarse LODs
        r.Nanite.CoarseStreamingMeshMemoryPoolSizeInMB:
          hint: |-
            Pool size for streaming in the render mesh & blas data for the coarse nanite meshes (default 200MB)
            This budget will be part of the mesh streaming pool size.
            On consoles the actual BLAS memory will be part of this, on PC only the vertex data because the BLAS is dependent on the GPU & driver.
        r.Nanite.CompactVSMViews:
          hint: |-
        r.Nanite.ComputeRasterization:
          hint: |-
        r.Nanite.DisocclusionHack:
          hint: |-
            HACK that lowers LOD level of disoccluded instances to mitigate performance spikes
        r.Nanite.ErrorOnMaskedBlendMode:
          hint: |-
            Whether to error and use default material if masked blend mode is specified for a Nanite material.
        r.Nanite.ErrorOnPixelDepthOffset:
          hint: |-
            Whether to error and use default material if pixel depth offset is present on a Nanite material.
        r.Nanite.ErrorOnVertexInterpolator:
          hint: |-
            Whether to error and use default material if vertex interpolator is present on a Nanite material.
        r.Nanite.ErrorOnWorldPositionOffset:
          hint: |-
            Whether to error and use default material if world position offset is present on a Nanite material.
        r.Nanite.ExportDepth:
          hint: |-
        r.Nanite.FilterPrimitives:
          hint: |-
        r.Nanite.ImposterMaxPixels:
          hint: |-
        r.Nanite.IsolateInvalidCoarseMesh:
          hint: |-
            Debug mode to render only non-Nanite proxies that incorrectly reference coarse static mesh assets.
        r.Nanite.LargePageRectThreshold:
          hint: |-
            Threshold for the size in number of virtual pages overlapped of a candidate cluster to be recorded as large in the stats.
        r.Nanite.MaterialSortMode:
          hint: |-
            Method of sorting Nanite material draws. 0=disabled, 1=shader, 2=sortkey, 3=refcount
        r.Nanite.MaxCandidateClusters:
          hint: |-
            Maximum number of Nanite clusters before cluster culling.
        r.Nanite.MaxNodes:
          hint: |-
            Maximum number of Nanite nodes traversed during a culling pass.
        r.Nanite.MaxPixelsPerEdge:
          hint: |-
        r.Nanite.MaxVisibleClusters:
          hint: |-
            Maximum number of visible Nanite clusters.
        r.Nanite.MeshDrawCommands.CacheMultithreaded:
          hint: |-
            Enable multithreading of draw command caching for Nanite materials. 0=disabled, 1=enabled (default)
        r.Nanite.MinPixelsPerEdgeHW:
          hint: |-
        r.Nanite.MSInterp:
          hint: |-
        r.Nanite.OptimizedRelevance:
          hint: |-
            Whether to optimize Nanite relevance (outside of editor).
        r.Nanite.ParallelBasePassBuild:
          hint: |-
        r.Nanite.PrimitivesAlwaysVisible:
          hint: |-
            True - All Nanite primitives skip culling phases, False - All Nanite primitives are run through the culling phase.
        r.Nanite.PrimShaderRasterization:
          hint: |-
        r.Nanite.ProgrammableRaster:
          hint: |-
        r.Nanite.ProjectEnabled:
          hint: |-
            This setting allows you to disable Nanite on platforms that support it to reduce the number of shaders. It cannot be used to force Nanite on on unsupported platforms.
        r.Nanite.ProxyRenderMode:
          hint: |-
            Render proxy meshes if Nanite is unsupported. 0: Fall back to rendering Nanite proxy meshes if Nanite is unsupported. (default) 1: Disable rendering if Nanite is enabled on a mesh but is unsupported. 2: Disable rendering if Nanite is enabled on a mesh but is unsupported, except for static mesh editor toggle.
        r.Nanite.RequireDX12:
          hint: |-
        r.Nanite.ResummarizeHTile:
          hint: |-
        r.Nanite.ShowStats:
          hint: |-
        r.Nanite.ShowUnsupportedError:
          hint: |-
            Specify behavior of Nanite unsupported screen error message.
             0: disabled
             1: show error if Nanite is present in the scene but unsupported, and fallback meshes are not used for rendering; (default) 2: show error if Nanite is present in the scene but unsupported, even if fallback meshes are used for rendering
        r.Nanite.SphereCullingFrustum:
          hint: |-
        r.Nanite.SphereCullingHZB:
          hint: |-
        r.Nanite.StatsFilter:
          hint: |-
            Sets the name of a specific Nanite raster pass to capture stats from - enumerate available filters with `NaniteStats List` cmd.
        r.Nanite.Streaming.Async:
          hint: |-
            Perform most of the Nanite streaming on an asynchronous worker thread instead of the rendering thread.
        r.Nanite.Streaming.BandwidthLimit:
          hint: |-
            Streaming bandwidth limit in megabytes per second. Negatives values are interpreted as unlimited. 
        r.Nanite.Streaming.Debug.ExplicitRequests:
          hint: |-
            Process requests coming from explicit calls to RequestNanitePages().
        r.Nanite.Streaming.Debug.GPURequests:
          hint: |-
            Process requests coming from GPU rendering feedback
        r.Nanite.Streaming.Debug.Prefetch:
          hint: |-
            Process resource prefetch requests from calls to PrefetchResource().
        r.Nanite.Streaming.DynamicallyGrowAllocations:
          hint: |-
            Determines if root page and imposter allocations are allowed to grow dynamically from initial allocation set by r.Nanite.Streaming.NumInitialRootPages and r.Nanite.Streaming.NumInitialImposters
        r.Nanite.Streaming.Imposters:
          hint: |-
            Load imposters used for faster rendering of distant objects. Requires additional memory and might not be worthwhile for scenes with HLOD or no distant objects.
        r.Nanite.Streaming.MaxPageInstallsPerFrame:
          hint: |-
            Maximum number of pages that can be installed per frame. Limiting this can limit the overhead of streaming.
        r.Nanite.Streaming.MaxPendingPages:
          hint: |-
            Maximum number of pages that can be pending for installation.
        r.Nanite.Streaming.NumInitialImposters:
          hint: |-
            Number of imposters in initial allocation. Allowed to grow on demand if r.Nanite.Streaming.DynamicallyGrowAllocations is enabled.
        r.Nanite.Streaming.NumInitialRootPages:
          hint: |-
            Number of root pages in initial allocation. Allowed to grow on demand if r.Nanite.Streaming.DynamicallyGrowAllocations is enabled.
        r.Nanite.Streaming.StreamingPoolSize:
          hint: |-
            Size of streaming pool in MB. Does not include memory used for root pages.
        r.Nanite.ViewMeshLODBias.Enable:
          hint: |-
            Whether LOD offset to apply for rasterized Nanite meshes for the main viewport should be based off TSR's ScreenPercentage (Enabled by default).
        r.Nanite.ViewMeshLODBias.Min:
          hint: |-
            Minimum LOD offset for rasterizing Nanite meshes for the main viewport (Default = -2).
        r.Nanite.ViewMeshLODBias.Offset:
          hint: |-
            LOD offset to apply for rasterized Nanite meshes for the main viewport when using TSR (Default = 0).
        r.Nanite.Visualize:
          hint: |-
            When the viewport view-mode is set to 'Nanite Visualization', this command specifies which of the various channels to display. Values entered other than the allowed values shown below will be ignored.
              Overview
              Mask
              Triangles
              Clusters
              Primitives
              Instances
              Overdraw
              MaterialComplexity
              MaterialID
              LightmapUV
              Groups
              Pages
              Hierarchy
              RasterMode
              SceneZMin
              SceneZMax
              SceneZDelta
              MaterialZMin
              MaterialZMax
              MaterialZDelta
              MaterialMode
              MaterialIndex
              HitProxyID
              LightmapUVIndex
              LightmapDataIndex
              PositionBits
              VSMStatic
        r.Nanite.Visualize.Advanced:
          hint: |-
        r.Nanite.Visualize.ComplexityOverhead:
          hint: |-
        r.Nanite.Visualize.ComplexityScale:
          hint: |-
        r.Nanite.Visualize.Composite:
          hint: |-
        r.Nanite.Visualize.EdgeDetect:
          hint: |-
        r.Nanite.Visualize.OverdrawScale:
          hint: |-
        r.Nanite.VisualizeOverview:
          hint: |-
            Specify the list of modes that can be used in the Nanite visualization overview. Put nothing between the commas to leave a gap.
            	Choose from:
              Overview
              Mask
              Triangles
              Clusters
              Primitives
              Instances
              Overdraw
              MaterialComplexity
              MaterialID
              LightmapUV
              Groups
              Pages
              Hierarchy
              RasterMode
              SceneZMin
              SceneZMax
              SceneZDelta
              MaterialZMin
              MaterialZMax
              MaterialZDelta
              MaterialMode
              MaterialIndex
              HitProxyID
              LightmapUVIndex
              LightmapDataIndex
              PositionBits
              VSMStatic
        r.Nanite.VSMMeshShaderRasterization:
          hint: |-
        r.NeverOcclusionTestDistance:
          hint: |-
            When the distance between the viewpoint and the bounding sphere center is less than this, never occlusion cull.
        r.NormalCurvatureToRoughnessBias:
          hint: |-
            Biases the roughness resulting from screen space normal changes for materials with NormalCurvatureToRoughness enabled.  Valid range [-1, 1]
        r.NormalCurvatureToRoughnessExponent:
          hint: |-
            Exponent on the roughness resulting from screen space normal changes for materials with NormalCurvatureToRoughness enabled.
        r.NormalCurvatureToRoughnessScale:
          hint: |-
            Scales the roughness resulting from screen space normal changes for materials with NormalCurvatureToRoughness enabled.  Valid range [0, 2]
        r.NormalMapsForStaticLighting:
          hint: |-
            Whether to allow any static lighting to use normal maps for lighting computations.
        r.NumBufferedOcclusionQueries:
          hint: |-
            Number of frames to buffer occlusion queries (including the current renderthread frame).
            More frames reduces the chance of stalling the CPU waiting for results, but increases out of date query artifacts.
        r.NumFramesUnusedBeforeReleasingGlobalResourceBuffers:
          hint: |-
            Number of frames after which unused global resource allocations will be discarded. Set 0 to ignore. (default=30)
        r.NVIDIATimestampWorkaround:
          hint: |-
            If true we disable timestamps on pre-maxwell hardware (workaround for driver bug)
        r.Occlusion.SingleRHIThreadStall:
          hint: |-
            Enable a single RHI thread stall before polling occlusion queries. This will only happen if the RHI's occlusion queries would normally stall the RHI thread themselves.
        r.OcclusionCullParallelPrimFetch:
          hint: |-
            Enables Parallel Occlusion Cull primitive fetch.
        r.OIT.Debug:
          hint: |-
            Enable per-instance triangle sorting debug rendering.
        r.OIT.Pool:
          hint: |-
            Enable index buffer pool allocation which reduce creation/deletion time by re-use buffers.
        r.OIT.Pool.ReleaseFrameThreshold:
          hint: |-
            Number of frame after which unused buffer are released.
        r.OIT.SortObjectTriangles:
          hint: |-
            Enable per-instance triangle sorting to avoid invalid triangle ordering (experimental).
        r.OneFrameThreadLag:
          hint: |-
            Whether to allow the rendering thread to lag one frame behind the game thread (0: disabled, otherwise enabled)
        r.OpenGL.DisableTextureStreamingSupport:
          hint: |-
            Disable support for texture streaming on OpenGL.
              0 = Texture streaming will be used if device supports it [default]
              1 = Texture streaming will be disabled.
        r.OpenGL.ForceDXC:
          hint: |-
            Forces DirectX Shader Compiler (DXC) to be used for all OpenGL shaders instead of hlslcc.
             0: Disable
             1: Force new compiler for all shaders (default)
        r.OverrideShaderDebugDir:
          hint: |-
            Override output location of shader debug files
            Empty: use default location Saved\ShaderDebugInfo.
        r.Paper2D.DrawTwoSided:
          hint: |-
            Draw sprites as two sided.
        r.Paper2D.UsePrebuiltVertexBuffers:
          hint: |-
            Draw sprites using prebuilt vertex buffers.
        r.ParallelBasePass:
          hint: |-
            Toggles parallel base pass rendering. Parallel rendering must be enabled for this to have an effect.
        r.ParallelCmdListInheritBreadcrumbs:
          hint: |-
            Whether to inherit breadcrumbs to parallel cmd lists
        r.ParallelGatherNumPrimitivesPerPacket:
          hint: |-
            Number of primitives per packet.  Only used when r.Shadow.UseOctreeForCulling is disabled.
        r.ParallelGatherShadowPrimitives:
          hint: |-
            Toggles parallel Gather shadow primitives. 0 = off; 1 = on
        r.ParallelGeometryCollectionBatchSize:
          hint: |-
            The number of vertices per thread dispatch in a single collection. 
        r.ParallelInitViews:
          hint: |-
            Toggles parallel init views. 0 = off; 1 = on
        r.ParallelPrePass:
          hint: |-
            Toggles parallel zprepass rendering. Parallel rendering must be enabled for this to have an effect.
        r.ParallelShadows:
          hint: |-
            Toggles parallel shadow rendering. Parallel rendering must be enabled for this to have an effect.
        r.ParallelShadowsNonWholeScene:
          hint: |-
            Toggles parallel shadow rendering for non whole-scene shadows. r.ParallelShadows must be enabled for this to have an effect.
        r.ParallelSingleLayerWaterPass:
          hint: |-
            Toggles parallel single layer water pass rendering. Parallel rendering must be enabled for this to have an effect.
        r.ParallelTranslucency:
          hint: |-
            Toggles parallel translucency rendering. Parallel rendering must be enabled for this to have an effect.
        r.ParallelVelocity:
          hint: |-
            Toggles parallel velocity rendering. Parallel rendering must be enabled for this to have an effect.
        r.ParticleLightQuality:
          hint: |-
            0: No lights. 1:Only simple lights. 2:Simple+HQ lights
        r.ParticleLODBias:
          hint: |-
            LOD bias for particle systems, default is 0
        r.PathTracing:
          hint: |-
            Enables the path tracing renderer (to guard the compilation of path tracer specific material permutations)
        r.PathTracing.AbsorptionScale:
          hint: |-
            Sets the inverse distance at which BaseColor is reached for transmittance in refractive glass (default = 1/100 units)
            Setting this value to 0 will disable absorption handling for refractive glass
        r.PathTracing.ApproximateCaustics:
          hint: |-
            When non-zero, the path tracer will approximate caustic paths to reduce noise. This reduces speckles and noise from low-roughness glass and metals. (default = 1 (enabled))
        r.PathTracing.Compaction:
          hint: |-
            Enables path compaction to improve GPU occupancy for the path tracer (default: 1 (enabled))
        r.PathTracing.Denoiser:
          hint: |-
            Enable denoising of the path traced output (if a denoiser plugin is active) (default = -1 (driven by postprocesing volume))
            -1: inherit from PostProcessVolume
            0: disable denoiser
            1: enable denoiser (if a denoiser plugin is active)
        r.PathTracing.DispatchSize:
          hint: |-
            Controls the tile size used when rendering the image. Reducing this value may prevent GPU timeouts for heavy renders. (default = 2048)
        r.PathTracing.EnableCameraBackfaceCulling:
          hint: |-
            When non-zero, the path tracer will skip over backfacing triangles when tracing primary rays from the camera. (default = 1 (enabled))
        r.PathTracing.EnableEmissive:
          hint: |-
            Indicates if emissive materials should contribute to scene lighting (default = -1 (driven by postprocesing volume)
        r.PathTracing.FilterWidth:
          hint: |-
            Sets the anti-aliasing filter width (default = -1 (driven by postprocesing volume))
        r.PathTracing.FlushDispatch:
          hint: |-
            Enables flushing of the command list after dispatch to reduce the likelyhood of TDRs on Windows (default: 2)
            0: off
            1: flush after each dispatch
            2: flush after each tile
        r.PathTracing.FrameIndependentTemporalSeed:
          hint: |-
            Indicates to use different temporal seed for each sample across frames rather than resetting the sequence at the start of each frame
            0: off
            1: on (default)
        r.PathTracing.IndirectDispatch:
          hint: |-
            Enables indirect dispatch (if supported by the hardware) for compacted path tracing (default: 0 (disabled))
        r.PathTracing.LightGridMaxCount:
          hint: |-
            Controls the maximum number of lights per cell in the 2D light grid. The minimum of this value and the number of lights in the scene is used. (default = 128)
        r.PathTracing.LightGridResolution:
          hint: |-
            Controls the resolution of the 2D light grid used to cull irrelevant lights from lighting calculations (default = 256)
        r.PathTracing.LightGridVisualize:
          hint: |-
            Enables a visualization mode of the light grid density where red indicates the maximum light count has been reached (default = 0)
            0: off (default)
            1: light count heatmap (red - close to overflow, increase r.PathTracing.LightGridMaxCount)
            2: unique light lists (colors are a function of which lights occupy each cell)
            3: area light visualization (green: point light sources only, blue: some area light sources)
        r.PathTracing.MaxBounces:
          hint: |-
            Sets the maximum number of path tracing bounces (default = -1 (driven by postprocesing volume))
        r.PathTracing.MaxPathIntensity:
          hint: |-
            When positive, light paths greater that this amount are clamped to prevent fireflies (default = -1 (driven by postprocesing volume))
        r.PathTracing.MaxSSSBounces:
          hint: |-
            Sets the maximum number of bounces inside subsurface materials. Lowering this value can make subsurface scattering render too dim, while setting it too high can cause long render times.  (default = 256)
        r.PathTracing.MISCompensation:
          hint: |-
            Activates MIS compensation for skylight importance sampling. (default = 1 (enabled))
            This option only takes effect when r.PathTracing.MISMode = 2
        r.PathTracing.MISMode:
          hint: |-
            Selects the sampling technique for light integration (default = 2 (MIS enabled))
            0: Material sampling
            1: Light sampling
            2: MIS betwen material and light sampling (default)
        r.PathTracing.ProgressDisplay:
          hint: |-
            Enables an in-frame display of progress towards the defined sample per pixel limit. The indicator dissapears when the maximum is reached and sample accumulation has stopped (default = 0)
            0: off (default)
            1: on
        r.PathTracing.SamplerType:
          hint: |-
            Controls the way the path tracer generates its random numbers
            0: use a different high quality random sequence per pixel
            1: optimize the random sequence across pixels to reduce visible error at the target sample count
            2: share random seeds across pixels to improve coherence of execution on the GPU. This trades some correlation across the image in exchange for better performance.
        r.PathTracing.SamplesPerPixel:
          hint: |-
            Sets the maximum number of samples per pixel (default = -1 (driven by postprocesing volume))
        r.PathTracing.SkylightCaching:
          hint: |-
            Attempts to re-use skylight data between frames. (default = 1 (enabled))
            When set to 0, the skylight texture and importance samping data will be regenerated every frame. This is mainly intended as a benchmarking and debugging aid
        r.PathTracing.VisibleLights:
          hint: |-
            Should light sources be visible to camera rays? (default = 0 (off))
            0: Hide lights from camera rays (default)
            1: Make all lights visible to camera
            2: Make skydome only visible to camera
        r.PathTracing.WiperMode:
          hint: |-
            Enables wiper mode to render using the path tracer only in a region of the screen for debugging purposes (default = 0, wiper mode disabled)
        r.Photography.Available:
          hint: |-
            (Read-only) If 1, the photography system is potentially available to the user.
            Otherwise, a functioning back-end is not available.
        r.PhysicsField.ClipmapCount:
          hint: |-
            Number of clipmaps used for the physics field
        r.PhysicsField.ClipmapDistance:
          hint: |-
            Max distance from the clipmap center
        r.PhysicsField.ClipmapExponent:
          hint: |-
            Exponent used to derive each clipmap's size, together with r.PhysicsField.ClipmapDistance
        r.PhysicsField.ClipmapResolution:
          hint: |-
            Resolution of the physics field.  Higher values increase fidelity but also increase memory and composition cost.
        r.PhysicsField.EnableCulling:
          hint: |-
            Enable the spatial culling based on the field nodes bounds
        r.PhysicsField.EnableField:
          hint: |-
            Enable/Disable the Physics field clipmap
        r.PhysicsField.Rendering.EvalType:
          hint: |-
            Physics field boolean to check if we are evaluating exactly(0) or sampling(1) the field for visualisation.
        r.PhysicsField.Rendering.SystemType:
          hint: |-
            Physics field boolean to check if we want to display the CPU(0) or GPU(1) field.
        r.PhysicsField.Rendering.TargetType:
          hint: |-
            Physics field target to be used in the viewport show options.
        r.PhysicsField.SingleTarget:
          hint: |-
            Limnit the physics field build to only one target, the linear force
        r.PostProcessAllowBlendModes:
          hint: |-
            Enables blend modes in post process materials.
            0: disable blend modes. Uses replace
            1: allow blend modes
        r.PostProcessAllowStencilTest:
          hint: |-
            Enables stencil testing in post process materials.
            0: disable stencil testing
            1: allow stencil testing
        r.PostProcessing.DisableMaterials:
          hint: |-
             Allows to disable post process materials. 
        r.PostProcessing.DownsampleChainQuality:
          hint: |-
            Defines the quality used for downsampling to the scene color in scene color chains.
             0: low quality
             1: high quality (default)
        r.PostProcessing.DownsampleQuality:
          hint: |-
            Defines the quality used for downsampling to half or quarter res the scene color in post processing chain.
             0: low quality (default)
             1: high quality
        r.PostProcessing.ForceAsyncDispatch:
          hint: |-
            Will force asynchronous dispatch for post processing compute shaders where implementations available.
            Only available for testing in non-shipping builds.
        r.PostProcessing.PreferCompute:
          hint: |-
            Will use compute shaders for post processing where implementations available.
        r.PostProcessing.PropagateAlpha:
          hint: |-
            0 to disable scene alpha channel support in the post processing.
             0: disabled (default);
             1: enabled in linear color space;
             2: same as 1, but also enable it through the tonemapper. Compositing after the tonemapper is incorrect, as their is no meaning to tonemap the alpha channel. This is only meant to be use exclusively for broadcasting hardware that does not support linear color space compositing and tonemapping.
        r.PostProcessing.QuarterResolutionDownsample:
          hint: |-
            Uses quarter resolution downsample instead of half resolution to feed into exposure / bloom.
        r.PostProcessingColorFormat:
          hint: |-
            Defines the memory layout (RGBA) used for most of the post processing chain buffers.
             0: Default
             1: Force PF_A32B32G32R32F 128Bit (unreasonable but good for testing)
        r.PrecomputedVisibilityWarning:
          hint: |-
            If set to 1, a warning will be displayed when rendering a scene from a view point without precomputed visibility.
        r.PreTileTextures:
          hint: |-
            If set to 1, textures will be tiled during cook and are expected to be cooked at runtime
        r.PreventInvalidMaterialConnections:
          hint: |-
            Controls whether users can make connections in the material editor if the system
            determines that they may cause compile errors
            0: Allow all connections
            1: Prevent invalid connections
        r.ProfileGPU.AssetSummaryCallOuts:
          hint: |-
            Comma separated list of substrings that deserve special mention in the final summary (e.g., "LOD,HeroName"
            r.ProfileGPU.PrintAssetSummary must be true to enable this feature
        r.ProfileGPU.Pattern:
          hint: |-
            Allows to filter the entries when using ProfileGPU, the pattern match is case sensitive.
            '*' can be used in the end to get all entries starting with the string.
                '*' without any leading characters disables the pattern matching and uses a time threshold instead (default).
            '?' allows to ignore one character.
            e.g. AmbientOcclusionSetup, AmbientOcclusion*, Ambient???lusion*, *
        r.ProfileGPU.PrintAssetSummary:
          hint: |-
            Should we print a summary split by asset (r.ShowMaterialDrawEvents is strongly recommended as well).
        r.ProfileGPU.Root:
          hint: |-
            Allows to filter the tree when using ProfileGPU, the pattern match is case sensitive.
        r.ProfileGPU.Screenshot:
          hint: |-
            Whether a screenshot should be taken when profiling the GPU. 0:off, 1:on (default)
        r.ProfileGPU.ShowEventHistogram:
          hint: |-
            Whether the event histogram should be shown.
        r.ProfileGPU.ShowLeafEvents:
          hint: |-
            Allows profileGPU to display event-only leaf nodes with no draws associated.
        r.ProfileGPU.ShowTransitions:
          hint: |-
            Allows profileGPU to display resource transition events.
        r.ProfileGPU.ShowUI:
          hint: |-
            Whether the user interface profiler should be displayed after profiling the GPU.
            The results will always go to the log/console
            0:off, 1:on (default)
        r.ProfileGPU.Sort:
          hint: |-
            Sorts the TTY Dump independently at each level of the tree in various modes.
            0 : Chronological
            1 : By time elapsed
            2 : By number of prims
            3 : By number of verts
        r.ProfileGPU.ThresholdPercent:
          hint: |-
            Percent of the total execution duration the event needs to be larger than to be printed.
        r.ProxyLODChartColorVerts:
          hint: |-
            Color verts by uv chart.  Default off.
            0: Disabled 
            1: Enabled.
        r.ProxyLODCorrectCollapsedWalls:
          hint: |-
            Shall the ProxyLOD system attemp to correct walls with interpenetrating faces0: disabled (default)
            1: endable, may cause cracks.
        r.ProxyLODMaterialInParallel:
          hint: |-
            0: disable doing material work in parallel with mesh simplification
            1: enable - default
        r.ProxyLODMaxDilationSteps:
          hint: |-
            Limit the numer of dilation steps used in gap filling for performance reasons
            This may affect gap filling quality as bigger dilations steps will be used with a smaller max 
            0: will disable gap filling
            7: default
        r.ProxyLODMeshReductionModule:
          hint: |-
            Name of the Proxy LOD reduction module to choose. If blank it chooses any that exist.
        r.ProxyLODRemeshOnly:
          hint: |-
            Only remesh.  No simplification or materials. Default off.
            0: Disabled - will simplify and generate materials 
            1: Enabled  - will not simplfy or generate materials.
        r.ProxyLODSingleThreadSimplify:
          hint: |-
            Use single threaded code path. Default off.
            0: Multithreaded 
            1: Single threaded.
        r.ProxyLODTransfer:
          hint: |-
            0: shoot both ways
            1: preference for forward (default)
        r.ProxyLODUseTangentSpace:
          hint: |-
            Shall the ProxyLOD system generate a true tangent space at each vertex0: world space at each vertex
            1: tangent space at each vertex (default)
        r.pso.evictiontime:
          hint: |-
            Time between checks to remove stale objects from the cache. 0 = no eviction (which may eventually OOM...)
        r.RayTracing:
          hint: |-
            0 to disable ray tracing.
             0: off
             1: on
        r.RayTracing.AllowInline:
          hint: |-
            Allow use of Inline Ray Tracing if supported (default=1).
        r.RayTracing.AllowPipeline:
          hint: |-
            Allow use of Ray Tracing pipelines if supported (default=1).
        r.RayTracing.AmbientOcclusion:
          hint: |-
            -1: Value driven by postprocess volume (default) 
             0: ray tracing ambient occlusion off 
             1: ray tracing ambient occlusion enabled
        r.RayTracing.AmbientOcclusion.EnableMaterials:
          hint: |-
            Enables 
        r.RayTracing.AmbientOcclusion.EnableTwoSidedGeometry:
          hint: |-
            Enables two-sided geometry when tracing shadow rays (default = 0)
        r.RayTracing.AmbientOcclusion.SamplesPerPixel:
          hint: |-
            Sets the samples-per-pixel for ambient occlusion (default = -1 (driven by postprocesing volume))
        r.RayTracing.AMDHitToken:
          hint: |-
            Whether to allow the AMD HitToken extension
        r.RayTracing.AsyncBuild:
          hint: |-
            Whether to build ray tracing acceleration structures on async compute queue.
        r.RayTracing.AutoInstance:
          hint: |-
            Whether to auto instance static meshes
        r.RayTracing.CompileMaterialAHS:
          hint: |-
             0: skip compilation of any-hit shaders for materials (useful if alpha masked or translucent materials are not needed)
             1: compile any hit shaders for all ray tracing materials (default)
        r.RayTracing.CompileMaterialCHS:
          hint: |-
             0: skip compilation of closest-hit shaders for materials (useful if only shadows or ambient occlusion effects are needed)
             1: compile closest hit shaders for all ray tracing materials (default)
        r.RayTracing.Culling:
          hint: |-
            Enable culling in ray tracing for objects that are behind the camera
             0: Culling disabled (default)
             1: Culling by distance and solid angle enabled. Only cull objects behind camera.
             2: Culling by distance and solid angle enabled. Cull objects in front and behind camera.
             3: Culling by distance OR solid angle enabled. Cull objects in front and behind camera.
        r.RayTracing.Culling.Angle:
          hint: |-
            Do camera culling for objects behind the camera with a projected angle smaller than this threshold in ray tracing effects (default = 5 degrees )
        r.RayTracing.Culling.PerInstance:
          hint: |-
        r.RayTracing.Culling.Radius:
          hint: |-
            Do camera culling for objects behind the camera outside of this radius in ray tracing effects (default = 10000 (100m))
        r.RayTracing.Culling.UseGroupIds:
          hint: |-
            Cull using aggregate ray tracing group id bounds when defined instead of primitive or instance bounds.
        r.RayTracing.DebugDisableTriangleCull:
          hint: |-
            Forces all ray tracing geometry instances to be double-sided by disabling back-face culling. This is useful for debugging and profiling. (default = 0)
        r.RayTracing.DebugForceOpaque:
          hint: |-
            Forces all ray tracing geometry instances to be opaque, effectively disabling any-hit shaders. This is useful for debugging and profiling. (default = 0)
        r.Raytracing.DebugForceRuntimeBLAS:
          hint: |-
            Force building BLAS at runtime.
        r.RayTracing.DebugTimingScale:
          hint: |-
            Scaling factor for ray timing heat map visualization. (default = 1)
        r.RayTracing.DebugTraversalScale.Box:
          hint: |-
            Scaling factor for box traversal heat map visualization. (default = 150)
        r.RayTracing.DebugTraversalScale.Triangle:
          hint: |-
            Scaling factor for triangle traversal heat map visualization. (default = 30)
        r.RayTracing.DebugVisualizationMode:
          hint: |-
            Sets the ray tracing debug visualization mode (default = None - Driven by viewport menu) .
        r.RayTracing.DebugVisualizationMode.OpaqueOnly:
          hint: |-
            Sets whether the view mode rendes opaque objects only (default = 1, render only opaque objects, 0 = render all objects)
        r.RayTracing.DynamicGeometry.SharedVertexBufferGarbageCollectLatency:
          hint: |-
            Amount of update cycles before a heap is deleted when not used (default 30).
        r.RayTracing.DynamicGeometry.SharedVertexBufferSizeInMB:
          hint: |-
            Size of the a single shared vertex buffer used during the BLAS update of dynamic geometries (default 4MB)
        r.RayTracing.DynamicGeometryLastRenderTimeUpdateDistance:
          hint: |-
            Dynamic geometries within this distance will have their LastRenderTime updated, so that visibility based ticking (like skeletal mesh) can work when the component is not directly visible in the view (but reflected).
        r.RayTracing.EnableMaterials:
          hint: |-
             0: bind default material shader that outputs placeholder data
             1: bind real material shaders (default)
        r.RayTracing.ExcludeDecals:
          hint: |-
            A toggle that modifies the inclusion of decals in the ray tracing BVH.
             0: Decals included in the ray tracing BVH (default)
             1: Decals excluded from the ray tracing BVH
        r.RayTracing.ExcludeSky:
          hint: |-
            A toggle that controls inclusion of sky geometry in the ray tracing scene (excluding sky can make ray tracing faster).
             0: Sky objects included in the ray tracing scene
             1: Sky objects excluded from the ray tracing scene (default)
        r.RayTracing.ExcludeTranslucent:
          hint: |-
            A toggle that modifies the inclusion of translucent objects in the ray tracing scene.
             0: Translucent objects included in the ray tracing scene (default)
             1: Translucent objects excluded from the ray tracing scene
        r.RayTracing.ForceAllRayTracingEffects:
          hint: |-
            Force all ray tracing effects ON/OFF.
             -1: Do not force (default) 
             0: All ray tracing effects disabled
             1: All ray tracing effects enabled
        r.RayTracing.GatherWorldInstancingInlineThreshold:
          hint: |-
        r.RayTracing.Geometry.GeometryCache:
          hint: |-
            Include geometry cache primitives in ray tracing effects (default = 1 (geometry cache enabled in ray tracing))
        r.RayTracing.Geometry.GeometryCollection:
          hint: |-
            Include geometry collection proxy meshes in ray tracing effects (default = 0 (Geometry collection meshes disabled in ray tracing))
        r.RayTracing.Geometry.InstancedStaticMeshes:
          hint: |-
            Include static mesh instances in ray tracing effects (default = 1 (Instances enabled in ray tracing))
        r.RayTracing.Geometry.InstancedStaticMeshes.CullAngle:
          hint: |-
            Solid angle to test instance bounds against for culling (default 2 degrees)
              -1 => use distance based culling
        r.RayTracing.Geometry.InstancedStaticMeshes.CullClusterMaxRadiusMultiplier:
          hint: |-
            Multiplier for the maximum instance size (default = 20)
        r.RayTracing.Geometry.InstancedStaticMeshes.CullClusterRadius:
          hint: |-
            Ignore instances outside of this radius in ray tracing effects (default = 10000 (100m))
        r.RayTracing.Geometry.InstancedStaticMeshes.Culling:
          hint: |-
            Enable culling for instances in ray tracing (default = 1 (Culling enabled))
        r.RayTracing.Geometry.InstancedStaticMeshes.EvaluateWPO:
          hint: |-
            Whether to evaluate WPO on instanced static meshes
              0 - off (default)  1 - on for all with WPO -1 - on only for meshes with evaluate WPO enabled
        r.RayTracing.Geometry.InstancedStaticMeshes.LowScaleCullRadius:
          hint: |-
            Cull radius for small instances (default = 1000 (10m))
        r.RayTracing.Geometry.InstancedStaticMeshes.LowScaleRadiusThreshold:
          hint: |-
            Threshold that classifies instances as small (default = 50cm))
        r.RayTracing.Geometry.InstancedStaticMeshes.SimulationClusterRadius:
          hint: |-
            Bucket instances based on distance to camera for simulating WPO (default = 500 (5m), disable if <= 0)
        r.RayTracing.Geometry.InstancedStaticMeshes.SimulationCount:
          hint: |-
            Maximum number of instances to simulate per instanced static mesh, presently capped to 256
        r.RayTracing.Geometry.Landscape:
          hint: |-
            Include landscapes in ray tracing effects (default = 1 (landscape enabled in ray tracing))
        r.RayTracing.Geometry.Landscape.DetectTextureStreaming:
          hint: |-
            If on, update ray tracing geometry when texture streaming state changes. Useful when WorldPositionOffset is used in the landscape material
        r.RayTracing.Geometry.Landscape.LODsUpdateEveryFrame:
          hint: |-
            If on, LODs that are lower than the specified level will be updated every frame, which can be used to workaround some artifacts caused by texture streaming if you're using WorldPositionOffset on the landscape
        r.RayTracing.Geometry.MaxBuiltPrimitivesPerFrame:
          hint: |-
            Sets the ray tracing acceleration structure build budget in terms of maximum number of triangles per frame (<= 0 then disabled and all acceleration structures are build immediatly - default)
        r.RayTracing.Geometry.NaniteProxies:
          hint: |-
            Include Nanite proxy meshes in ray tracing effects (default = 1 (Nanite proxy meshes enabled in ray tracing))
        r.RayTracing.Geometry.NiagaraMeshes:
          hint: |-
            Include Niagara meshes in ray tracing effects (default = 1 (Niagara meshes enabled in ray tracing))
        r.RayTracing.Geometry.NiagaraRibbons:
          hint: |-
            Include Niagara ribbons in ray tracing effects (default = 1 (Niagara ribbons enabled in ray tracing))
        r.RayTracing.Geometry.NiagaraSprites:
          hint: |-
            Include Niagara sprites in ray tracing effects (default = 1 (Niagara sprites enabled in ray tracing))
        r.RayTracing.Geometry.PendingBuildPriorityBoostPerFrame:
          hint: |-
            Increment the priority for all pending build requests which are not scheduled that frame (0.001 - default)
        r.RayTracing.Geometry.ProceduralMeshes:
          hint: |-
            Include procedural meshes in ray tracing effects (default = 1 (procedural meshes enabled in ray tracing))
        r.RayTracing.Geometry.SkeletalMeshes:
          hint: |-
            Include skeletal meshes in ray tracing effects (default = 1 (skeletal meshes enabled in ray tracing))
        r.RayTracing.Geometry.SkeletalMeshes.LODBias:
          hint: |-
            Global LOD bias for skeletal meshes in ray tracing.
            When non-zero, a different LOD level other than the predicted LOD level will be used for ray tracing. Advanced features like morph targets and cloth simulation may not work properly.
            Final LOD level to use in ray tracing is the sum of this global bias and the bias set on each skeletal mesh asset.
        r.RayTracing.Geometry.StaticMeshes:
          hint: |-
            Include static meshes in ray tracing effects (default = 1 (static meshes enabled in ray tracing))
        r.RayTracing.Geometry.StaticMeshes.WPO:
          hint: |-
            World position offset evaluation for static meshes with EvaluateWPO enabled in ray tracing effects 0: static meshes with world position offset hidden in ray tracing 1: static meshes with world position offset visible in ray tracing, WPO evaluation enabled (default) 2: static meshes with world position offset visible in ray tracing, WPO evaluation disabled
        r.RayTracing.Geometry.StaticMeshes.WPO.Culling:
          hint: |-
            Enable culling for WPO evaluation for static meshes in ray tracing (default = 1 (Culling enabled))
        r.RayTracing.Geometry.StaticMeshes.WPO.CullingRadius:
          hint: |-
            Do not evaluate world position offset for static meshes outside of this radius in ray tracing effects (default = 5000 (50m))
        r.RayTracing.Geometry.SupportSkeletalMeshes:
          hint: |-
            Whether the project supports skeletal meshes in ray tracing effects. Turning this off disables creation of all skeletal mesh ray tracing GPU resources, saving GPU memory and time. This setting is read-only at runtime. (default: 1)
        r.RayTracing.GlobalIllumination:
          hint: |-
            -1: Value driven by postprocess volume (default) 
             0: ray tracing global illumination off 
             1: ray tracing global illumination enabled (brute force) 
             2: ray tracing global illumination enabled (final gather)
        r.RayTracing.GlobalIllumination.Denoiser:
          hint: |-
            Denoising options (default = 1)
        r.RayTracing.GlobalIllumination.DiffuseThreshold:
          hint: |-
            Diffuse luminance threshold for evaluating global illuminationNOTE: This parameter is experimental
        r.RayTracing.GlobalIllumination.EnableTransmission:
          hint: |-
            Enables transmission when tracing GI rays (default = 1)
        r.RayTracing.GlobalIllumination.EnableTwoSidedGeometry:
          hint: |-
            Enables two-sided geometry when tracing GI rays (default = 1)
        r.RayTracing.GlobalIllumination.EvalSkyLight:
          hint: |-
            Evaluate SkyLight multi-bounce contributionNOTE: This parameter is experimental
        r.RayTracing.GlobalIllumination.FinalGather.DepthRejectionKernel:
          hint: |-
            Gather point relative Z-depth rejection tolerance (default = 1.0e-2)
        r.RayTracing.GlobalIllumination.FinalGather.Distance:
          hint: |-
            Maximum screen-space distance for valid, reprojected final gather points (default = 10)
        r.RayTracing.GlobalIllumination.FinalGather.EnableNeighborVisibilityTest:
          hint: |-
            Enables neighbor visibility tests when FilterWidth > 0 (default = 0)
        r.RayTracing.GlobalIllumination.FinalGather.FilterWidth:
          hint: |-
            Determines the local neighborhood for sample stealing (default = 0)
        r.RayTracing.GlobalIllumination.FinalGather.Iterations:
          hint: |-
            Determines the number of iterations for gather point creation
        r.RayTracing.GlobalIllumination.FinalGather.NormalRejectionKernel:
          hint: |-
            Gather point WorldNormal rejection tolerance (default = 1.0e-2)
        r.RayTracing.GlobalIllumination.FinalGather.SortMaterials:
          hint: |-
            Sets whether refected materials will be sorted before shading
            0: Disabled
             1: Enabled, using Trace->Sort->Trace (Default)
        r.RayTracing.GlobalIllumination.FinalGather.SortSize:
          hint: |-
            Size of horizon for material ID sort
            0: Disabled
            1: 256 Elements
            2: 512 Elements
            3: 1024 Elements
            4: 2048 Elements
            5: 4096 Elements (Default)
        r.RayTracing.GlobalIllumination.FinalGather.SortTileSize:
          hint: |-
            Size of pixel tiles for sorted global illumination (default = 64)
        r.RayTracing.GlobalIllumination.FireflySuppression:
          hint: |-
            Applies tonemap operator to suppress potential fireflies (default = 0). 
        r.RayTracing.GlobalIllumination.Lights.DirectionalLight:
          hint: |-
            Enables DirectionalLight sampling for global illumination (default = 1)
        r.RayTracing.GlobalIllumination.Lights.PointLight:
          hint: |-
            Enables PointLight sampling for global illumination (default = 1)
        r.RayTracing.GlobalIllumination.Lights.RectLight:
          hint: |-
            Enables RectLight sampling for global illumination (default = 1)
        r.RayTracing.GlobalIllumination.Lights.SkyLight:
          hint: |-
            Enables SkyLight sampling for global illumination (default = 1)
        r.RayTracing.GlobalIllumination.Lights.SpotLight:
          hint: |-
            Enables SpotLight sampling for global illumination (default = 1)
        r.RayTracing.GlobalIllumination.MaxBounces:
          hint: |-
            Max bounces (default = -1 (driven by postprocesing volume))
        r.RayTracing.GlobalIllumination.MaxLightCount:
          hint: |-
            Enables two-sided geometry when tracing GI rays (default = 256)
        r.RayTracing.GlobalIllumination.MaxRayDistance:
          hint: |-
            Max ray distance (default = 1.0e27)
        r.RayTracing.GlobalIllumination.MaxShadowDistance:
          hint: |-
            Max shadow distance (default = -1.0, distance adjusted automatically so shadow rays do not hit the sky sphere) 
        r.RayTracing.GlobalIllumination.NextEventEstimationSamples:
          hint: |-
            Number of sample draws for next-event estimation (default = 2)NOTE: This parameter is experimental
        r.RayTracing.GlobalIllumination.RenderTileSize:
          hint: |-
            Render ray traced global illumination in NxN pixel tiles, where each tile is submitted as separate GPU command buffer, allowing high quality rendering without triggering timeout detection. (default = 0, tiling disabled)
        r.RayTracing.GlobalIllumination.SamplesPerPixel:
          hint: |-
            Samples per pixel (default = -1 (driven by postprocesing volume))
        r.RayTracing.GlobalIllumination.ScreenPercentage:
          hint: |-
            Screen percentage for ray tracing global illumination (default = 50)
        r.RayTracing.GlobalIllumination.UseRussianRoulette:
          hint: |-
            Perform Russian Roulette to only cast diffuse rays on surfaces with brighter albedos (default = 0)NOTE: This parameter is experimental
        r.RayTracing.LightCulling.Cells:
          hint: |-
            Number of cells in each dimension for lighting grid (default 16)
        r.RayTracing.LightCulling.CellSize:
          hint: |-
            Minimum size of light cell (default 200 units)
        r.RayTracing.MeshDrawCommands.CacheMultithreaded:
          hint: |-
            Enable multithreading of raytracing primitive mesh command caching. 0=disabled, 1=enabled (default)
        r.RayTracing.NonBlockingPipelineCreation:
          hint: |-
            Enable background ray tracing pipeline creation, without blocking RHI or Render thread.
            Fallback opaque black material will be used for missing shaders meanwhile.
             0: off (default, rendering will always use correct requested material)
             1: on (non-blocking mode may sometimes use the fallback opaque black material)
        r.RayTracing.NormalBias:
          hint: |-
            Sets the max. normal bias used for offseting the ray start position along the normal (default = 0.1, i.e., 1mm)
        r.RayTracing.ParallelMeshBatchSetup:
          hint: |-
            Whether to setup ray tracing materials via parallel jobs.
        r.RayTracing.ParallelMeshBatchSize:
          hint: |-
            Batch size for ray tracing materials parallel jobs.
        r.RayTracing.PSOCacheSize:
          hint: |-
            Number of ray tracing pipelines to keep in the cache (default = 50). Set to 0 to disable eviction.
        r.RayTracing.Reflections:
          hint: |-
            -1: Value driven by postprocess volume (default) 
            0: use traditional rasterized SSR
            1: use ray traced reflections
        r.RayTracing.Reflections.DirectLighting:
          hint: |-
            Enables ray tracing reflections direct lighting (default = 1)
        r.RayTracing.Reflections.EmissiveAndIndirectLighting:
          hint: |-
            Enables ray tracing reflections emissive and indirect lighting (default = 1)
        r.RayTracing.Reflections.EnableTwoSidedGeometry:
          hint: |-
            Two-sided geometry setting for reflection rays. (default = 1)
        r.RayTracing.Reflections.ExperimentalDeferred:
          hint: |-
            Whether to use the experimental deferred ray traced reflection rendering algorithm, which only supports a subset of features but runs faster. (default = 0).
        r.RayTracing.Reflections.ExperimentalDeferred.AnyHitMaxRoughness:
          hint: |-
            Allows skipping AnyHit shader execution for rough reflection rays (default: 0.1)
        r.RayTracing.Reflections.ExperimentalDeferred.GenerateRaysWithRGS:
          hint: |-
            Whether to generate reflection rays directly in RGS or in a separate compute shader (default: 1)
        r.RayTracing.Reflections.ExperimentalDeferred.Glossy:
          hint: |-
            Whether to use glossy reflections with GGX sampling or to force mirror-like reflections for performance (default: 1)
        r.RayTracing.Reflections.ExperimentalDeferred.HorizontalResolutionScale:
          hint: |-
            Reflection resolution scaling for the X axis between 0.25 and 4.0. Can only be used when spatial resolve is enabled. (default: 1)
        r.RayTracing.Reflections.ExperimentalDeferred.MipBias:
          hint: |-
            Global texture mip bias applied during ray tracing material evaluation. (default: 0)
            Improves ray tracing reflection performance at the cost of lower resolution textures in reflections. Values are clamped to range [0..15].
        r.RayTracing.Reflections.ExperimentalDeferred.SmoothBias:
          hint: |-
            Whether to bias reflections towards smooth / mirror-like directions. Improves performance, but is not physically based. (default: 0)
            The bias is implemented as a non-linear function, affecting low roughness values more than high roughness ones.
            Roughness values higher than this CVar value remain entirely unaffected.
        r.RayTracing.Reflections.ExperimentalDeferred.SpatialResolve:
          hint: |-
            Whether to use a basic spatial resolve (denoising) filter on reflection output. Not compatible with regular screen space denoiser. (default: 1)
        r.RayTracing.Reflections.ExperimentalDeferred.SpatialResolve.MaxRadius:
          hint: |-
            Maximum radius in pixels of the native reflection image. Actual radius depends on output pixel roughness, rougher reflections using larger radius. (default: 8)
        r.RayTracing.Reflections.ExperimentalDeferred.SpatialResolve.NumSamples:
          hint: |-
            Maximum number of screen space samples to take during spatial resolve step. More samples produces smoother output at higher GPU cost. Specialized shader is used for 4, 8, 12 and 16 samples. (default: 8)
        r.RayTracing.Reflections.ExperimentalDeferred.SpatialResolve.TemporalQuality:
          hint: |-
            0: Disable temporal accumulation
            1: Tile-based temporal accumulation (low quality)
            2: Tile-based temporal accumulation with randomized tile offsets per frame (medium quality)
            (default: 2)
        r.RayTracing.Reflections.ExperimentalDeferred.SpatialResolve.TemporalWeight:
          hint: |-
            Defines whether to perform temporal accumulation during reflection spatial resolve and how much weight to give to history. Valid values in range [0..1]. (default: 0.90)
        r.RayTracing.Reflections.HeightFog:
          hint: |-
            Enables height fog in ray traced reflections (default = 1)
        r.RayTracing.Reflections.Hybrid:
          hint: |-
            Sets whether screen space reflections should be used when possible (experimental).
            Forces material sorting and single ray bounce.
            0: Disabled (Default)
             1: Enabled
        r.RayTracing.Reflections.MaxBounces:
          hint: |-
            Sets the maximum number of ray tracing reflection bounces (default = -1 (max bounces driven by postprocessing volume))
        r.RayTracing.Reflections.MaxRayDistance:
          hint: |-
            Sets the maximum ray distance for ray traced reflection rays. When ray shortening is used, skybox will not be sampled in RT reflection pass and will be composited later, together with local reflection captures. Negative values turn off this optimization. (default = -1 (infinite rays))
        r.RayTracing.Reflections.MaxRoughness:
          hint: |-
            Sets the maximum roughness until which ray tracing reflections will be visible (default = -1 (max roughness driven by postprocessing volume))
        r.RayTracing.Reflections.MaxUnderCoatBounces:
          hint: |-
            How many bounces to apply ray traced reflections to the undercoat layer. Extra bounces will use reflection probes. (default 0, always use probes)
        r.RayTracing.Reflections.MinClearCoatLevel:
          hint: |-
            Minimum level at which to apply clear coat shading (default 0.01)
             Note: causes some variation in height fog due to using the bottom layer path
        r.RayTracing.Reflections.MinRayDistance:
          hint: |-
            Sets the minimum ray distance for ray traced reflection rays. Actual reflection ray length is computed as Lerp(MaxRayDistance, MinRayDistance, Roughness), i.e. reflection rays become shorter when traced from rougher surfaces. (default = -1 (infinite rays))
        r.RayTracing.Reflections.NormalBias:
          hint: |-
            Magnitude of normal bias for reflection rays. (default = 0.1)
        r.RayTracing.Reflections.RayTraceSkyLightContribution:
          hint: |-
            Requests ray tracing reflections to use ray traced visibility rays for sky light contribution similar to sky light ray traced shadows. A Sky Light with ray traced shadows enabled must be present for this flag to take effect. (default = 0)
        r.RayTracing.Reflections.ReflectionCaptures:
          hint: |-
            Enables ray tracing reflections to use reflection captures as the last bounce reflection. Particularly usefull for metals in reflection. (default = 0)
        r.RayTracing.Reflections.RenderTileSize:
          hint: |-
            Render ray traced reflections in NxN pixel tiles, where each tile is submitted as separate GPU command buffer, allowing high quality rendering without triggering timeout detection (default = 0, tiling disabled)
        r.RayTracing.Reflections.SamplesPerPixel:
          hint: |-
            Sets the samples-per-pixel for reflections (default = -1 (driven by postprocesing volume))
        r.RayTracing.Reflections.ScreenPercentage:
          hint: |-
            Screen percentage the reflections should be ray traced at (default = 100).
        r.RayTracing.Reflections.Shadows:
          hint: |-
            Enables shadows in ray tracing reflections) -1: Shadows driven by postprocessing volume (default) 0: Shadows disabled  1: Hard shadows 2: Soft area shadows
        r.RayTracing.Reflections.SortMaterials:
          hint: |-
            Sets whether refected materials will be sorted before shading
            0: Disabled
             1: Enabled, using Trace->Sort->Trace (Default)
        r.RayTracing.Reflections.SortSize:
          hint: |-
            Size of horizon for material ID sort
            0: Disabled
            1: 256 Elements
            2: 512 Elements
            3: 1024 Elements
            4: 2048 Elements
            5: 4096 Elements (Default)
        r.RayTracing.Reflections.SortTileSize:
          hint: |-
            Size of pixel tiles for sorted reflections
              Default 64
        r.RayTracing.Reflections.TestPathRoughness:
          hint: |-
            Accumulate roughness along path and test accumulated roughness against MaxRoughness before launching the next bounce (default 1)
        r.RayTracing.Reflections.Translucency:
          hint: |-
            Translucent objects visible in ray tracing reflections) -1: Driven by postprocessing volume (default) 0: Translucent objects not visible 1: Translucent objects visible
        r.RayTracing.SceneCaptures:
          hint: |-
            Enable ray tracing in scene captures.
             -1: Use scene capture settings (default) 
             0: off 
             1: on
        r.RayTracing.Shadows:
          hint: |-
            0: use traditional rasterized shadow map (default)
            1: use ray tracing shadows
        r.RayTracing.Shadows.AcceptFirstHit:
          hint: |-
            Whether to allow shadow rays to terminate early, on first intersected primitive. This may result in worse denoising quality in some cases. (default = 0)
        r.RayTracing.Shadows.EnableHairVoxel:
          hint: |-
            Enables use of hair voxel data for tracing shadow (default = 1)
        r.RayTracing.Shadows.EnableMaterials:
          hint: |-
            Enables material shader binding for shadow rays. If this is disabled, then a default trivial shader is used. (default = 1)
        r.RayTracing.Shadows.EnableTwoSidedGeometry:
          hint: |-
            Enables two-sided geometry when tracing shadow rays (default = 1)
        r.RayTracing.Shadows.HairOcclusionThreshold:
          hint: |-
            Define the number of hair that need to be crossed, before casting occlusion (default = 1)
        r.RayTracing.Shadows.Lights.Directional:
          hint: |-
            Enables ray tracing shadows for directional lights (default = 1)
        r.RayTracing.Shadows.Lights.Point:
          hint: |-
            Enables ray tracing shadows for point lights (default = 1)
        r.RayTracing.Shadows.Lights.Rect:
          hint: |-
            Enables ray tracing shadows for rect light (default = 1)
        r.RayTracing.Shadows.Lights.Spot:
          hint: |-
            Enables ray tracing shadows for spot lights (default = 1)
        r.RayTracing.Shadows.LODTransitionEnd:
          hint: |-
            The end of an LOD transition range (default = 5000)
        r.RayTracing.Shadows.LODTransitionStart:
          hint: |-
            The start of an LOD transition range (default = 4000)
        r.RayTracing.Shadows.MaxBatchSize:
          hint: |-
            Maximum number of shadows to trace at the same time.
        r.RayTracing.Shadows.SamplesPerPixel:
          hint: |-
            Sets the samples-per-pixel for directional light occlusion (default = 1)
        r.RayTracing.Sky.HairOcclusionThreshold:
          hint: |-
            Define the number of hair that need to be crossed, before casting occlusion (default = 1)
        r.RayTracing.SkyLight:
          hint: |-
            Enables ray tracing SkyLight (default = 0)
        r.RayTracing.SkyLight.DecoupleSampleGeneration:
          hint: |-
            Decouples sample generation from ray traversal (default = 1)
        r.RayTracing.SkyLight.Denoiser:
          hint: |-
            Denoising options (default = 1)
        r.RayTracing.SkyLight.EnableMaterials:
          hint: |-
            Enables material shader binding for shadow rays. If this is disabled, then a default trivial shader is used. (default = 1)
        r.RayTracing.SkyLight.EnableTwoSidedGeometry:
          hint: |-
            Enables two-sided geometry when tracing shadow rays (default = 1)
        r.RayTracing.SkyLight.HairVoxel:
          hint: |-
            Include hair voxel representation to estimate sky occlusion
        r.RayTracing.SkyLight.MaxRayDistance:
          hint: |-
            Sets the max ray distance for ray tracing SkyLight (default = 1.0e7)
        r.RayTracing.SkyLight.MaxShadowThickness:
          hint: |-
            Sets the max shadow thickness for translucent materials for ray tracing SkyLight (default = 1.0e3)
        r.RayTracing.SkyLight.SamplesPerPixel:
          hint: |-
            Sets the samples-per-pixel for ray tracing SkyLight (default = -1)
        r.RayTracing.SkyLight.Sampling.StopLevel:
          hint: |-
            Sets the stop level for MIP-sampling (default = 0)
        r.RayTracing.SkyLight.ScreenPercentage:
          hint: |-
            Screen percentage at which to evaluate sky occlusion
        r.RayTracing.Translucency:
          hint: |-
            -1: Value driven by postprocess volume (default) 
             0: ray tracing translucency off (use raster) 
             1: ray tracing translucency enabled
        r.RayTracing.Translucency.DirectLighting:
          hint: |-
            Enables ray tracing translucency direct lighting (default = 1)
        r.RayTracing.Translucency.EmissiveAndIndirectLighting:
          hint: |-
            Enables ray tracing translucency emissive and indirect lighting (default = 1)
        r.RayTracing.Translucency.HeightFog:
          hint: |-
            Enables height fog in ray traced Translucency (default = 1)
        r.RayTracing.Translucency.MaxRayDistance:
          hint: |-
            Sets the maximum ray distance for ray traced translucency rays. When ray shortening is used, skybox will not be sampled in RT translucency pass and will be composited later, together with local reflection captures. Negative values turn off this optimization. (default = -1 (infinite rays))
        r.RayTracing.Translucency.MaxRefractionRays:
          hint: |-
            Sets the maximum number of refraction rays for ray traced translucency (default = -1 (max bounces driven by postprocessing volume)
        r.RayTracing.Translucency.MaxRoughness:
          hint: |-
            Sets the maximum roughness until which ray tracing reflections will be visible (default = -1 (max roughness driven by postprocessing volume))
        r.RayTracing.Translucency.MinRayDistance:
          hint: |-
            Sets the minimum ray distance for ray traced translucency rays. Actual translucency ray length is computed as Lerp(MaxRayDistance, MinRayDistance, Roughness), i.e. translucency rays become shorter when traced from rougher surfaces. (default = -1 (infinite rays))
        r.RayTracing.Translucency.PrimaryRayBias:
          hint: |-
            Sets the bias to be subtracted from the primary ray TMax in ray traced Translucency. Larger bias reduces the chance of opaque objects being intersected in ray traversal, saving performance, but at the risk of skipping some thin translucent objects in proximity of opaque objects. (recommended range: 0.00001 - 0.1) (default = 0.00001)
        r.RayTracing.Translucency.Refraction:
          hint: |-
            Enables refraction in ray traced Translucency (default = 1)
        r.RayTracing.Translucency.SamplesPerPixel:
          hint: |-
            Sets the samples-per-pixel for Translucency (default = 1)
        r.RayTracing.Translucency.Shadows:
          hint: |-
            Enables shadows in ray tracing translucency) -1: Shadows driven by postprocessing volume (default) 0: Shadows disabled  1: Hard shadows 2: Soft area shadows
        r.RayTracing.Transmission.RejectionSamplingTrials:
          hint: |-
            Determines the number of rejection-sampling trials (default = 0)
        r.RayTracing.Transmission.SamplingTechnique:
          hint: |-
            0: Uses constant tracking of an infinite homogeneous medium
            1: Uses constant tracking of a finite homogeneous medium whose extent is determined by transmission sampling distance (default)
        r.RayTracing.Transmission.TransmissionSamplingDistanceCulling:
          hint: |-
            Enables visibility testing to cull transmission sampling distance (default = 1)
        r.RayTracing.UseTextureLod:
          hint: |-
            Enable automatic texture mip level selection in ray tracing material shaders.
             0: highest resolution mip level is used for all texture (default).
             1: texture LOD is approximated based on total ray length, output resolution and texel density at hit point (ray cone method).
        r.RDG.AsyncCompute:
          hint: |-
            Controls the async compute policy.
             0:disabled, no async compute is used;
             1:enabled for passes tagged for async compute (default);
             2:enabled for all compute passes implemented to use the compute command list;
        r.RDG.Breakpoint:
          hint: |-
            Breakpoint in debugger when certain conditions are met.
             0: off (default);
             1: On an RDG warning;
             2: When a graph / pass matching the debug filters compiles;
             3: When a graph / pass matching the debug filters executes;
             4: When a graph / pass / resource matching the debug filters is created or destroyed;
        r.RDG.ClobberResources:
          hint: |-
            Clears all render targets and texture / buffer UAVs with the requested clear color at allocation time. Useful for debugging.
             0:off (default);
             1: 1000 on RGBA channels;
             2: NaN on RGBA channels;
             3: +INFINITY on RGBA channels.
        r.RDG.CullPasses:
          hint: |-
            The graph will cull passes with unused outputs.
             0:off;
             1:on(default);
        r.RDG.Debug:
          hint: |-
            Allow to output warnings for inefficiencies found during wiring and execution of the passes.
             0: disabled;
             1: emit warning once (default);
             2: emit warning everytime issue is detected.
        r.RDG.Debug.DisableTransientResources:
          hint: |-
            Filters out transient resources from the transient allocator. Use r.rdg.debug.resourcefilter to specify the filter. Defaults to all resources if enabled.
        r.RDG.Debug.ExtendResourceLifetimes:
          hint: |-
            Extends the resource lifetimes of resources (or a specific resource filter specified by r.RDG.Debug.ResourceFilter) so that they cannot overlap memory with any other resource within the graph. Useful to debug if transient aliasing is causing issues.
             0: disabled (default);
             1: enabled;
        r.RDG.Debug.FlushGPU:
          hint: |-
            Enables flushing the GPU after every pass. Disables async compute when set (r.RDG.AsyncCompute=0).
             0: disabled (default);
             1: enabled (default).
        r.RDG.Debug.GraphFilter:
          hint: |-
            Filters certain debug events to a specific graph. Set to 'None' to reset.
        r.RDG.Debug.PassFilter:
          hint: |-
            Filters certain debug events to specific passes. Set to 'None' to reset.
        r.RDG.Debug.ResourceFilter:
          hint: |-
            Filters certain debug events to a specific resource. Set to 'None' to reset.
        r.RDG.DumpGraph:
          hint: |-
            Dumps several visualization logs to disk.
             0: disabled;
             1: visualizes producer / consumer pass dependencies;
             2: visualizes resource states and transitions;
             3: visualizes graphics / async compute overlap;
        r.RDG.ImmediateMode:
          hint: |-
            Executes passes as they get created. Useful to have a callstack of the wiring code when crashing in the pass' lambda.
        r.RDG.MergeRenderPasses:
          hint: |-
            The graph will merge identical, contiguous render passes into a single render pass.
             0:off;
             1:on(default);
        r.RDG.OverlapUAVs:
          hint: |-
            RDG will overlap UAV work when requested; if disabled, UAV barriers are always inserted.
        r.RDG.ParallelExecute:
          hint: |-
            Whether to enable parallel execution of passes when supported. 0: off; 1: on (default)
        r.RDG.ParallelExecute.PassMax:
          hint: |-
            The maximum span of contiguous passes eligible for parallel execution for the span to be offloaded to a task.
        r.RDG.ParallelExecute.PassMin:
          hint: |-
            The minimum span of contiguous passes eligible for parallel execution for the span to be offloaded to a task.
        r.RDG.ParallelExecuteStress:
          hint: |-
            Stress tests the parallel execution path by launching one task per pass. Render pass merging is also disabled.
        r.RDG.TransientAllocator:
          hint: |-
            RDG will use the RHITransientResourceAllocator to allocate all transient resources. 0: disables the transient allocator; 1: enables the transient allocator (default); 2: enables the transient allocator for resources with FastVRAM flag only
        r.RDG.TransientAllocator.IndirectArgumentBuffers:
          hint: |-
            Whether indirect argument buffers should use transient resource allocator. Default: 0
        r.RDG.TransientExtractedResources:
          hint: |-
            RDG will allocate extracted resources as transient, unless explicitly marked non-transient by the user. 0: disables external transient resources; 1: enables external transient resources (default); 2: force enables all external transient resources (not recommended);
        r.RDG.TransitionLog:
          hint: |-
            Logs resource transitions to the console.
             0: disabled(default);
            >0: enabled for N frames;
            <0: enabled;
        r.RDG.VerboseCSVStats:
          hint: |-
            Controls the verbosity of CSV profiling stats for RDG.
             0: emits one CSV profile for graph execution;
             1: emits a CSV profile for each phase of graph execution.
        r.ReadBuffer.AlignSize:
          hint: |-
            The alignment size (in instances) to allocate in blocks for rendering read buffers. i.e. 64*1024 = 256k for a float buffer
        r.ReadBuffer.MaxRenderingBytesAllocatedPerFrame:
          hint: |-
            The maximum number of transient rendering read buffer bytes to allocate before we start panic logging who is doing the allocations
        r.ReadBuffer.MinSize:
          hint: |-
            The minimum size (in instances) to allocate in blocks for rendering read buffers. i.e. 256*1024 = 1mb for a float buffer
        r.ReflectionCapture.EnableLightFunctions:
          hint: |-
            0. Disable light functions in reflection/sky light capture (default).
            Others. Enable light functions.
        r.ReflectionCaptureGPUArrayCopy:
          hint: |-
            Do a fast copy of the reflection capture array when resizing if possible. This avoids hitches on the rendering thread when the cubemap array needs to grow.
             0 is off, 1 is on (default)
        r.ReflectionCaptureResolution:
          hint: |-
            Set the resolution for all reflection capture cubemaps. Should be set via project's Render Settings. Must be power of 2. Defaults to 128.
        r.ReflectionCaptureSupersampleFactor:
          hint: |-
            Super sample factor when rendering reflection captures.
            Default = 1, no super sampling
            Maximum clamped to 8.
        r.ReflectionCaptureUpdateEveryFrame:
          hint: |-
            When set, reflection captures will constantly be scheduled for update.
        r.ReflectionEnvironment:
          hint: |-
            Whether to render the reflection environment feature, which implements local reflections through Reflection Capture actors.
             0: off
             1: on and blend with scene (default) 2: on and overwrite scene (only in non-shipping builds)
        r.ReflectionEnvironmentBeginMixingRoughness:
          hint: |-
            Min roughness value at which to begin mixing reflection captures with lightmap indirect diffuse.
        r.ReflectionEnvironmentEndMixingRoughness:
          hint: |-
            Min roughness value at which to end mixing reflection captures with lightmap indirect diffuse.
        r.ReflectionEnvironmentLightmapMixBasedOnRoughness:
          hint: |-
            Whether to reduce lightmap mixing with reflection captures for very smooth surfaces.  This is useful to make sure reflection captures match SSR / planar reflections in brightness.
        r.ReflectionEnvironmentLightmapMixing:
          hint: |-
            Whether to mix indirect specular from reflection captures with indirect diffuse from lightmaps for rough surfaces.
        r.ReflectionEnvironmentLightmapMixLargestWeight:
          hint: |-
            When set to 1 can be used to clamp lightmap mixing such that only darkening from lightmaps are applied to reflection captures.
        r.ReflectionMethod:
          hint: |-
            0 - None.  Reflections can come from placed Reflection Captures, Planar Reflections and Skylight but no global reflection method will be used.
            1 - Lumen.  Use Lumen Reflections, which supports Screen / Software / Hardware Ray Tracing together and integrates with Lumen Global Illumination for rough reflections and Global Illumination seen in reflections.
            2 - SSR.  Standalone Screen Space Reflections.  Low cost, but limited by screen space information.
            3 - RT Reflections.  Ray Traced Reflections technique.  Deprecated, use Lumen Reflections instead.
        r.Reflections.Denoiser:
          hint: |-
            Choose the denoising algorithm.
             0: Disabled;
             1: Forces the default denoiser of the renderer;
             2: GScreenSpaceDenoiser which may be overriden by a third party plugin (default).
        r.Reflections.Denoiser.PreConvolution:
          hint: |-
            Number of pre-convolution passes (default = 1).
        r.Reflections.Denoiser.ReconstructionSamples:
          hint: |-
            Maximum number of samples for the reconstruction pass (default = 8).
        r.Reflections.Denoiser.TemporalAccumulation:
          hint: |-
            Accumulates the samples over multiple frames.
        r.Refraction.Blur:
          hint: |-
            Prevent rough refraction from happening, i.e. blurring of the background.
        r.Refraction.BlurCenterWeight:
          hint: |-
            The weight of the center sample. Value greater than 0 means the sharp image is more and more visible.
        r.Refraction.BlurScale:
          hint: |-
            Global scale the background blur amount after it is mapped form the surface back roughness/scattering amount.
        r.Refraction.OffsetQuality:
          hint: |-
            When enabled, the offset buffer is made float for higher quality. This is important to maintain the softness of the blurred scene buffer.
        r.Refraction.RoughnessToMipLevelFactor:
          hint: |-
            Factor to translate the roughness factor into a mip level.
        r.RefractionQuality:
          hint: |-
            Defines the distorion/refraction quality which allows to adjust for quality or performance.
            <=0: off (fastest)
              1: low quality (not yet implemented)
              2: normal quality (default)
              3: high quality (e.g. color fringe, not yet implemented)
        r.RenderLastFrameInStreamingPause:
          hint: |-
            If 1 the previous frame is displayed during streaming pause. If zero the screen is left black.
        r.RenderPass.Validation:
          hint: |-
        r.RenderTargetPoolMin:
          hint: |-
            If the render target pool size (in MB) is below this number there is no deallocation of rendertargetsDefault is 200 MB.
        r.RenderTimeFrozen:
          hint: |-
            Allows to freeze time based effects in order to provide more deterministic render profiling.
             0: off
             1: on (Note: this also disables occlusion queries)
        r.RHICmdAsyncRHIThreadDispatch:
          hint: |-
            Experiemental option to do RHI dispatches async. This keeps data flowing to the RHI thread faster and avoid a block at the end of the frame.
        r.RHICmdBalanceParallelLists:
          hint: |-
            Allows to enable a preprocess of the drawlists to try to balance the load equally among the command lists.
             0: off 
             1: enabled 2: experiemental, uses previous frame results (does not do anything in split screen etc)
        r.RHICmdBalanceTranslatesAfterTasks:
          hint: |-
            Experimental option to balance the parallel translates after the render tasks are complete. This minimizes the number of deferred contexts, but adds latency to starting the translates. r.RHICmdBalanceParallelLists overrides and disables this option
        r.RHICmdBufferWriteLocks:
          hint: |-
            Only relevant with an RHI thread. Debugging option to diagnose problems with buffered locks.
        r.RHICmdBypass:
          hint: |-
            Whether to bypass the rhi command list and send the rhi commands immediately.
            0: Disable (required for the multithreaded renderer)
            1: Enable (convenient for debugging low level graphics API calls, can suppress artifacts from multithreaded renderer code)
        r.RHICmdCollectRHIThreadStatsFromHighLevel:
          hint: |-
            This pushes stats on the RHI thread executes so you can determine which high level pass they came from. This has an adverse effect on framerate. This is on by default.
        r.RHICmdDeferSkeletalLockAndFillToRHIThread:
          hint: |-
            If > 0, then do the bone and cloth copies on the RHI thread. Experimental option.
        r.RHICmdFlushOnQueueParallelSubmit:
          hint: |-
            Wait for completion of parallel commandlists immediately after submitting. For issue diagnosis. Only available on some RHIs.
        r.RHICmdFlushRenderThreadTasks:
          hint: |-
            If true, then we flush the render thread tasks every pass. For issue diagnosis. This is a master switch for more granular cvars.
        r.RHICmdFlushRenderThreadTasksBasePass:
          hint: |-
            Wait for completion of parallel render thread tasks at the end of the base pass. A more granular version of r.RHICmdFlushRenderThreadTasks. If either r.RHICmdFlushRenderThreadTasks or r.RHICmdFlushRenderThreadTasksBasePass is > 0 we will flush.
        r.RHICmdFlushRenderThreadTasksPrePass:
          hint: |-
            Wait for completion of parallel render thread tasks at the end of the pre pass.  A more granular version of r.RHICmdFlushRenderThreadTasks. If either r.RHICmdFlushRenderThreadTasks or r.RHICmdFlushRenderThreadTasksPrePass is > 0 we will flush.
        r.RHICmdFlushRenderThreadTasksShadowPass:
          hint: |-
            Wait for completion of parallel render thread tasks at the end of each shadow pass.  A more granular version of r.RHICmdFlushRenderThreadTasks. If either r.RHICmdFlushRenderThreadTasks or r.RHICmdFlushRenderThreadTasksShadowPass is > 0 we will flush.
        r.RHICmdFlushRenderThreadTasksSingleLayerWater:
          hint: |-
            Wait for completion of parallel render thread tasks at the end of Single layer water. A more granular version of r.RHICmdFlushRenderThreadTasks. If either r.RHICmdFlushRenderThreadTasks or r.RHICmdFlushRenderThreadTasksSingleLayerWater is > 0 we will flush.
        r.RHICmdFlushRenderThreadTasksTranslucentPass:
          hint: |-
            Wait for completion of parallel render thread tasks at the end of the translucent pass.  A more granular version of r.RHICmdFlushRenderThreadTasks. If either r.RHICmdFlushRenderThreadTasks or r.RHICmdFlushRenderThreadTasksTranslucentPass is > 0 we will flush.
        r.RHICmdFlushRenderThreadTasksVelocityPass:
          hint: |-
            Wait for completion of parallel render thread tasks at the end of the velocity pass.  A more granular version of r.RHICmdFlushRenderThreadTasks. If either r.RHICmdFlushRenderThreadTasks or r.RHICmdFlushRenderThreadTasksVelocityPass is > 0 we will flush.
        r.RHICmdForceRHIFlush:
          hint: |-
            Force a flush for every task sent to the RHI thread. For issue diagnosis.
        r.RHICmdMaxOutstandingMemoryBeforeFlush:
          hint: |-
            In kilobytes. The amount of outstanding memory before the RHI will force a flush. This should generally be set high enough that it doesn't happen on typical frames.
        r.RHICmdMergeSmallDeferredContexts:
          hint: |-
            When it can be determined, merge small parallel translate tasks based on r.RHICmdMinDrawsPerParallelCmdList.
        r.RHICmdMinCmdlistForParallelSubmit:
          hint: |-
            Minimum number of parallel translate command lists to submit. If there are fewer than this number, they just run on the RHI thread and immediate context.
        r.RHICmdMinCmdlistForParallelTranslate:
          hint: |-
            If there are fewer than this number of parallel translates, they just run on the RHI thread and immediate context. Only relevant if r.RHICmdBalanceTranslatesAfterTasks is on.
        r.RHICmdMinCmdlistSizeForParallelTranslate:
          hint: |-
            In kilobytes. Cmdlists are merged into one parallel translate until we have at least this much memory to process. For a given pass, we won't do more translates than we have task threads. Only relevant if r.RHICmdBalanceTranslatesAfterTasks is on.
        r.RHICmdMinDrawsPerParallelCmdList:
          hint: |-
            The minimum number of draws per cmdlist. If the total number of draws is less than this, then no parallel work will be done at all. This can't always be honored or done correctly. More effective with RHICmdBalanceParallelLists.
        r.RHICmdSpewParallelListBalance:
          hint: |-
            For debugging, spews the size of the parallel command lists. This stalls and otherwise wrecks performance.
             0: off (default)
             1: enabled (default)
        r.RHICmdTraceEvents:
          hint: |-
            Enable tracing profiler events for every RHI command. (default = 0)
        r.RHICmdUseDeferredContexts:
          hint: |-
            True to use deferred contexts to parallelize command list execution. Only available on some RHIs.
        r.RHICmdUseParallelAlgorithms:
          hint: |-
            True to use parallel algorithms. Ignored if r.RHICmdBypass is 1.
        r.RHICmdUseThread:
          hint: |-
            Uses the RHI thread. For issue diagnosis.
        r.RHICmdWidth:
          hint: |-
            Controls the task granularity of a great number of things in the parallel renderer.
        r.RHIRenderPasses:
          hint: |-
        r.RHIValidation.DebugBreak.Transitions:
          hint: |-
            Controls whether the debugger should break when a validation error is encountered.
             0: disabled;
             1: break in the debugger if a validation error is encountered.
        r.Roughness.Max:
          hint: |-
            Allows quick material test by remapping the roughness at 1 to a new value (0..1), Only for non shipping built!
            1: (default)
        r.Roughness.Min:
          hint: |-
            Allows quick material test by remapping the roughness at 0 to a new value (0..1), Only for non shipping built!
            0: (default)
        r.SafeStateLookup:
          hint: |-
            Forces new-style safe state lookup for easy runtime perf comparison
        r.SaveEXR.CompressionQuality:
          hint: |-
            Defines how we save HDR screenshots in the EXR format.
             0: no compression
             1: default compression which can be slow (default)
        r.SceneCapture.EnableOrthographicTiling:
          hint: |-
            Render the scene in n frames (i.e TileCount) - Ignored in Perspective mode, works only in Orthographic mode and when r.SceneCapture.OverrideOrthographicTilingValues is on.
        r.SceneCapture.OrthographicNumXTiles:
          hint: |-
            Number of X tiles to render. Ignored in Perspective mode, works only in Orthographic mode and when r.SceneCapture.OverrideOrthographicTilingValues is on.
        r.SceneCapture.OrthographicNumYTiles:
          hint: |-
            Number of Y tiles to render. Ignored in Perspective mode, works only in Orthographic mode and when r.SceneCapture.OverrideOrthographicTilingValues is on.
        r.SceneCapture.OverrideOrthographicTilingValues:
          hint: |-
            Override defined orthographic values from SceneCaptureComponent2D - Ignored in Perspective mode.
        r.SceneColorFormat:
          hint: |-
            Defines the memory layout (RGBA) used for the scene color
            (affects performance, mostly through bandwidth, quality especially with translucency).
             0: PF_B8G8R8A8 32Bit (mostly for testing, likely to unusable with HDR)
             1: PF_A2B10G10R10 32Bit
             2: PF_FloatR11G11B10 32Bit
             3: PF_FloatRGB 32Bit
             4: PF_FloatRGBA 64Bit (default, might be overkill, especially if translucency is mostly using SeparateTranslucency)
             5: PF_A32B32G32R32F 128Bit (unreasonable but good for testing)
        r.SceneColorFringe.Max:
          hint: |-
            Allows to clamp the postprocess setting (in percent, Scene chromatic aberration / color fringe to simulate an artifact that happens in real-world lens, mostly visible in the image corners)
            -1: don't clamp (default)
            -2: to test extreme fringe
        r.SceneColorFringeQuality:
          hint: |-
             0: off but best for performance
             1: 3 texture samples (default)
        r.SceneRenderCleanUpMode:
          hint: |-
            Controls when to perform clean up of the scene renderer.
             0: clean up is performed immediately after render on the render thread.
             1: clean up deferred until the start of the next scene render on the render thread.
             2: clean up deferred until the start of the next scene render on the render thread, with some work distributed to an async task. (default)
        r.SceneRenderTargetResizeMethod:
          hint: |-
            Control the scene render target resize method:
            (This value is only used in game mode and on windowing platforms unless 'r.SceneRenderTargetsResizingMethodForceOverride' is enabled.)
            0: Resize to match requested render size (Default) (Least memory use, can cause stalls when size changes e.g. ScreenPercentage)
            1: Fixed to screen resolution.
            2: Expands to encompass the largest requested render dimension. (Most memory use, least prone to allocation stalls.)
        r.SceneRenderTargetResizeMethodForceOverride:
          hint: |-
            Forces 'r.SceneRenderTargetResizeMethod' to be respected on all configurations.
            0: Disabled.
            1: Enabled.
        r.ScreenPercentage:
          hint: |-
            To render in lower resolution and upscale for better performance (combined up with the blenable post process setting).
            70 is a good value for low aliasing and performance, can be verified with 'show TestImage'
            in percent, >0 and <=100, larger numbers are possible (supersampling) but the downsampling quality is improvable.<0 is treated like 100.
        r.ScreenPercentage.Auto.PixelCountMultiplier:
          hint: |-
        r.ScreenPercentage.MaxResolution:
          hint: |-
            Controls the absolute maximum number of rendered pixel before any upscaling such that doesn't go higher than the specified 16:9 resolution of this variable. For instance set this value to 1440 so that you are not rendering more than 2560x1440 = 3.6M pixels. This is useful to set this on PC in your project's DefaultEditor.ini so you are not rendering more pixel on PC in PIE that you would in average on console with your project specific dynamic resolution settings.
        r.ScreenPercentage.MinResolution:
          hint: |-
            Controls the absolute minimum number of rendered pixel.
        r.ScreenPercentage.Mode:
          hint: |-
            Selects mode to control the screen percentage.
             0: Controls the view's screen percentage based on r.ScreenPercentage
             1: Controls the view's screen percentage based on displayed resolution with r.ScreenPercentage.Auto.* (default)
        r.ScreenshotDelegate:
          hint: |-
            ScreenshotDelegates prevent processing of incoming screenshot request and break some features. This allows to disable them.
            Ideally we rework the delegate code to not make that needed.
             0: off
             1: delegates are on (default)
        r.SecondaryScreenPercentage.GameViewport:
          hint: |-
            Override secondary screen percentage for game viewport.
             0: Compute secondary screen percentage = 100 / DPIScalefactor automaticaly (default);
             1: override secondary screen percentage.
        r.SelectiveBasePassOutputs:
          hint: |-
            Enables shaders to only export to relevant rendertargets.
             0: Export in all rendertargets.
             1: Export only into relevant rendertarget.
        r.SeparateTranslucency:
          hint: |-
            Allows to disable the separate translucency feature (all translucency is rendered in separate RT and composited
            after DOF, if not specified otherwise in the material).
             0: off (translucency is affected by depth of field)
             1: on costs GPU performance and memory but keeps translucency unaffected by Depth of Field. (default)
        r.SeparateTranslucencyAutoDownsample:
          hint: |-
            Whether to automatically downsample separate translucency based on last frame's GPU time.
            Automatic downsampling is only used when r.SeparateTranslucencyScreenPercentage is 100
        r.SeparateTranslucencyDurationDownsampleThreshold:
          hint: |-
            When smoothed full-res translucency GPU duration is larger than this value (ms), the entire pass will be downsampled by a factor of 2 in each dimension.
        r.SeparateTranslucencyDurationUpsampleThreshold:
          hint: |-
            When smoothed half-res translucency GPU duration is smaller than this value (ms), the entire pass will be restored to full resolution.
            This should be around 1/4 of r.SeparateTranslucencyDurationDownsampleThreshold to avoid toggling downsampled state constantly.
        r.SeparateTranslucencyMinDownsampleChangeTime:
          hint: |-
            Minimum time in seconds between changes to automatic downsampling state, used to prevent rapid swapping between half and full res.
        r.SeparateTranslucencyScreenPercentage:
          hint: |-
            Render separate translucency at this percentage of the full resolution.
            in percent, >0 and <=100, larger numbers are possible (supersampling).<0 is treated like 100.
        r.SeparateTranslucencyUpsampleMode:
          hint: |-
            Upsample method to use on separate translucency.  These are only used when r.SeparateTranslucencyScreenPercentage is less than 100.
            0: bilinear 1: Nearest-Depth Neighbor (only when r.SeparateTranslucencyScreenPercentage is 50)
        r.SetRes:
          hint: |-
            Set the display resolution for the current game view. Has no effect in the editor.
            e.g. 1280x720w for windowed
                 1920x1080f for fullscreen
                 1920x1080wf for windowed fullscreen
        r.ShaderCodeLibrary.AsyncIOAllowDontCache:
          hint: |-
        r.ShaderCodeLibrary.DefaultAsyncIOPriority:
          hint: |-
        r.ShaderCodeLibrary.MaxShaderGroupSize:
          hint: |-
            Max (uncompressed) size of a group of shaders to be compressed/decompressed together.If a group exceeds it, it will be evenly split into subgroups which strive to not exceed it. However, if a shader group is down to one shader and still exceeds the limit, the limit will be ignored.
        r.ShaderCodeLibrary.SeparateLoadingCache:
          hint: |-
            if > 0, each shader code library has it's own loading cache.
        r.ShaderCodeLibrary.VisualizeShaderUsage:
          hint: |-
            If 1, a bitmap with the used shaders (for each shader library chunk) will be saved at the exit. Works in standalone games only.
        r.ShaderCompiler.AllowDistributedCompilation:
          hint: |-
            If 0, only local (spawned by the engine) ShaderCompileWorkers will be used. If 1, SCWs will be distributed using one of several possible backends (XGE, FASTBuild, SN-DBS)
        r.ShaderCompiler.CacheStatsPrintoutInterval:
          hint: |-
            Minimum interval (in seconds) between printing out debugging stats (by default, no closer than each 3 minutes).
        r.ShaderCompiler.CrashOnHungShaderMaps:
          hint: |-
            If set to 1, the shader compiler will crash on hung shadermaps.
        r.ShaderCompiler.DistributedControllerTimeout:
          hint: |-
            Maximum number of seconds we expect to pass between getting distributed controller complete a task (this is used to detect problems with the distribution controllers).
        r.ShaderCompiler.DistributedMinBatchSize:
          hint: |-
            Minimum number of shaders to compile with a distributed controller.
            Smaller number of shaders will compile locally.
        r.ShaderCompiler.DumpCompileJobInputs:
          hint: |-
            if != 0, unpreprocessed input of the shader compiler jobs will be dumped into the debug directory for closer inspection. This is a debugging feature which is disabled by default.
        r.ShaderCompiler.EmitWarningsOnLoad:
          hint: |-
            When 1, shader compiler warnings are emitted to the log for all shaders as they are loaded.
        r.ShaderCompiler.JobCache:
          hint: |-
            if != 0, shader compiler cache (based on the unpreprocessed input hash) will be disabled. By default, it is enabled.
        r.ShaderCompiler.JobCacheDDC:
          hint: |-
            Skips compilation of all shaders on Material and Material Instance PostLoad and relies on on-demand shader compilation to compile what is needed.
        r.ShaderCompiler.JobCacheDDCEnableRemotePolicy:
          hint: |-
            Whether to cache shaders in the job cache to your local machine or remotely to the network.
        r.ShaderCompiler.MaxJobCacheMemoryMB:
          hint: |-
            if != 0, shader compiler cache will be limited to this many megabytes (16GB by default). If 0, the usage will be unlimited. Minimum of this or r.ShaderCompiler.MaxJobCacheMemoryPercent applies.
        r.ShaderCompiler.MaxJobCacheMemoryPercent:
          hint: |-
            if != 0, shader compiler cache will be limited to this percentage of available physical RAM (5% by default). If 0, the usage will be unlimited. Minimum of this or r.ShaderCompiler.MaxJobCacheMemoryMB applies.
        r.ShaderCompiler.ShadermapCompilationTimeout:
          hint: |-
            Maximum number of seconds a single shadermap (which can be comprised of multiple jobs) can be compiled after being considered hung.
        r.ShaderCompiler.TooLongIOThresholdSeconds:
          hint: |-
            By default, task files for SCW will be read/written sequentially, but if we ever spend more than this time (0.3s by default) doing that, we'll switch to parallel.We don't default to parallel writes as it increases the CPU overhead from the shader compiler.
        r.ShaderComplexity.Baseline.Deferred.PS:
          hint: |-
            Minimum number of instructions for pixel shaders in deferred shading (default=111)
        r.ShaderComplexity.Baseline.Deferred.UnlitPS:
          hint: |-
            Minimum number of instructions for unlit material pixel shaders in deferred shading (default=33)
        r.ShaderComplexity.Baseline.Deferred.VS:
          hint: |-
            Minimum number of instructions for vertex shaders in deferred shading (default=41)
        r.ShaderComplexity.Baseline.Forward.PS:
          hint: |-
            Minimum number of instructions for pixel shaders in forward shading (default=635)
        r.ShaderComplexity.Baseline.Forward.UnlitPS:
          hint: |-
            Minimum number of instructions for unlit material pixel shaders in forward shading (default=47)
        r.ShaderComplexity.Baseline.Forward.VS:
          hint: |-
            Minimum number of instructions for vertex shaders in forward shading (default=134)
        r.ShaderComplexity.CacheShaders:
          hint: |-
            If non zero, store the shader complexity shaders in the material shader map, to prevent compile on-the-fly lag. (default=0)
        r.ShaderDevelopmentMode:
          hint: |-
            0: Default, 1: Enable various shader development utilities, such as the ability to retry on failed shader compile, and extra logging as shaders are compiled.
        r.ShaderDrawDebug:
          hint: |-
            ShaderDrawDebug debugging toggle.
        r.ShaderDrawDebug.Lock:
          hint: |-
            Lock the shader draw buffer.
        r.ShaderDrawDebug.MaxElementCount:
          hint: |-
            ShaderDraw output buffer size in element.
        r.ShaderLibrary.PrintExtendedStats:
          hint: |-
            if != 0, shader library will produce extended stats, including the textual representation
        r.ShaderPipelineCache.AlwaysGenerateOSCache:
          hint: |-
            1 generates the cache every run, 0 generates it only when it is missing.
        r.ShaderPipelineCache.AutoSaveTime:
          hint: |-
            Set the time where any logged PSO's will be saved if the number is < r.ShaderPipelineCache.SaveAfterPSOsLogged. Disabled when r.ShaderPipelineCache.SaveAfterPSOsLogged is 0
        r.ShaderPipelineCache.AutoSaveTimeBoundPSO:
          hint: |-
            Set the time where any logged PSO's will be saved when -logpso is on the command line.
        r.ShaderPipelineCache.BackgroundBatchSize:
          hint: |-
            Set the number of PipelineStateObjects to compile in a single batch operation when compiling in the background. Defaults to a maximum of 1 per frame, due to async. file IO it is less in practice.
        r.ShaderPipelineCache.BackgroundBatchTime:
          hint: |-
            The target time (in ms) to spend precompiling each frame when in the background or 0.0 to disable. When precompiling is faster the batch size will grow and when slower will shrink to attempt to occupy the full amount. Defaults to 0.0 (off).
        r.ShaderPipelineCache.BatchSize:
          hint: |-
            Set the number of PipelineStateObjects to compile in a single batch operation when compiling takes priority. Defaults to a maximum of 50 per frame, due to async. file IO it is less in practice.
        r.ShaderPipelineCache.BatchTime:
          hint: |-
            The target time (in ms) to spend precompiling each frame when compiling takes priority or 0.0 to disable. When precompiling is faster the batch size will grow and when slower will shrink to attempt to occupy the full amount. Defaults to 16.0 (max. ms per-frame of precompilation).
        r.ShaderPipelineCache.ClearOSCache:
          hint: |-
            1 Enables the OS level clear after install, 0 disables it.
        r.ShaderPipelineCache.DoNotPrecompileComputePSO:
          hint: |-
            Disables precompilation of compute PSOs (replayed from a recorded file) on start. This is a safety switch in case things go wrong
        r.ShaderPipelineCache.Enabled:
          hint: |-
            1 Enables the PipelineFileCache, 0 disables it.
        r.ShaderPipelineCache.GameFileMaskEnabled:
          hint: |-
            Set non zero to use GameFileMask during PSO precompile - recording should always save out the usage masks to make that data availble when needed.
        r.ShaderPipelineCache.LazyLoadShadersWhenPSOCacheIsPresent:
          hint: |-
            Non-Zero: If we load a PSO cache, then lazy load from the shader code library. This assumes the PSO cache is more or less complete. This will only work on RHIs that support the library+Hash CreateShader API (GRHISupportsLazyShaderCodeLoading == true).
        r.ShaderPipelineCache.LogPSO:
          hint: |-
            1 Logs new PSO entries into the file cache and allows saving.
        r.ShaderPipelineCache.MaxPrecompileTime:
          hint: |-
            The maximum time to allow a PSO to be precompiled.  if greather than 0, the amount of wall time we will allow pre-compile of PSOs and then switch to background processing.
        r.ShaderPipelineCache.MinBindCount:
          hint: |-
            The minimum bind count to allow a PSO to be precompiled.  Changes to this value will not affect PSOs that have already been removed from consideration.
        r.ShaderPipelineCache.PrecompileBatchSize:
          hint: |-
            Set the number of PipelineStateObjects to compile in a single batch operation when pre-optimizing the cache. Defaults to a maximum of 50 per frame, due to async. file IO it is less in practice.
        r.ShaderPipelineCache.PrecompileBatchTime:
          hint: |-
            The target time (in ms) to spend precompiling each frame when cpre-optimizing or 0.0 to disable. When precompiling is faster the batch size will grow and when slower will shrink to attempt to occupy the full amount. Defaults to 10.0 (off).
        r.ShaderPipelineCache.PreCompileMask:
          hint: |-
            Mask used to precompile the cache. Defaults to all PSOs (-1)
        r.ShaderPipelineCache.PreOptimizeEnabled:
          hint: |-
            Set non zero to PreOptimize PSOs - this allows some PSOs to be compiled in the foreground before going in to game
        r.ShaderPipelineCache.PrintNewPSODescriptors:
          hint: |-
            1 prints descriptions for all new PSO entries to the log/console while 0 does not. 2 prints additional details about the PSO. Defaults to 0 in *Shipping* builds, otherwise 1.
        r.ShaderPipelineCache.ReportPSO:
          hint: |-
            1 reports new PSO entries via a delegate, but does not record or modify any cache file.
        r.ShaderPipelineCache.SaveAfterPSOsLogged:
          hint: |-
            Set the number of PipelineStateObjects to log before automatically saving. 0 will disable automatic saving (which is the default now, as automatic saving is found to be broken).
        r.ShaderPipelineCache.SaveBoundPSOLog:
          hint: |-
            If > 0 then a log of all bound PSOs for this run of the program will be saved to a writable user cache file. Defaults to 0 but is forced on with -logpso.
        r.ShaderPipelineCache.SaveUserCache:
          hint: |-
            If > 0 then any missed PSOs will be saved to a writable user cache file for subsequent runs to load and avoid in-game hitches. Enabled by default on macOS only.
        r.ShaderPipelineCache.StartupMode:
          hint: |-
            Sets the startup mode for the PSO cache, determining what the cache does after initialisation:
            	0: Precompilation is paused and nothing will compile until a call to ResumeBatching().
            	1: Precompilation is enabled in the 'Fast' mode.
            	2: Precompilation is enabled in the 'Background' mode.
            Default is 1.
        r.ShaderPipelineCache.UserCacheUnusedElementCheckPeriod:
          hint: |-
            The amount of time in days between running the garbage collection on unused PSOs in the user cache. Use a negative value to disable.
        r.ShaderPipelineCache.UserCacheUnusedElementRetainDays:
          hint: |-
            The amount of time in days to keep unused PSO entries in the cache.
        r.ShaderPipelineCacheTools.IncludeComputePSODuringCook:
          hint: |-
            0 disables cook-time addition, 1 enables cook-time addition, 2 adds only Niagara PSOs.
        r.ShaderPipelines:
          hint: |-
            Enable using Shader pipelines.
        r.ShaderPrintEnable:
          hint: |-
            ShaderPrint debugging toggle.
        r.ShaderPrintFontSize:
          hint: |-
            ShaderPrint font size.
        r.ShaderPrintFontSpacingX:
          hint: |-
            ShaderPrint horizontal spacing between symbols.
        r.ShaderPrintFontSpacingY:
          hint: |-
            ShaderPrint vertical spacing between symbols.
        r.ShaderPrintMaxValueCount:
          hint: |-
            ShaderPrint output buffer size.
        r.Shaders.AllowCompilingThroughWorkers:
          hint: |-
            Allows shader compilation through external ShaderCompileWorker processes.
            1 - (Default) Allows external shader compiler workers
            0 - Disallows external shader compiler workers. Will run shader compilation in proc of UE process.
        r.Shaders.AllowUniqueSymbols:
          hint: |-
            When enabled, this tells supported shader compilers to generate symbols based on source files.
            Enabling this can cause a drastic increase in the number of symbol files, enable only if absolutely necessary.
            This setting can be overriden in any Engine.ini under the [ShaderCompiler] section.
        r.Shaders.BoundsChecking:
          hint: |-
            Whether to enforce bounds-checking & flush-to-zero/ignore for buffer reads & writes in shaders. Defaults to 1 (enabled). Not all shader languages can omit bounds checking.
        r.Shaders.CheckLevel:
          hint: |-
            0 => DO_CHECK=0, DO_GUARD_SLOW=0, 1 => DO_CHECK=1, DO_GUARD_SLOW=0, 2 => DO_CHECK=1, DO_GUARD_SLOW=1 for all shaders.
        r.Shaders.CompressionFormat:
          hint: |-
            Select the compression methods for the shader code.
             0: None (uncompressed)
             1: LZ4
             2: Oodle (default)
             3: ZLib
        r.Shaders.CompressionFormat.Oodle.Algo:
          hint: |-
            Oodle compression method for the shader code, from fastest to slowest to decode.
             0: None (invalid setting)
             1: Selkie (fastest to decode)
             2: Mermaid
             3: Kraken
             4: Leviathan (slowest to decode)
        r.Shaders.CompressionFormat.Oodle.Level:
          hint: |-
            Oodle compression level. This mostly trades encode speed vs compression ratio, decode speed is determined by r.Shaders.CompressionFormat.Oodle.Algo
             -4 : HyperFast4
             -3 : HyperFast3
             -2 : HyperFast2
             -1 : HyperFast1
              0 : None
              1 : SuperFast
              2 : VeryFast
              3 : Fast
              4 : Normal
              5 : Optimal1
              6 : Optimal2
              7 : Optimal3
              8 : Optimal4
        r.Shaders.ExtraData:
          hint: |-
            Enables generation of extra shader data that can be used at runtime. This includes shader names and other platform specific data.
            This can add bloat to compiled shaders and can prevent shaders from being deduplicated.
            This setting can be overriden in any Engine.ini under the [ShaderCompiler] section.
        r.Shaders.FastMath:
          hint: |-
            Whether to use fast-math optimisations in shaders.
        r.Shaders.FlowControlMode:
          hint: |-
            Specifies whether the shader compiler should preserve or unroll flow-control in shader code.
            This is primarily a debugging aid and will override any per-shader or per-material settings if not left at the default value (0).
            	0: Off (Default) - Entirely at the discretion of the platform compiler or the specific shader/material.
            	1: Prefer - Attempt to preserve flow-control.
            	2: Avoid - Attempt to unroll and flatten flow-control.
        r.Shaders.ForceDXC:
          hint: |-
            Forces DirectX Shader Compiler (DXC) to be used for all shaders instead of HLSLcc if supported.
             0: Disable (default)
             1: Force new compiler for all shaders
        r.Shaders.GenerateSymbols:
          hint: |-
            Enables generation of data for shader debugging when compiling shaders. This explicitly does not write any shader symbols to disk.
            This setting can be overriden in any Engine.ini under the [ShaderCompiler] section.
        r.Shaders.Optimize:
          hint: |-
            Whether to optimize shaders.  When using graphical debuggers like Nsight it can be useful to disable this on startup.
            This setting can be overriden in any Engine.ini under the [ShaderCompiler] section.
        r.Shaders.SkipCompression:
          hint: |-
            Skips shader compression after compiling. Shader compression time can be quite significant when using debug shaders. This CVar is only valid in non-shipping/test builds.
        r.Shaders.SymbolPathOverride:
          hint: |-
            Override output location of shader symbols. If the path contains the text '{Platform}', that will be replaced with the shader platform string.
            Empty: use default location Saved/ShaderSymbols/{Platform}
            This setting can be overriden in any Engine.ini under the [ShaderCompiler] section.
        r.Shaders.Symbols:
          hint: |-
            Enables debugging of shaders in platform specific graphics debuggers. This will generate and write shader symbols.
            This enables the behavior of both r.Shaders.GenerateSymbols and r.Shaders.WriteSymbols.
            Enables shader debugging features that require shaders to be recompiled. This compiles shaders with symbols and also includes extra runtime information like shader names. When using graphical debuggers it can be useful to enable this on startup.
            This setting can be overriden in any Engine.ini under the [ShaderCompiler] section.
        r.Shaders.UseGBufferRefactor:
          hint: |-
            Whether to use the refactored GBuffer that autogenerates encode/decode functions. Will be removed before UE5 ships.
        r.Shaders.Validation:
          hint: |-
            Enabled shader compiler validation warnings and errors.
        r.Shaders.WarningsAsErrors:
          hint: |-
            Whether to treat warnings as errors when running the shader compiler. Defaults to 0 (disabled). Not all compilers support this mode.
        r.Shaders.WriteSymbols:
          hint: |-
            Enables writing shader symbols to disk for platforms that support that. This explicitly does not enable generation of shader symbols.
            This setting can be overriden in any Engine.ini under the [ShaderCompiler] section.
        r.Shaders.WriteSymbols.Zip:
          hint: |-
             0: Export as loose files.
             1: Export as an uncompressed archive.
        r.Shaders.ZeroInitialise:
          hint: |-
            Whether to enforce zero initialise local variables of primitive type in shaders. Defaults to 1 (enabled). Not all shader languages can omit zero initialisation.
        r.Shading.EnergyConservation:
          hint: |-
            0 to disable energy conservation on shading models.
             0: off
             1: on
        r.Shading.EnergyConservation.Format:
          hint: |-
            Energy conservation table format 0: 16bits, 1: 32bits.
        r.Shading.EnergyPreservation:
          hint: |-
            0 to disable energy preservation on shading models, i.e. the energy attenuation on diffuse lighting caused by the specular reflection. Require energy conservation to be enabled
             0: off
             1: on
        r.Shading.FurnaceTest:
          hint: |-
            Enable/disable furnace for shading validation.
        r.Shading.FurnaceTest.SampleCount:
          hint: |-
            Number of sampler per pixel used for furnace tests.
        r.Shadow.AlwaysAllocateMaxResolutionAtlases:
          hint: |-
            If enabled, will always allocate shadow map atlases at the maximum resolution rather than trimming unused space. This will waste more memory but can possibly reduce render target pool fragmentation and thrash.
        r.Shadow.CachedShadowsCastFromMovablePrimitives:
          hint: |-
            Whether movable primitives should cast a shadow from cached whole scene shadows (movable point and spot lights).
            Disabling this can be used to remove the copy of the cached shadowmap.
        r.Shadow.CachePreshadow:
          hint: |-
            Whether preshadows can be cached as an optimization
        r.Shadow.CacheWholeSceneShadows:
          hint: |-
            When enabled, movable point and spot light whole scene shadow depths from static primitives will be cached as an optimization.
        r.Shadow.CacheWPOPrimitives:
          hint: |-
            Whether primitives whose materials use World Position Offset should be considered movable for cached shadowmaps.
            Enablings this gives more correct, but slower whole scene shadows from materials that use WPO.
        r.Shadow.CSM.MaxCascades:
          hint: |-
            The maximum number of cascades with which to render dynamic directional light shadows.
        r.Shadow.CSM.MaxMobileCascades:
          hint: |-
            The maximum number of cascades with which to render dynamic directional light shadows when using the mobile renderer.
        r.Shadow.CSM.TransitionScale:
          hint: |-
            Allows to scale the cascaded shadow map transition region. Clamped within 0..2.
            0: no transition (fastest)
            1: as specific in the light settings (default)
            2: 2x larger than what was specified in the light
        r.Shadow.CSMCaching:
          hint: |-
            0: Render CSM every frame.
            1: Enable CSM caching. (default)
        r.Shadow.CSMDepthBias:
          hint: |-
            Constant depth bias used by CSM
        r.Shadow.CSMDepthBoundsTest:
          hint: |-
            Whether to use depth bounds tests rather than stencil tests for the CSM bounds
        r.Shadow.CSMReceiverBias:
          hint: |-
            Receiver bias used by CSM. Value between 0 and 1.
        r.Shadow.CSMScrollingOverlapAreaThrottle:
          hint: |-
            The minimum ratio of the overlap area for CSM scrolling.
        r.Shadow.CSMShadowDistanceFadeoutMultiplier:
          hint: |-
            Multiplier for the CSM distance fade
        r.Shadow.CSMSlopeScaleDepthBias:
          hint: |-
            Slope scale depth bias used by CSM
        r.Shadow.CSMSplitPenumbraScale:
          hint: |-
            Scale applied to the penumbra size of Cascaded Shadow Map splits, useful for minimizing the transition between splits
        r.Shadow.Denoiser:
          hint: |-
            Choose the denoising algorithm.
             0: Disabled (default);
             1: Forces the default denoiser of the renderer;
             2: GScreenSpaceDenoiser witch may be overriden by a third party plugin.
        r.Shadow.Denoiser.HistoryConvolutionSamples:
          hint: |-
            Number of samples to use to convolve the history over time.
        r.Shadow.Denoiser.MaxBatchSize:
          hint: |-
            Maximum number of shadow to denoise at the same time.
        r.Shadow.Denoiser.PreConvolution:
          hint: |-
            Number of pre-convolution passes (default = 1).
        r.Shadow.Denoiser.ReconstructionSamples:
          hint: |-
            Maximum number of samples for the reconstruction pass (default = 16).
        r.Shadow.Denoiser.TemporalAccumulation:
          hint: |-
        r.Shadow.DetectVertexShaderLayerAtRuntime:
          hint: |-
            Forces the compilation of the vslayer shader permutation even if the platform (RHI) does not declare compile-time support through RHISupportsVertexShaderLayer.Enabled by default for windows/SM5 as DX11 almost universally supports this at runtime.
        r.Shadow.DistanceScale:
          hint: |-
            Scalability option to trade shadow distance versus performance for directional lights (clamped within a reasonable range).
            <1: shorter distance
             1: normal (default)
            >1: larger distance
        r.Shadow.DrawPreshadowFrustums:
          hint: |-
            visualize preshadow frustums when the shadowfrustums show flag is enabled
        r.Shadow.EnableModulatedSelfShadow:
          hint: |-
            Allows modulated shadows to affect the shadow caster. (mobile only)
        r.Shadow.FadeExponent:
          hint: |-
            Controls the rate at which shadows are faded out
        r.Shadow.FadeResolution:
          hint: |-
            Resolution in texels below which shadows are faded out
        r.Shadow.FarShadowDistanceOverride:
          hint: |-
            Overriding far shadow distance for all directional lighst
        r.Shadow.FarShadowStaticMeshLODBias:
          hint: |-
            Notice: only selected geometry types (static meshes and landscapes) respect this value.
        r.Shadow.FilterMethod:
          hint: |-
            Chooses the shadow filtering method.
             0: Uniform PCF (default)
             1: PCSS (experimental)
        r.Shadow.ForceSerialSingleRenderPass:
          hint: |-
            Force Serial shadow passes to render in 1 pass.
        r.Shadow.ForceSingleSampleShadowingFromStationary:
          hint: |-
            Whether to force all components to act as if they have bSingleSampleShadowFromStationaryLights enabled.  Useful for scalability when dynamic shadows are disabled.
        r.Shadow.FreezeCamera:
          hint: |-
            Debug the shadow methods by allowing to observe the system from outside.
            0: default
            1: freeze camera at current location
        r.Shadow.LightViewConvexHullCull:
          hint: |-
            Enables culling of shadow casters that do not intersect the convex hull of the light origin and view frustum.
        r.Shadow.MaxCSMResolution:
          hint: |-
            Max square dimensions (in texels) allowed for rendering Cascaded Shadow depths. Range 4 to hardware limit. Higher = better quality shadows but at a performance cost.
        r.Shadow.MaxCSMScrollingStaticShadowSubjects:
          hint: |-
            The maximum number of extra static shadow subjects need to be drawed when scrolling CSM.
        r.Shadow.MaxNumFarShadowCascades:
          hint: |-
            Max number of far shadow cascades that can be cast from a directional light
        r.Shadow.MaxNumPointShadowCacheUpdatesPerFrame:
          hint: |-
            Maximum number of point light shadow cache updates allowed per frame.Only affect updates caused by resolution change. -1 means no limit.
        r.Shadow.MaxNumSpotShadowCacheUpdatesPerFrame:
          hint: |-
            Maximum number of spot light shadow cache updates allowed per frame.Only affect updates caused by resolution change. -1 means no limit.
        r.Shadow.MaxResolution:
          hint: |-
            Max square dimensions (in texels) allowed for rendering shadow depths. Range 4 to hardware limit. Higher = better quality shadows but at a performance cost.
        r.Shadow.MaxSoftKernelSize:
          hint: |-
            Mazimum size of the softening kernels in pixels.
        r.Shadow.MinDirectionalLightAngleForRTHF:
          hint: |-
        r.Shadow.MinPreShadowResolution:
          hint: |-
            Minimum dimensions (in texels) allowed for rendering preshadow depths
        r.Shadow.MinResolution:
          hint: |-
            Minimum dimensions (in texels) allowed for rendering shadow subject depths
        r.Shadow.Nanite:
          hint: |-
            Enables shadows from Nanite meshes.
        r.Shadow.NaniteLODBias:
          hint: |-
            LOD bias for nanite geometry in shadows. 0 = full detail. >0 = reduced detail.
        r.Shadow.NaniteUpdateStreaming:
          hint: |-
            Produce Nanite geometry streaming requests from shadow map rendering.
        r.Shadow.NaniteUseHZB:
          hint: |-
            Enables HZB for Nanite shadows.
        r.Shadow.OcclusionCullCascadedShadowMaps:
          hint: |-
            Whether to use occlusion culling on cascaded shadow maps.  Disabled by default because rapid view changes reveal new regions too quickly for latent occlusion queries to work with.
        r.Shadow.PerObject:
          hint: |-
            Whether to render per object shadows (character casting on world)
            0: off
            1: on (default)
        r.Shadow.PerObjectCastDistanceMin:
          hint: |-
            Minimum cast distance for Per-Object shadows, i.e., CastDistDance = Max(r.Shadow.PerObjectCastDistanceRadiusScale * object-radius, r.Shadow.PerObjectCastDistanceMin).
              Default: HALF_WORLD_MAX / 32.0f
        r.Shadow.PerObjectCastDistanceRadiusScale:
          hint: |-
            PerObjectCastDistanceRadiusScale The scale factor multiplied with the radius of the object to calculate the maximum distance a per-object directional shadow can reach. This will only take effect after a certain (large) radius. Default is 8 times the object radius.
        r.Shadow.PerObjectDirectionalDepthBias:
          hint: |-
            Constant depth bias used by per-object shadows from directional lights
            Lower values give better shadow contact, but increase self-shadowing artifacts
        r.Shadow.PerObjectDirectionalSlopeDepthBias:
          hint: |-
            Slope scale depth bias used by per-object shadows from directional lights
            Lower values give better shadow contact, but increase self-shadowing artifacts
        r.Shadow.PerObjectSpotLightDepthBias:
          hint: |-
            Depth bias that is applied in the depth pass for per-object projected shadows from spot lights
        r.Shadow.PerObjectSpotLightSlopeDepthBias:
          hint: |-
            Slope scale depth bias that is applied in the depth pass for per-object projected shadows from spot lights
        r.Shadow.PointLightDepthBias:
          hint: |-
            Depth bias that is applied in the depth pass for shadows from point lights. (0.03 avoids peter paning but has some shadow acne)
        r.Shadow.PointLightSlopeScaleDepthBias:
          hint: |-
            Slope scale depth bias that is applied in the depth pass for shadows from point lights
        r.Shadow.PreshadowExpand:
          hint: |-
            How much bounds will be expanded when rendering a cached preshadow (0.15 = 15% larger)
        r.Shadow.PreShadowFadeResolution:
          hint: |-
            Resolution in texels below which preshadows are faded out
        r.Shadow.PreShadowResolutionFactor:
          hint: |-
            Mulitplier for preshadow resolution
        r.Shadow.Preshadows:
          hint: |-
            Whether to allow preshadows (static world casting on character)
        r.Shadow.PreshadowsForceLowestDetailLevel:
          hint: |-
            When enabled, static meshes render their lowest detail level into preshadow depth maps.  Disabled by default as it causes artifacts with poor quality LODs (tree billboard).
        r.Shadow.RadiusThreshold:
          hint: |-
            Cull shadow casters if they are too small, value is the minimal screen space bounding sphere radius
        r.Shadow.RecordInteractionShadowPrimitives:
          hint: |-
        r.Shadow.RectLightDepthBias:
          hint: |-
            Depth bias that is applied in the depth pass for shadows from rect lights. (0.03 avoids peter paning but has some shadow acne)
        r.Shadow.RectLightReceiverBias:
          hint: |-
            Receiver bias used by rect light. Value between 0 and 1.
        r.Shadow.RectLightSlopeScaleDepthBias:
          hint: |-
            Slope scale depth bias that is applied in the depth pass for shadows from rect lights
        r.Shadow.ResolutionScaleZeroDisablesSm:
          hint: |-
            DEPRECATED: If 1 (default) then setting Shadow Resolution Scale to zero disables shadow maps for the light.
        r.Shadow.ShadowMaxSlopeScaleDepthBias:
          hint: |-
            Max Slope depth bias used for shadows for all lights
            Higher values give better self-shadowing, but increase self-shadowing artifacts
        r.Shadow.SkipCullingNaniteMeshes:
          hint: |-
            When enabled, CPU culling will ignore nanite meshes.
        r.Shadow.SpotLightDepthBias:
          hint: |-
            Depth bias that is applied in the depth pass for whole-scene projected shadows from spot lights
        r.Shadow.SpotLightReceiverBias:
          hint: |-
            Receiver bias used by spotlights. Value between 0 and 1.
        r.Shadow.SpotLightSlopeDepthBias:
          hint: |-
            Slope scale depth bias that is applied in the depth pass for whole-scene projected shadows from spot lights
        r.Shadow.SpotLightTransitionScale:
          hint: |-
            Transition scale for spotlights
        r.Shadow.StencilCulling:
          hint: |-
            Whether to use stencil light culling during shadow projection (default) or only depth.
        r.Shadow.StencilOptimization:
          hint: |-
            Removes stencil clears between shadow projections by zeroing the stencil during testing
        r.Shadow.TexelsPerPixel:
          hint: |-
            The ratio of subject pixels to shadow texels for per-object shadows
        r.Shadow.TexelsPerPixelPointlight:
          hint: |-
            The ratio of subject pixels to shadow texels for point lights
        r.Shadow.TexelsPerPixelRectlight:
          hint: |-
            The ratio of subject pixels to shadow texels for rect lights
        r.Shadow.TexelsPerPixelSpotlight:
          hint: |-
            The ratio of subject pixels to shadow texels for spotlights
        r.Shadow.TransitionScale:
          hint: |-
            This controls the 'fade in' region between a caster and where his shadow shows up.  Larger values make a smaller region which will have more self shadowing artifacts
        r.Shadow.UnbuiltNumWholeSceneDynamicShadowCascades:
          hint: |-
            DynamicShadowCascades to use when using CSM to preview unbuilt lighting from a directional light
        r.Shadow.UnbuiltPreviewInGame:
          hint: |-
            Whether to render unbuilt preview shadows in game.  When enabled and lighting is not built, expensive preview shadows will be rendered in game.  When disabled, lighting in game and editor won't match which can appear to be a bug.
        r.Shadow.UnbuiltWholeSceneDynamicShadowRadius:
          hint: |-
            WholeSceneDynamicShadowRadius to use when using CSM to preview unbuilt lighting from a directional light
        r.Shadow.UseOctreeForCulling:
          hint: |-
            Whether to use the primitive octree for shadow subject culling.  The octree culls large groups of primitives at a time, but introduces cache misses walking the data structure.
        r.Shadow.Virtual.AccumulateStats:
          hint: |-
            AccumulateStats
        r.Shadow.Virtual.BuildHZBPerPage:
          hint: |-
            .
        r.Shadow.Virtual.Cache:
          hint: |-
            Turn on to enable caching
        r.Shadow.Virtual.Cache.ClipmapPanning:
          hint: |-
            Enable support for panning cached clipmap pages for directional lights.
        r.Shadow.Virtual.Cache.DebugSkipDynamicPageInvalidation:
          hint: |-
            Skip invalidation of cached pages when geometry moves for debugging purposes. This will create obvious visual artifacts when disabled.
        r.Shadow.Virtual.Cache.DeformableMeshesInvalidate:
          hint: |-
            If enabled, Primitive Proxies that are marked as having deformable meshes (HasDeformableMesh() == true) causes invalidations regardless of whether their transforms are updated.
        r.Shadow.Virtual.Cache.DrawInvalidatingBounds:
          hint: |-
            Turn on debug render cache invalidating instance bounds, heat mapped by number of pages invalidated.
               1  = Draw all bounds.
               2  = Draw those invalidating static cached pages only
               3  = Draw those invalidating dynamic cached pages only
        r.Shadow.Virtual.Cache.InvalidateUseHZB:
          hint: |-
            Enables testing HZB for Virtual Shadow Map invalidations.
        r.Shadow.Virtual.Cache.MaxMaterialPositionInvalidationRange:
          hint: |-
            Beyond this distance in world units, material position effects (e.g., WPO or PDO) cease to cause VSM invalidations.
             This can be used to tune performance by reducing re-draw overhead, but causes some artifacts.
             < 0 <=> infinite (default)
        r.Shadow.Virtual.Cache.StaticSeparate:
          hint: |-
            When enabled, caches static objects in separate pages from dynamic objects.
            This can improve performance in largely static scenes, but doubles the memory cost of the physical page pool.
        r.Shadow.Virtual.Clipmap.FirstCoarseLevel:
          hint: |-
            First level of the clipmap to mark coarse pages for. Lower values allow higher resolution coarse pages near the camera but increase total page counts.
        r.Shadow.Virtual.Clipmap.FirstLevel:
          hint: |-
            First level of the virtual clipmap. Lower values allow higher resolution shadows closer to the camera.
        r.Shadow.Virtual.Clipmap.LastCoarseLevel:
          hint: |-
            Last level of the clipmap to mark coarse pages for. Higher values provide dense clipmap data for a longer radius but increase total page counts.
        r.Shadow.Virtual.Clipmap.LastLevel:
          hint: |-
            Last level of the virtual climap. Indirectly determines radius the clipmap can cover.
        r.Shadow.Virtual.Clipmap.UseConservativeCulling:
          hint: |-
        r.Shadow.Virtual.Clipmap.ZRangeScale:
          hint: |-
            Scale of the clipmap level depth range relative to the radius. Should generally be at least 10 or it will result in excessive cache invalidations.
        r.Shadow.Virtual.ContactShadowLength:
          hint: |-
            Length of the screen space contact shadow trace (smart shadow bias) before the virtual shadow map lookup.
        r.Shadow.Virtual.CullBackfacingPixels:
          hint: |-
            When enabled does not generate shadow data for pixels that are backfacing to the light.
        r.Shadow.Virtual.DebugSkipMergePhysical:
          hint: |-
        r.Shadow.Virtual.Enable:
          hint: |-
            Enable Virtual Shadow Maps.
        r.Shadow.Virtual.ForceOnlyVirtualShadowMaps:
          hint: |-
            If enabled, disallow creation of conventional non-virtual shadow maps for any lights that get a virtual shadow map.
            This can improve performance and save memory, but any geometric primitives that cannot be rendered into the virtual shadow map will not cast shadows.
        r.Shadow.Virtual.ForcePerLightShadowMaskClear:
          hint: |-
        r.Shadow.Virtual.HZB32Bit:
          hint: |-
            Use a full 32-bit HZB buffer. This uses more memory but can offer more precise culling in cases with lots of overlapping detailed geometry.
        r.Shadow.Virtual.InitPhysicalUsingIndirect:
          hint: |-
            .
        r.Shadow.Virtual.MarkCoarsePagesDirectional:
          hint: |-
            Marks coarse pages in directional light virtual shadow maps so that low resolution data is available everywhere.Ability to disable is primarily for profiling and debugging.
        r.Shadow.Virtual.MarkCoarsePagesLocal:
          hint: |-
            Marks coarse pages in local light virtual shadow maps so that low resolution data is available everywhere.Ability to disable is primarily for profiling and debugging.
        r.Shadow.Virtual.MarkPixelPages:
          hint: |-
            Marks pages in virtual shadow maps based on depth buffer pixels. Ability to disable is primarily for profiling and debugging.
        r.Shadow.Virtual.MaxPhysicalPages:
          hint: |-
            Maximum number of physical pages in the pool.
        r.Shadow.Virtual.MergePhysicalUsingIndirect:
          hint: |-
            .
        r.Shadow.Virtual.NonNanite.Batch:
          hint: |-
            .
        r.Shadow.Virtual.NonNanite.IncludeInCoarsePages:
          hint: |-
            Include non-Nanite geometry in coarse pages.Rendering non-Nanite geometry into large coarse pages can be expensive; disabling this can be a significant performance win.
        r.Shadow.Virtual.NonNanite.UseHZB:
          hint: |-
            Cull Non-Nanite instances using HZB. If set to 2, attempt to use Nanite-HZB from the current frame.
        r.Shadow.Virtual.NonNaniteVSM:
          hint: |-
            Enable support for non-nanite Virtual Shadow Maps.Read-only and to be set in a config file (requires restart).
        r.Shadow.Virtual.NormalBias:
          hint: |-
            Receiver offset along surface normal for shadow lookup. Scaled by distance to camera.Higher values avoid artifacts on surfaces nearly parallel to the light, but also visibility offset shadows and increase the chance of hitting unmapped pages.
        r.Shadow.Virtual.OnePassProjection:
          hint: |-
            Single pass projects all local VSMs culled with the light grid. Used in conjunction with clustered deferred shading.
        r.Shadow.Virtual.OnePassProjection.MaxLightsPerPixel:
          hint: |-
            Maximum lights per pixel that get full filtering when using one pass projection and clustered shading.Generally set to 8 (32bpp), 16 (64bpp) or 32 (128bpp). Lower values require less transient VRAM during the lighting pass.
        r.Shadow.Virtual.PageDilationBorderSizeDirectional:
          hint: |-
            If a screen pixel falls within this fraction of a page border for directional lights, the adacent page will also be mapped.Higher values can reduce page misses at screen edges or disocclusions, but increase total page counts.
        r.Shadow.Virtual.PageDilationBorderSizeLocal:
          hint: |-
            If a screen pixel falls within this fraction of a page border for local lights, the adacent page will also be mapped.Higher values can reduce page misses at screen edges or disocclusions, but increase total page counts.
        r.Shadow.Virtual.ResolutionLodBiasDirectional:
          hint: |-
            Bias applied to LOD calculations for directional lights. -1.0 doubles resolution, 1.0 halves it and so on.
        r.Shadow.Virtual.ResolutionLodBiasLocal:
          hint: |-
            Bias applied to LOD calculations for local lights. -1.0 doubles resolution, 1.0 halves it and so on.
        r.Shadow.Virtual.ShowClipmapStats:
          hint: |-
            Set to the number of clipmap you want to show stats for (-1 == off)
        r.Shadow.Virtual.ShowStats:
          hint: |-
            ShowStats, also toggle shaderprint one!
        r.Shadow.Virtual.SMRT.AdaptiveRayCount:
          hint: |-
            Shoot fewer rays in fully shadowed and unshadowed regions. Currently only supported with OnePassProjection. 
        r.Shadow.Virtual.SMRT.MaxRayAngleFromLight:
          hint: |-
            Max angle (in radians) a ray is allowed to span from the light's perspective for local lights.Smaller angles limit the screen space size of shadow penumbra. Larger angles lead to more noise. 
        r.Shadow.Virtual.SMRT.RayCountDirectional:
          hint: |-
            Ray count for shadow map tracing of directional lights. 0 = disabled.
        r.Shadow.Virtual.SMRT.RayCountLocal:
          hint: |-
            Ray count for shadow map tracing of local lights. 0 = disabled.
        r.Shadow.Virtual.SMRT.RayLengthScaleDirectional:
          hint: |-
            Length of ray to shoot for directional lights, scaled by distance to camera.Shorter rays limit the screen space size of shadow penumbra. Longer rays require more samples to avoid shadows disconnecting from contact points. 
        r.Shadow.Virtual.SMRT.SamplesPerRayDirectional:
          hint: |-
            Shadow map samples per ray for directional lights
        r.Shadow.Virtual.SMRT.SamplesPerRayLocal:
          hint: |-
            Shadow map samples per ray for local lights
        r.Shadow.Virtual.SMRT.TexelDitherScale:
          hint: |-
            Applies a dither to the shadow map ray casts to help hide aliasing due to insufficient shadow resolution.
            This is usually desirable, but it can occasionally cause shadows from thin geometry to separate from their casters at shallow light angles.
        r.Shadow.Virtual.UseFarShadowCulling:
          hint: |-
            Switch between implementing the far shadow culling logic for VSMs.
        r.Shadow.Virtual.UseHZB:
          hint: |-
            Enables HZB for Virtual Shadow Maps.
        r.Shadow.Virtual.Visualize:
          hint: |-
            When the viewport view-mode is set to 'Virtual Shadow Map Visualization', this command specifies which of the various channels to display. Values entered other than the allowed values shown below will be ignored.
              mask
              mip
              vpage
              cache
              raycount
              clipmapvirtual
        r.Shadow.Virtual.Visualize.Advanced:
          hint: |-
        r.Shadow.Virtual.Visualize.Layout:
          hint: |-
            Overlay layout when virtual shadow map visualization is enabled:
              0: Full screen
              1: Thumbnail
              2: Split screen
        r.Shadow.Virtual.Visualize.LightName:
          hint: |-
            Sets the name of a specific light to visualize (for developer use in non-shiping builds)
        r.Shadow.WholeSceneShadowCacheMb:
          hint: |-
            Amount of memory that can be spent caching whole scene shadows.  ShadowMap allocations in a single frame can cause this to be exceeded.
        r.Shadow.WholeSceneShadowUnbuiltInteractionThreshold:
          hint: |-
            How many unbuilt light-primitive interactions there can be for a light before the light switches to whole scene shadows
        r.ShadowQuality:
          hint: |-
            Defines the shadow method which allows to adjust for quality or performance.
             0:off, 1:low(unfiltered), 2:low .. 5:max (default)
        r.ShowMaterialDrawEvents:
          hint: |-
            Whether to emit a draw event around every mesh draw call with information about the assets used.  Introduces severe CPU and GPU overhead when enabled, but useful for debugging.
        r.ShowPrecomputedVisibilityCells:
          hint: |-
            If not zero, draw all precomputed visibility cells.
        r.ShowRelevantPrecomputedVisibilityCells:
          hint: |-
            If not zero, draw relevant precomputed visibility cells only.
        r.ShowShaderCompilerWarnings:
          hint: |-
            When set to 1, will display all warnings.
        r.SimpleForwardShading:
          hint: |-
            Whether to use the simple forward shading base pass shaders which only support lightmaps + stationary directional light + stationary skylight
            All other lighting features are disabled when true.  This is useful for supporting very low end hardware, and is only supported on PC platforms.
            0:off, 1:on
        r.SkeletalMesh.KeepMobileMinLODSettingOnDesktop:
          hint: |-
            If non-zero, mobile setting for MinLOD will be stored in the cooked data for desktop platforms
        r.SkeletalMesh.LODMaterialReference:
          hint: |-
            Whether a material needs to be referenced by at least one unstripped mesh LOD to be considered as used.
        r.SkeletalMesh.StripMinLodDataDuringCooking:
          hint: |-
            If set will strip skeletal mesh LODs under the minimum renderable LOD for the target platform during cooking.
        r.SkeletalMeshLODBias:
          hint: |-
            LOD bias for skeletal meshes (does not affect animation editor viewports).
        r.SkeletalMeshLODRadiusScale:
          hint: |-
            Scale factor for the screen radius used in computing discrete LOD for skeletal meshes. (0.25-1)
        r.SkeletalMeshReductionModule:
          hint: |-
            Name of what skeletal mesh reduction module to choose. If blank it chooses any that exist.
        r.SkinCache.AllowDupedVertsForRecomputeTangents:
          hint: |-
            0: off (default)
            1: Forces that vertices at the same position will be treated differently and has the potential to cause seams when verts are split.
        r.SkinCache.Capture:
          hint: |-
            Trigger a render capture for the next skin cache dispatches.
        r.SkinCache.CompileShaders:
          hint: |-
            Whether or not to compile the GPU compute skinning cache shaders.
            This will compile the shaders for skinning on a compute job and not skin on the vertex shader.
            GPUSkinVertexFactory.usf needs to be touched to cause a recompile if this changes.
            0 is off(default), 1 is on
        r.SkinCache.Debug:
          hint: |-
            A scaling constant passed to the SkinCache shader, useful for debugging
        r.SkinCache.DefaultBehavior:
          hint: |-
            Default behavior if all skeletal meshes are included/excluded from the skin cache. If Support Ray Tracing is enabled on a mesh, will force inclusive behavior on that mesh.
             Exclusive ( 0): All skeletal meshes are excluded from the skin cache. Each must opt in individually.
             Inclusive ( 1): All skeletal meshes are included into the skin cache. Each must opt out individually. (default)
        r.SkinCache.MaxDispatchesPerCmdList:
          hint: |-
            Maximum number of compute shader dispatches which are batched together into a single command list to fix potential TDRs.
        r.SkinCache.MaxRayTracingPrimitivesPerCmdList:
          hint: |-
            Maximum amount of primitives which are batched together into a single command list to fix potential TDRs.
        r.SkinCache.MemoryLimitForBatchedRayTracingGeometryUpdates:
          hint: |-
        r.SkinCache.Mode:
          hint: |-
            Whether or not to use the GPU compute skinning cache.
            This will perform skinning on a compute job and not skin on the vertex shader.
            Requires r.SkinCache.CompileShaders=1
             0: off
             1: on(default)
        r.SkinCache.NumTangentIntermediateBuffers:
          hint: |-
            How many intermediate buffers to use for intermediate results while
            doing Recompute Tangents; more may allow the GPU to overlap compute jobs.
        r.SkinCache.PrintMemorySummary:
          hint: |-
            Print break down of memory usage. 0: off (default), 1: print when out of memory, 2: print every frame
        r.SkinCache.RayTracingUseTransientForScratch:
          hint: |-
            Use Transient memory for BLAS scratch allocation to reduce memory footprint and allocation overhead.
        r.SkinCache.RecomputeTangents:
          hint: |-
            This option enables recomputing the vertex tangents on the GPU.
            Can be changed at runtime, requires both r.SkinCache.CompileShaders=1 and r.SkinCache.Mode=1
             0: off
             1: on, forces all skinned object to Recompute Tangents
             2: on, only recompute tangents on skinned objects who ticked the Recompute Tangents checkbox(default)
        r.SkinCache.RecomputeTangentsParallelDispatch:
          hint: |-
            This option enables parallel dispatches for recompute tangents.
             0: off (default), triangle pass is interleaved with vertex pass, requires resource barriers in between. 
             1: on, batch triangle passes together, resource barrier, followed by vertex passes together, cost more memory. 
        r.SkinCache.SceneMemoryLimitInMB:
          hint: |-
            Maximum memory allowed to be allocated per World/Scene in Megs
        r.SkipRedundantTransformUpdate:
          hint: |-
            Skip updates UpdatePrimitiveTransform is called redundantly, if the proxy allows it.
        r.SkyAtmosphere:
          hint: |-
            SkyAtmosphere components are rendered when this is not 0, otherwise ignored.
        r.SkyAtmosphere.AerialPerspective.DepthTest:
          hint: |-
            When enabled, a depth test will be used to not write pixel closer to the camera than StartDepth, effectively improving performance.
        r.SkyAtmosphere.AerialPerspectiveLUT.Depth:
          hint: |-
            The length of the LUT in kilometers (default = 96km to get nice cloud/atmosphere interactions in the distance for default sky). Further than this distance, the last slice is used.
        r.SkyAtmosphere.AerialPerspectiveLUT.DepthResolution:
          hint: |-
            The number of depth slice to use for the aerial perspective volume texture.
        r.SkyAtmosphere.AerialPerspectiveLUT.FastApplyOnOpaque:
          hint: |-
            When enabled, the low resolution camera frustum/froxel volume containing atmospheric fog
            , usually used for fog on translucent surface, is used to render fog on opaque.
            It is faster but can result in visual artefacts if there are some high frequency details
            such as earth shadow or scattering lob.
        r.SkyAtmosphere.AerialPerspectiveLUT.SampleCountMaxPerSlice:
          hint: |-
            The sample count used per slice to evaluate aerial perspective. The effective sample count is usually lower and depends on SampleCountScale on the component as well as .ini files.
            scattering and transmittance in camera frustum space froxel.
        r.SkyAtmosphere.AerialPerspectiveLUT.Width:
          hint: |-
        r.SkyAtmosphere.DistanceToSampleCountMax:
          hint: |-
            The distance in kilometer after which SampleCountMax samples will be used to ray march the atmosphere.
        r.SkyAtmosphere.DistantSkyLightLUT:
          hint: |-
            Enable the generation the sky ambient lighting value.
        r.SkyAtmosphere.DistantSkyLightLUT.Altitude:
          hint: |-
            The altitude at which the sky samples are taken to integrate the sky lighting. Default to 6km, typicaly cirrus clouds altitude.
        r.SkyAtmosphere.FastSkyLUT:
          hint: |-
            When enabled, a look up texture is used to render the sky.
            It is faster but can result in visual artefacts if there are some high frequency details
            in the sky such as earth shadow or scattering lob.
        r.SkyAtmosphere.FastSkyLUT.DistanceToSampleCountMax:
          hint: |-
            Fast sky distance in kilometer after which at which SampleCountMax samples will be used to ray march the atmosphere.
        r.SkyAtmosphere.FastSkyLUT.Height:
          hint: |-
        r.SkyAtmosphere.FastSkyLUT.SampleCountMax:
          hint: |-
            Fast sky maximum sample count used to compute sky/atmosphere scattering and transmittance.
            The maximum sample count used to compute FastSkyLUT scattering. The effective sample count is usually lower and depends on distance and SampleCountScale on the component, as well as .ini files.
            The minimal value will be clamped to r.SkyAtmosphere.FastSkyLUT.SampleCountMin + 1.
        r.SkyAtmosphere.FastSkyLUT.SampleCountMin:
          hint: |-
            Fast sky minimum sample count used to compute sky/atmosphere scattering and transmittance.
            The minimal value will be clamped to 1.
        r.SkyAtmosphere.FastSkyLUT.Width:
          hint: |-
        r.SkyAtmosphere.LUT32:
          hint: |-
            Use full 32bit per-channel precision for all sky LUTs.
        r.SkyAtmosphere.MultiScatteringLUT.Height:
          hint: |-
        r.SkyAtmosphere.MultiScatteringLUT.HighQuality:
          hint: |-
            The when enabled, 64 samples are used instead of 2, resulting in a more accurate multi scattering approximation (but also more expenssive).
        r.SkyAtmosphere.MultiScatteringLUT.SampleCount:
          hint: |-
            The sample count used to evaluate multi-scattering.
        r.SkyAtmosphere.MultiScatteringLUT.Width:
          hint: |-
        r.SkyAtmosphere.SampleCountMax:
          hint: |-
            The maximum sample count used to compute sky/atmosphere scattering and transmittance The effective sample count is usually lower and depends on distance and SampleCountScale on the component, as well as .ini files.
            The minimal value will be clamped to r.SkyAtmosphere.SampleCountMin + 1.
        r.SkyAtmosphere.SampleCountMin:
          hint: |-
            The minimum sample count used to compute sky/atmosphere scattering and transmittance.
            The minimal value will be clamped to 1.
        r.SkyAtmosphere.SampleLightShadowmap:
          hint: |-
            Enable the sampling of atmospheric lights shadow map in order to produce volumetric shadows.
        r.SkyAtmosphere.TransmittanceLUT:
          hint: |-
            Enable the generation of the sky transmittance.
        r.SkyAtmosphere.TransmittanceLUT.Height:
          hint: |-
        r.SkyAtmosphere.TransmittanceLUT.SampleCount:
          hint: |-
            The sample count used to evaluate transmittance.
        r.SkyAtmosphere.TransmittanceLUT.UseSmallFormat:
          hint: |-
            If true, the transmittance LUT will use a small R8BG8B8A8 format to store data at lower quality.
        r.SkyAtmosphere.TransmittanceLUT.Width:
          hint: |-
        r.SkyLight.RealTimeReflectionCapture:
          hint: |-
            Make sure the sky light real time capture is not run on platform where it is considered out of budget. Cannot be changed at runtime.
        r.SkyLight.RealTimeReflectionCapture.DepthBuffer:
          hint: |-
            When enabled, the real-time sky light capture will have a depth buffer, this is for multiple meshes to be cover each other correctly. The height fog will also be applied according to the depth buffer.
        r.SkyLight.RealTimeReflectionCapture.ShadowFromOpaque:
          hint: |-
            Opaque meshes cast shadow from directional lights onto sky and clouds when enabled.
        r.SkyLight.RealTimeReflectionCapture.TimeSlice:
          hint: |-
            When enabled, the real-time sky light capture and convolutions will by distributed over several frames to lower the per-frame cost.
        r.SkyLightingQuality:
          hint: |-
            Defines the sky lighting quality which allows to adjust for performance.
            <=0: off (fastest)
              1: on
        r.SkylightIntensityMultiplier:
          hint: |-
            Intensity scale on Stationary and Movable skylights.  This is useful to control overall lighting contrast in dynamically lit games with scalability levels which disable Ambient Occlusion.  For example, if medium quality disables SSAO and DFAO, reduce skylight intensity.
        r.SkylightUpdateEveryFrame:
          hint: |-
            Whether to update all skylights every frame.  Useful for debugging.
        r.SkySpecularOcclusionStrength:
          hint: |-
            Strength of skylight specular occlusion from DFAO (default is 1.0)
        r.SplineMesh.NoRecreateProxy:
          hint: |-
            Optimization. If true, spline mesh proxies will not be recreated every time they are changed. They are simply updated.
        r.SSGI.AllowStandaloneLumenProbeHierarchy:
          hint: |-
            TODO(Guillaume)
        r.SSGI.LeakFreeReprojection:
          hint: |-
            Whether use a more expensive but leak free reprojection of previous frame's scene color.
        r.SSGI.MinimumLuminance:
          hint: |-
        r.SSGI.Quality:
          hint: |-
            Quality setting to control number of ray shot with SSGI, between 1 and 4 (defaults to 4).
        r.SSGI.RejectUncertainRays:
          hint: |-
            Rejects the screen space ray if it was uncertain due to going behind screen geometry.
        r.SSGI.SkyDistance:
          hint: |-
            Distance of the sky in KM.
        r.SSGI.TerminateCertainRay:
          hint: |-
            Optimisations that if the screen space ray is certain and didn't find any geometry, don't fallback on otehr tracing technic.
        r.SSProfilesPreIntegratedTextureForceUpdate:
          hint: |-
            0: Only update the preintegrated texture as needed.
            1: Force to update the preintegrated texture for debugging.
        r.SSProfilesPreIntegratedTextureResolution:
          hint: |-
            The resolution of the subsurface profile preintegrated texture.
        r.SSR.ExperimentalDenoiser:
          hint: |-
            Replace SSR's TAA pass with denoiser.
        r.SSR.HalfResSceneColor:
          hint: |-
            Use half res scene color as input for SSR. Improves performance without much of a visual quality loss.
        r.SSR.MaxRoughness:
          hint: |-
            Allows to override the post process setting ScreenSpaceReflectionMaxRoughness.
            It defines until what roughness we fade the screen space reflections, 0.8 works well, smaller can run faster.
            (Useful for testing, no scalability or project setting)
             0..1: use specified max roughness (overrride PostprocessVolume setting)
             -1: no override (default)
        r.SSR.Quality:
          hint: |-
            Whether to use screen space reflections and at what quality setting.
            (limits the setting in the post process settings which has a different scale)
            (costs performance, adds more visual realism but the technique has limits)
             0: off (default)
             1: low (no glossy)
             2: medium (no glossy)
             3: high (glossy/using roughness, few samples)
             4: very high (likely too slow for real-time)
        r.SSR.Stencil:
          hint: |-
            Defines if we use the stencil prepass for the screen space reflection
             0 is off (default), 1 is on
        r.SSR.Temporal:
          hint: |-
            Defines if we use the temporal smoothing for the screen space reflection
             0 is off (for debugging), 1 is on (default)
        r.SSS.Burley.AlwaysUpdateParametersFromSeparable:
          hint: |-
            0: Will not update parameters when the program loads. (default)1: Always update from the separable when the program loads. (Correct only when Subsurface color is 1).
        r.SSS.Burley.BilateralFilterKernelFunctionType:
          hint: |-
            0: Depth Only. It is more performant (x2 faster for close view).1: Depth and normal. It leads to better quality in regions like eyelids. (default)
        r.SSS.Burley.EnableProfileIdCache:
          hint: |-
            0: Disable profile id cache using in the sampling pass.
            1: Consumes 1 byte per pixel more memory to make Burley pass much faster. (default)
        r.SSS.Burley.MinGenerateMipsTileCount:
          hint: |-
            4000. (default) The minimal number of tiles to trigger subsurface radiance mip generation. Set to zero to always generate mips (Experimental value)
        r.SSS.Burley.NumSamplesOverride:
          hint: |-
            When zero, Burley SSS adaptively determines the number of samples. When non-zero, this value overrides the sample count.
        r.SSS.Burley.Quality:
          hint: |-
            0: Fallback mode. Burley falls back to run scattering in Separable with transmission in Burley for better performance. Separable parameters are automatically fitted.1: Automatic. The subsurface will only switch to separable in half resolution. (default)
        r.SSS.Checkerboard:
          hint: |-
            Enables or disables checkerboard rendering for subsurface profile rendering.
            This is necessary if SceneColor does not include a floating point alpha channel (e.g 32-bit formats)
             0: Disabled (high quality) 
             1: Enabled (low quality). Surface lighting will be at reduced resolution.
             2: Automatic. Non-checkerboard lighting will be applied if we have a suitable rendertarget format
        r.SSS.Filter:
          hint: |-
            Defines the filter method for Screenspace Subsurface Scattering feature.
             0: point filter (useful for testing, could be cleaner)
             1: bilinear filter
        r.SSS.HalfRes:
          hint: |-
             0: full quality (Combined Burley and Separable pass. Separable is not optimized, as reference)
             1: parts of the algorithm runs in half resolution which is lower quality but faster (default, Separable only)
        r.SSS.Quality:
          hint: |-
            Defines the quality of the recombine pass when using the SubsurfaceScatteringProfile shading model
             0: low (faster, default)
             1: high (sharper details but slower)
            -1: auto, 1 if TemporalAA is disabled (without TemporalAA the quality is more noticable)
        r.SSS.SampleSet:
          hint: |-
            Defines how many samples we use for Separable Screenspace Subsurface Scattering feature.
             0: lowest quality (6*2+1)
             1: medium quality (9*2+1)
             2: high quality (13*2+1) (default)
        r.SSS.Scale:
          hint: |-
            Affects the Screen space Separable subsurface scattering pass (use shadingmodel SubsurfaceProfile, get near to the object as the default)
            is human skin which only scatters about 1.2cm)
             0: off (if there is no object on the screen using this pass it should automatically disable the post process pass)
            <1: scale scatter radius down (for testing)
             1: use given radius form the Subsurface scattering asset (default)
            >1: scale scatter radius up (for testing)
        r.StaticMesh.DisableThreadedBuild:
          hint: |-
            Activate to force static mesh building from a single thread.
        r.StaticMesh.EnableSaveGeneratedLODsInPackage:
          hint: |-
            Enables saving generated LODs in the Package.
            0 - Do not save (and hide this menu option) [default].
            1 - Enable this option and save the LODs in the Package.
        r.StaticMesh.KeepMobileMinLODSettingOnDesktop:
          hint: |-
            If non-zero, mobile setting for MinLOD will be stored in the cooked data for desktop platforms
        r.StaticMesh.MinLodQualityLevel:
          hint: |-
            The quality level for the Min stripping LOD. 
        r.StaticMesh.StripDistanceFieldDataDuringLoad:
          hint: |-
            If non-zero, data for distance fields will be discarded on load. TODO: change to discard during cook!.
        r.StaticMesh.StripMinLodDataDuringCooking:
          hint: |-
            If non-zero, data for Static Mesh LOD levels below MinLOD will be discarded at cook time
        r.StaticMesh.UpdateMeshLODGroupSettingsAtLoad:
          hint: |-
            If set, LODGroup settings for static meshes will be applied at load time.
        r.StaticMeshLODDistanceScale:
          hint: |-
            Scale factor for the distance used in computing discrete LOD for static meshes. (defaults to 1)
            (higher values make LODs transition earlier, e.g., 2 is twice as fast / half the distance)
        r.StencilForLODDither:
          hint: |-
            Whether to use stencil tests in the prepass, and depth-equal tests in the base pass to implement LOD dithering.
            If disabled, LOD dithering will be done through clip() instructions in the prepass and base pass, which disables EarlyZ.
            Forces a full prepass when enabled.
        r.StencilLODMode:
          hint: |-
            Specifies the dither LOD stencil mode.
             0: Graphics pass.
             1: Compute pass (on supported platforms).
             2: Compute async pass (on supported platforms).
        r.Strata:
          hint: |-
            Enable Strata materials (Beta).
        r.Strata.BytesPerPixel:
          hint: |-
            Strata allocated byte per pixel to store materials data. Higher value means more complex material can be represented.
        r.Strata.Classification.Debug:
          hint: |-
            Enable strata classification visualization: 1 shows simple material tiles in green and complex material tiles in red.
        r.strata.ClearDuringCategorization:
          hint: |-
            TEST.
        r.Strata.RoughDiffuse:
          hint: |-
            Enable Strata rough diffuse model (works only if r.Material.RoughDiffuse is enabled in the project settings). Togglable at runtime
        r.StrataBackCompatibility:
          hint: |-
            Disables Strata multiple scattering and replaces Chan diffuse by Lambert.
        r.Streaming.AbandonedDDCHandlePurgeFrequency:
          hint: |-
            The number of abandonned handle at which a purge will be triggered (default=150)
        r.Streaming.AllowFastForceResident:
          hint: |-
            Whether it is allowed to load in missing mips for fast-force-resident assets ASAP. Useful to accelerate force-resident process but risks disturbing streaming metric calculation. Fast-force-resident mips can't be sacrificed even when overbudget so use with caution.
        r.Streaming.AllowParallelStreamingRenderAssets:
          hint: |-
            Whether it is allowed to do UpdateStreamingRenderAssets with a ParallelFor to use more cores.
        r.Streaming.AmortizeCPUToGPUCopy:
          hint: |-
            If set and r.Streaming.MaxNumTexturesToStreamPerFrame > 0, limit the number of 2D textures streamed from CPU memory to GPU memory each frame
        r.Streaming.Boost:
          hint: |-
            =1.0: normal
            <1.0: decrease wanted mip levels
            >1.0: increase wanted mip levels
        r.Streaming.CheckBuildStatus:
          hint: |-
            If non-zero, the engine will check whether texture streaming needs rebuild.
        r.Streaming.DefaultNoRefLODBias:
          hint: |-
            The default LOD bias for no-ref meshes
        r.Streaming.DefragDynamicBounds:
          hint: |-
            If non-zero, unused dynamic bounds will be removed from the update loop
        r.Streaming.DropMips:
          hint: |-
            0: Drop No Mips 
            1: Drop Cached Mips
            2: Drop Cached and Hidden Mips
            3: Drop cached mips and non-inlined LODs of no-ref meshes
        r.Streaming.EnableAutoDetectNoStreamableTextures:
          hint: |-
            Enables auto-detection at cook time of primitive components with no streamable textures. Can also be turned-off at runtime to skip optimisation.
        r.Streaming.FlushTimeOut:
          hint: |-
            Time before we timeout when flushing streaming (default=3)
        r.Streaming.FramesForFullUpdate:
          hint: |-
            Texture streaming is time sliced per frame. This values gives the number of frames to visit all textures.
        r.Streaming.FullyLoadUsedTextures:
          hint: |-
            If non-zero, all used texture will be fully streamed in as fast as possible
        r.Streaming.HiddenPrimitiveScale:
          hint: |-
            Define the resolution scale to apply when not in range.
            .5: drop one mip
            1: ignore visiblity
        r.Streaming.HLODStrategy:
          hint: |-
            Define the HLOD streaming strategy.
            0: stream
            1: stream only mip 0
            2: disable streaming
        r.Streaming.LimitPoolSizeToVRAM:
          hint: |-
            If non-zero, texture pool size with be limited to how much GPU mem is available.
        r.Streaming.MaxEffectiveScreenSize:
          hint: |-
            0: Use current actual vertical screen size
            > 0: Clamp wanted mip size calculation to this value for the vertical screen size component.
        r.Streaming.MaxHiddenPrimitiveViewBoost:
          hint: |-
            Maximum view boost that can affect hidden primitive.
            This prevents temporary small FOV from streaming all textures to their highest mips.
        r.Streaming.MaxNumTexturesToStreamPerFrame:
          hint: |-
            Maximum number of 2D textures allowed to stream from CPU memory to GPU memory each frame. <= 0 means no limit. This has no effect if r.Streaming.AmortizeCPUToGPUCopy is not set
        r.Streaming.MaxReferenceChecksBeforeStreamOut:
          hint: |-
            Number of times the engine wait for references to be released before forcing streamout. (default=2)
        r.Streaming.MaxTempMemoryAllowed:
          hint: |-
            Maximum temporary memory used when streaming in or out texture mips.
            This memory contains mips used for the new updated texture.
            The value must be high enough to not be a limiting streaming speed factor.
        r.Streaming.MaxTextureUVDensity:
          hint: |-
            If non-zero, the max UV density a static entry can have.
            Used to improve level culling from MinLevelTextureScreenSize.
            Component with bigger entries become handled as dynamic component.
        r.Streaming.MinBoost:
          hint: |-
            Minimum clamp for r.Streaming.Boost
        r.Streaming.MinLevelRenderAssetScreenSize:
          hint: |-
            If non-zero, levels only get handled if any of their referenced texture could be required of this size. Using conservative metrics on the level data.
        r.Streaming.MinMipForSplitRequest:
          hint: |-
            If non-zero, the minimum hidden mip for which load requests will first load the visible mip
        r.Streaming.MipBias:
          hint: |-
            0..x reduce texture quality for streaming by a floating point number.
            0: use full resolution (default)
            1: drop one mip
            2: drop two mips
        r.Streaming.MipCalculationEnablePerLevelList:
          hint: |-
            If non-zero, Mip size computation for streamed texture will use levels referenced with it (instead of iterating thorugh every levels).
        r.Streaming.NoRefLODBiasQualityLevel:
          hint: |-
            The quality level for the no-ref mesh streaming LOD bias
        r.Streaming.NumStaticComponentsProcessedPerFrame:
          hint: |-
            If non-zero, the engine will incrementaly inserting levels by processing this amount of components per frame before they become visible
        r.Streaming.OverlapAssetAndLevelTicks:
          hint: |-
            Ticks render asset streaming info on a high priority task thread while ticking levels on GT
        r.Streaming.ParallelRenderAssetsNumWorkgroups:
          hint: |-
            How many workgroups we want to use for ParellelRenderAsset updates. Splits the work up a bit more so we don't get as many waits. Though adds overhead to GameThread if too high.
        r.Streaming.PerTextureBiasViewBoostThreshold:
          hint: |-
            Maximum view boost at which per texture bias will be increased.
            This prevents temporary small FOV from downgrading permanentely texture quality.
        r.Streaming.PoolSize:
          hint: |-
            -1: Default texture pool size, otherwise the size in MB
        r.Streaming.PoolSize.VRAMPercentageClamp:
          hint: |-
            When using PoolSizeVRAMPercentage, a maximum amout of memory to reserve in MB.
            This avoids reserving too much space for systems with a lot of VRAM. (default=1024)
        r.Streaming.PoolSizeForMeshes:
          hint: |-
            < 0: Mesh and texture share the same pool, otherwise the size of pool dedicated to meshes.
        r.Streaming.PrioritizeMeshLODRetention:
          hint: |-
            Whether to prioritize retaining mesh LODs
        r.Streaming.StressTest:
          hint: |-
            Set to non zero to stress test the streaming update.
            Negative values also slow down the IO.
        r.Streaming.StressTest.ExtaIOLatency:
          hint: |-
            An extra latency in milliseconds for each stream-in requests when doing the stress test.
        r.Streaming.StressTest.ExtraAsyncLatency:
          hint: |-
            An extra latency in milliseconds for each async task when doing the stress test.
        r.Streaming.StressTest.FramesForFullUpdate:
          hint: |-
            Num frames to update texture states when doing the stress tests.
        r.Streaming.UseAllMips:
          hint: |-
            If non-zero, all available mips will be used
        r.Streaming.UseAsyncRequestsForDDC:
          hint: |-
            Whether to use async DDC requets in order to react quickly to cancel and suspend rendering requests (default=0)
        r.Streaming.UseBackgroundThreadPool:
          hint: |-
            If true, use the background thread pool for mip calculations.
        r.Streaming.UseFixedPoolSize:
          hint: |-
            If non-zero, do not allow the pool size to change at run time.
        r.Streaming.UseGenericStreamingPath:
          hint: |-
            Control when to use the mip data provider implementation: (default=0)
            0 to use it when there is a custom asset override.
            1 to always use it.
            2 to never use it.
        r.Streaming.UseMaterialData:
          hint: |-
            If non-zero, material texture scales and coord will be used
        r.Streaming.UseMobileLODBiasOnDesktopES31:
          hint: |-
            If set apply mobile Min LOD bias on desktop platforms when running in ES31 mode
        r.Streaming.UseNewMetrics:
          hint: |-
            If non-zero, will use improved set of metrics and heuristics.
        r.Streaming.UsePerTextureBias:
          hint: |-
            If non-zero, each texture will be assigned a mip bias between 0 and MipBias as required to fit in budget.
        r.SubsurfaceScattering:
          hint: |-
             0: disabled
             1: enabled (default)
        r.SupportAllShaderPermutations:
          hint: |-
            Local user config override to force all shader permutation features on.
        r.SupportCloudShadowOnForwardLitTranslucent:
          hint: |-
            Enables cloud shadow to affect all translucenct surface not relying on the translucent lighting volume.
        r.SupportDepthOnlyIndexBuffers:
          hint: |-
            Enables depth-only index buffers. Saves a little time at the expense of doubling the size of index buffers.
        r.SupportLowQualityLightmaps:
          hint: |-
            Support low quality lightmap shader permutations
        r.SupportPointLightWholeSceneShadows:
          hint: |-
            Enables shadowcasting point lights.
        r.SupportReversedIndexBuffers:
          hint: |-
            Enables reversed index buffers. Saves a little time at the expense of doubling the size of index buffers.
        r.SupportSimpleForwardShading:
          hint: |-
            Whether to compile the shaders to support r.SimpleForwardShading being enabled (PC only).
        r.SupportSkyAtmosphere:
          hint: |-
            Enables SkyAtmosphere rendering and shader code.
        r.SupportSkyAtmosphereAffectsHeightFog:
          hint: |-
            Enables SkyAtmosphere affecting height fog. It requires r.SupportSkyAtmosphere to be true.
        r.SupportStationarySkylight:
          hint: |-
            Enables Stationary and Dynamic Skylight shader permutations.
        r.TemporalAA.AllowDownsampling:
          hint: |-
            Allows half-resolution color buffer to be produced during TAA. Only possible when motion blur is off and when using compute shaders for post processing.
        r.TemporalAA.Debug.OverrideTemporalIndex:
          hint: |-
            Override the temporal index for debugging purposes.
        r.TemporalAA.HistoryScreenPercentage:
          hint: |-
            Size of temporal AA's history.
        r.TemporalAA.Quality:
          hint: |-
            Quality of the main Temporal AA pass.
             0: Disable input filtering;
             1: Enable input filtering;
             2: Enable input filtering, enable mobility based anti-ghosting (Default)
        r.TemporalAA.R11G11B10History:
          hint: |-
            Select the bitdepth of the history.
        r.TemporalAA.Upsampling:
          hint: |-
            Whether to do primary screen percentage with temporal AA or not.
             0: use spatial upscale pass independently of TAA;
             1: TemporalAA performs spatial and temporal upscale as screen percentage method (default).
        r.TemporalAA.Upscaler:
          hint: |-
            Choose the upscaling algorithm.
             0: Forces the default temporal upscaler of the renderer;
             1: GTemporalUpscaler which may be overridden by a third party plugin (default).
        r.TemporalAA.UseMobileConfig:
          hint: |-
            1 to use mobile TAA config. This will disable groupshared caching of the color and depth buffers.
             0: disabled (default);
             1: enabled;
        r.TemporalAACatmullRom:
          hint: |-
            Whether to use a Catmull-Rom filter kernel. Should be a bit sharper than Gaussian.
        r.TemporalAACurrentFrameWeight:
          hint: |-
            Weight of current frame's contribution to the history.  Low values cause blurriness and ghosting, high values fail to hide jittering.
        r.TemporalAAFilterSize:
          hint: |-
            Size of the filter kernel. (1.0 = smoother, 0.0 = sharper but aliased).
        r.TemporalAAPauseCorrect:
          hint: |-
            Correct temporal AA in pause. This holds onto render targets longer preventing reuse and consumes more memory.
        r.TemporalAASamples:
          hint: |-
            Number of jittered positions for temporal AA (4, 8=default, 16, 32, 64).
        r.Test.CameraCut:
          hint: |-
            Force enabling camera cut for testing purposes.
             0: disabled (default); 1: enabled.
        r.Test.ConstrainedView:
          hint: |-
            Allows to test different viewport rectangle configuations (in game only) as they can happen when using cinematics/Editor.
            0: off(default)
            1..7: Various Configuations
        r.Test.DynamicResolutionHell:
          hint: |-
            Override the screen percentage interface for all view family with dynamic resolution hell.
             0: off (default);
             1: Dynamic resolution hell.
        r.Test.EditorConstrainedView:
          hint: |-
            Allows to test different viewport rectangle configuations (in game only) as they can happen when using cinematics/Editor.
            0: off(default)
            1..7: Various Configuations
        r.Test.ForceBlackVelocityBuffer:
          hint: |-
            Force the velocity buffer to have no motion vector for debugging purpose.
        r.Test.FreezeTemporalHistories:
          hint: |-
            Freezes all temporal histories as well as the temporal sequence.
        r.Test.FreezeTemporalSequences:
          hint: |-
            Freezes all temporal sequences.
        r.Test.OverrideTimeMaterialExpressions:
          hint: |-
            Value to freeze time material expressions with.
        r.Test.PrimaryScreenPercentageMethodOverride:
          hint: |-
            Override the screen percentage method for all view family.
             0: view family's screen percentage interface choose; (default)
             1: old fashion upscaling pass at the very end right before before UI;
             2: TemporalAA upsample.
        r.Test.SecondaryUpscaleOverride:
          hint: |-
            Override the secondary upscale.
             0: disabled; (default)
             1: use secondary view fraction = 0.5 with nearest secondary upscale.
        r.Test.ViewRectOffset:
          hint: |-
            Moves the view rect within the renderer's internal render target.
             0: disabled (default);
        r.TexelDebugging:
          hint: |-
            Whether T + Left mouse click in the editor selects lightmap texels for debugging Lightmass.  Lightmass must be recompiled with ALLOW_LIGHTMAP_SAMPLE_DEBUGGING enabled for this to work.
        r.TextureProfiler.EnableRenderTargetCSV:
          hint: |-
            True to enable csv profiler output for all Render Targets.
        r.TextureProfiler.EnableTextureCSV:
          hint: |-
            True to enable csv profiler output for all textures.  Does not include render targets.
        r.TextureProfiler.MinRenderTargetSizeMB:
          hint: |-
            The minimum combined size for render targets to be reported.  All combined sizes less than this threshold will be reported as Other.
        r.TextureProfiler.MinTextureSizeMB:
          hint: |-
            The minimum size for any texture to be reported.  All textures below this threshold will be reported as Other.
        r.TextureReferenceRevertsLastRenderContainer:
          hint: |-
        r.TextureStreaming:
          hint: |-
            Allows to define if texture streaming is enabled, can be changed at run time.
            0: off
            1: on (default)
        r.Tonemapper.GrainQuantization:
          hint: |-
            0: low (minor performance benefit)
            1: high (default, with high frequency pixel pattern to fight 8 bit color quantization)
        r.Tonemapper.Quality:
          hint: |-
            Defines the Tonemapper Quality in the range 0..5
            Depending on the used settings we might pick a faster shader permutation
             0: basic tonemapper only, lowest quality
             2: + Vignette
             4: + Grain
             5: + GrainJitter = full quality (default)
        r.Tonemapper.Sharpen:
          hint: |-
            Sharpening in the tonemapper (not for mobile), actual implementation is work in progress, clamped at 10
               0: off(default)
             0.5: half strength
               1: full strength
        r.TonemapperGamma:
          hint: |-
            0: Default behavior
            #: Use fixed gamma # instead of sRGB or Rec709 transform
        r.TrackCsvNamedEvents:
          hint: |-
            Whether to record named events in the csv profiler
        r.TranslucencyLightingVolumeDim:
          hint: |-
            Dimensions of the volume textures used for translucency lighting.  Larger textures result in higher resolution but lower performance.
        r.TranslucencyLightingVolumeInnerDistance:
          hint: |-
            Distance from the camera that the first volume cascade should end
        r.TranslucencyLightingVolumeOuterDistance:
          hint: |-
            Distance from the camera that the second volume cascade should end
        r.TranslucencyVolumeBlur:
          hint: |-
            Whether to blur the translucent lighting volumes.
            0:off, otherwise on, default is 1
        r.TranslucentLightingVolume:
          hint: |-
            Whether to allow updating the translucent lighting volumes.
            0:off, otherwise on, default is 1
        r.TranslucentSortPolicy:
          hint: |-
            0: Sort based on distance from camera centerpoint to bounding sphere centerpoint. (default, best for 3D games)
            1: Sort based on projected distance to camera.2: Sort based on the projection onto a fixed axis. (best for 2D games)
        r.TranslucentVolumeFOVSnapFactor:
          hint: |-
            FOV will be snapped to a factor of this before computing volume bounds.
        r.TranslucentVolumeMinFOV:
          hint: |-
            Minimum FOV for translucent lighting volume.  Prevents popping in lighting when zooming in.
        r.TriangleOrderOptimization:
          hint: |-
            Controls the algorithm to use when optimizing the triangle order for the post-transform cache.
            0: Use NVTriStrip (slower)
            1: Use Forsyth algorithm (fastest)(default)2: No triangle order optimization. (least efficient, debugging purposes only)
        r.TSR.Debug.SetupExtraPasses:
          hint: |-
            Whether to enable the debug passes
        r.TSR.History.R11G11B10:
          hint: |-
            Select the bitdepth of the history.
        r.TSR.History.ScreenPercentage:
          hint: |-
            Size of TSR's history.
        r.TSR.History.UpdateQuality:
          hint: |-
            Select the quality of the history update.
        r.TSR.RejectionAntiAliasingQuality:
          hint: |-
            Controls the quality of spatial anti-aliasing on history rejection (default=1).
        r.TSR.ShadingRejection.HalfRes:
          hint: |-
            Whether the shading rejection should be done at half res. Saves performance but may introduce back some flickering (default = 0).
        r.TSR.ShadingRejection.SpatialFilter:
          hint: |-
            Whether the shading rejection should have spatial statistical filtering pass to reduce flickering (default = 1).
             0: Disabled;
             1: Spatial filter pass is run at lower resolution than CompareHistory pass (default);
             2: Spatial filter pass is run CompareHistory pass resolution to improve stability.
        r.TSR.Translucency.EnableResponiveAA:
          hint: |-
            Whether the responsive AA should keep history fully clamped.
        r.TSR.Translucency.HighlightLuminance:
          hint: |-
            Sets the liminance at which translucency is considered an highlights (default=-1.0).
        r.TSR.Translucency.SeparateTemporalAccumulation:
          hint: |-
            Accumulates separate translucency separatly (enabled by default).
        r.TSR.Velocity.Extrapolation:
          hint: |-
            Defines how much the velocity should be extrapolated on geometric discontinuities (Default = 1.0f).
        r.TSR.Velocity.HoleFill:
          hint: |-
            Whether to holl-fill the velocity buffer on parralax disocclusion to reduce boiling of disoccluded areas.
        r.TSR.Velocity.HoleFill.MaxScatterVelocity:
          hint: |-
            Maximum output pixel velocity difference tolerated between the disoccluded and scattered disoccluding geometries.
        r.TSR.Velocity.WeightClampingPixelSpeed:
          hint: |-
            Defines the pixel velocity at which the the high frequencies of the history get's their contributing weight clamped. Smallest reduce blur in movement (Default = 1.0f).
        r.UITextureLODBias:
          hint: |-
            Extra LOD bias to apply to UI textures. (default=0)
        r.UnbindResourcesBetweenDrawsInDX11:
          hint: |-
            Unbind resources between material changes in DX11.
        r.UniformBufferPooling:
          hint: |-
            If we pool object in RHICreateUniformBuffer to have less real API calls to create buffers
             0: off (for debugging)
             1: on (optimization)
        r.Upscale.Panini.D:
          hint: |-
            Allow and configure to apply a panini distortion to the rendered image. Values between 0 and 1 allow to fade the effect (lerp).
            Implementation from research paper "Pannini: A New Projection for Rendering Wide Angle Perspective Images"
             0: off (default)
            >0: enabled (requires an extra post processing pass if upsampling wasn't used - see r.ScreenPercentage)
             1: Panini cylindrical stereographic projection
        r.Upscale.Panini.S:
          hint: |-
            Panini projection's hard vertical compression factor.
             0: no vertical compression factor (default)
             1: Hard vertical compression
        r.Upscale.Panini.ScreenFit:
          hint: |-
            Panini projection screen fit effect factor (lerp).
             0: fit vertically
             1: fit horizontally (default)
        r.Upscale.Quality:
          hint: |-
            Defines the quality in which ScreenPercentage and WindowedFullscreen scales the 3d rendering.
             0: Nearest filtering
             1: Simple Bilinear
             2: Directional blur with unsharp mask upsample.
             3: 5-tap Catmull-Rom bicubic, approximating Lanczos 2. (default)
             4: 13-tap Lanczos 3.
             5: 36-tap Gaussian-filtered unsharp mask (very expensive, but good for extreme upsampling).
        r.Upscale.Softness:
          hint: |-
            Amount of sharpening for Gaussian Unsharp filter (r.UpscaleQuality=5). Reduce if ringing is visible
              1: Normal sharpening (default)
              0: No sharpening (pure Gaussian).
        r.UseClusteredDeferredShading:
          hint: |-
            Toggle use of clustered deferred shading for lights that support it. 0 is off (default), 1 is on (also required is SM5 to actually turn on).
        r.UseFastDebugObjectDiscovery:
          hint: |-
            Enable new optimised debug object discovery
        r.UseFastIntersect:
          hint: |-
            Use optimized 8 plane fast intersection code if we have 8 permuted planes.
        r.UseLegacyMaintainYFOVViewMatrix:
          hint: |-
            Whether to use the old way to compute perspective view matrices when the aspect ratio constraint is vertical
        r.UseParallelGetDynamicMeshElementsTasks:
          hint: |-
            If > 0, and if FApp::ShouldUseThreadingForPerformance(), then parts of GetDynamicMeshElements will be done in parallel.
        r.UseVisibilityOctree:
          hint: |-
            Use the octree for visibility calculations.
        r.Velocity.EnableVertexDeformation:
          hint: |-
            Enables materials with World Position Offset and/or World Displacement to output velocities during velocity pass even when the actor has not moved. 
            0=Off, 1=On, 2=Auto(Default). 
            Auto setting is off if r.VelocityOutputPass=2, or else on. 
            When r.VelocityOutputPass=2 this can incur a performance cost due to additional draw calls.
        r.VelocityOutputPass:
          hint: |-
            When to write velocity buffer.
             0: Renders during the depth pass. This splits the depth pass into 2 phases: with and without velocity.
             1: Renders during the regular base pass. This adds an extra GBuffer target during base pass rendering. 2: Renders after the regular base pass.
        r.VelocityTest:
          hint: |-
            Allows to enable some low level testing code for the velocity rendering (Affects object motion blur and TemporalAA). 0: off (default) 1: add random data to the buffer where we store skeletal mesh bone data to test if the code (good to test in PAUSED as well).
        r.VertexDeformationOutputsVelocity:
          hint: |-
            Deprecated CVar. Use r.Velocity.EnableVertexDeformation instead.
        r.VertexFoggingForOpaque:
          hint: |-
            Causes opaque materials to use per-vertex fogging, which costs less and integrates properly with MSAA.  Only supported with forward shading.
        r.ViewDistanceScale:
          hint: |-
            Controls the view distance scale. A primitive's MaxDrawDistance is scaled by this value.
            Higher values will increase view distance but at a performance cost.
            Default = 1.
        r.ViewDistanceScale.ApplySecondaryScale:
          hint: |-
            If true applies the secondary view distance scale to primitive draw distances.
            Default = 0.
        r.ViewDistanceScale.FieldOfViewAffectsHLOD:
          hint: |-
            If enabled, applies the field of view scaling to HLOD draw distances as well as non-HLODs.
        r.ViewDistanceScale.FieldOfViewMaxAngle:
          hint: |-
            Scales the scene view distance scale with camera field of view.
            Maximum angle of the blend range.
            Applies the maximum scale when the camera is at or above this angle.
        r.ViewDistanceScale.FieldOfViewMaxAngleScale:
          hint: |-
            Scales the scene view distance scale with camera field of view.
            This value is applied when the camera is at or above the maximum angle.
        r.ViewDistanceScale.FieldOfViewMinAngle:
          hint: |-
            Scales the scene view distance scale with camera field of view.
            Minimum angle of the blend range.
            Applies the minimum scale when the camera is at or below this angle.
        r.ViewDistanceScale.FieldOfViewMinAngleScale:
          hint: |-
            Scales the scene view distance scale with camera field of view.
            This value is applied when the camera is at or below the minimum angle.
        r.ViewDistanceScale.SecondaryScale:
          hint: |-
            Controls the secondary view distance scale, Default = 1.0.
            This is an optional scale intended to allow some features or gamemodes to opt-in.
        r.ViewRectUseScreenBottom:
          hint: |-
            WARNING: This is an experimental, unsupported feature and does not work with all postprocesses (e.g DOF and DFAO)
            If enabled, the view rectangle will use the bottom left corner instead of top left
        r.ViewTextureMipBias.Min:
          hint: |-
            Automatic view mip bias's minimum value (default to -2).
        r.ViewTextureMipBias.Offset:
          hint: |-
            Automatic view mip bias's constant offset (default to -0.3).
        r.VirtualTexture:
          hint: |-
            If set to 1, textures will use virtual memory so they can be partially resident.
        r.VirtualTexturedLightmaps:
          hint: |-
            Controls wether to stream the lightmaps using virtual texturing.
             0: Disabled.
             1: Enabled.
        r.VirtualTextureReducedMemory:
          hint: |-
            If set to 1, the cost of virtual textures will be reduced by using a more packed layout.
        r.VirtualTextures:
          hint: |-
            Is virtual texture streaming enabled?
        r.VisualizeLightingOnProbes:
          hint: |-
            Enables debug probes rendering to visualise diffuse/specular lighting (direct and indirect) on simple sphere scattered in the world. 0: disabled.
             1: camera probes only.
             2: world probes only.
             3: camera and world probes.
        r.VisualizeOccludedPrimitives:
          hint: |-
            Draw boxes for all occluded primitives
        r.VisualizeTexture.AllowBlinking:
          hint: |-
            Whether to allow blinking when visualizing NaN or inf that can become irritating over time.
        r.VolumetricCloud:
          hint: |-
            VolumetricCloud components are rendered when this is not 0, otherwise ignored.
        r.VolumetricCloud.Debug.SampleCountMode:
          hint: |-
            Only for developers. [0] Disabled [1] Primary material sample count [2] Advanced:raymarched shadow sample count [3] Shadow material sample count [4] Advanced:ground shadow sample count [5] Advanced:ground shadow material sample count
        r.VolumetricCloud.DisableCompute:
          hint: |-
            Do not use compute shader for cloud tracing.
        r.VolumetricCloud.DistanceToSampleMaxCount:
          hint: |-
            Distance in kilometers over which the total number of ray samples will be evenly distributed. Before that, the number of ray samples will span 1 to SampleCountMax, for for tracing distance ranging from 0 to DistanceToSampleCountMax (kilometers).
        r.VolumetricCloud.EnableAerialPerspectiveSampling:
          hint: |-
            Enable/disable the aerial perspective contribution on clouds.
        r.VolumetricCloud.EnableAtmosphericLightsSampling:
          hint: |-
            Enable/disable atmospheric lights contribution on clouds.
        r.VolumetricCloud.EnableDistantSkyLightSampling:
          hint: |-
            Enable/disable the distant sky light contribution on clouds.
        r.VolumetricCloud.EnableLocalLightsSampling:
          hint: |-
            [EXPERIMENTAL] Enable/disable local lights contribution on clouds. Expenssive! Use for cinematics if needed.
        r.VolumetricCloud.HighQualityAerialPerspective:
          hint: |-
            Enable/disable a second pass to trace the aerial perspective per pixel on clouds instead of using the aerial persepctive texture. Only usable when r.VolumetricCloud.EnableAerialPerspectiveSampling=1 and only needed for extra quality when r.VolumetricRenderTarget=1.
        r.VolumetricCloud.HzbCulling:
          hint: |-
            Enable/disable the use of the HZB in order to not trace behind opaque surfaces. Should be disabled when r.VolumetricRenderTarget.Mode is 2.
        r.VolumetricCloud.LocalLights.ShadowSampleCount:
          hint: |-
            [EXPERIMENTAL] Set the volumetric shadow sample count when evaluating local lights. Expenssive! Use for cinematics if needed.
        r.VolumetricCloud.ReflectionRaySampleMaxCount:
          hint: |-
            The maximum number of samples taken while ray marching primary rays in reflections.
        r.VolumetricCloud.SampleMinCount:
          hint: |-
            The minimum number of samples to take along a ray. This can help with quality for volume close to the camera, e.g. if cloud layer is also used as low altitude fog. SampleMinCount should remain relatively small because it is applied to all tracing process.
        r.VolumetricCloud.Shadow.ReflectionRaySampleMaxCount:
          hint: |-
            The maximum number of samples taken while ray marching shadow rays in reflections.
        r.VolumetricCloud.Shadow.SampleAtmosphericLightShadowmap:
          hint: |-
            Enable the sampling of atmospheric lights shadow map in order to produce volumetric shadows.
        r.VolumetricCloud.Shadow.ViewRaySampleMaxCount:
          hint: |-
            The maximum number of samples taken while ray marching shadow rays.
        r.VolumetricCloud.ShadowMap:
          hint: |-
            Enable/disable the shadow map, only if the scene contains a DirectionalLight component with Cast Cloud Shadows enabled on it.
        r.VolumetricCloud.ShadowMap.Debug:
          hint: |-
            Print information to debug the cloud shadow map.
        r.VolumetricCloud.ShadowMap.MaxResolution:
          hint: |-
            The maximum resolution of the cloud shadow map. The active resolution is controlled by the CloudShadowMapResolutionScale property on the Directional Light component.
        r.VolumetricCloud.ShadowMap.RaySampleHorizonMultiplier:
          hint: |-
            The multipler on the sample count applied when the atmospheric light reach the horizon. Less pixels in the shadow map need to be traced, but rays need to travel a lot longer.
        r.VolumetricCloud.ShadowMap.RaySampleMaxCount:
          hint: |-
            The maximum number of samples taken while ray marching shadow rays to evaluate the cloud shadow map.
        r.VolumetricCloud.ShadowMap.SnapLength:
          hint: |-
            Snapping size in kilometers of the cloud shadowmap position to avoid flickering.
        r.VolumetricCloud.ShadowMap.SpatialFiltering:
          hint: |-
            Enable/disable the shadow map dilation/smoothing spatial filter. Enabled when greater than 0 and it represents the number of blur iterations (constrained to a maximum of 4).
        r.VolumetricCloud.ShadowMap.TemporalFiltering.LightRotationCutHistory:
          hint: |-
            When the atmospheric light rotation in degree is larger than that, the temporal accumulation is restarted.
        r.VolumetricCloud.ShadowMap.TemporalFiltering.NewFrameWeight:
          hint: |-
            Experimental and needs more work so disabled by default. Value between [0.0, 1.0] representing the weight of current frame's contribution. Low values can cause precision issues resulting in depth not converging over time. Disabled when set to 1.
        r.VolumetricCloud.SkyAO:
          hint: |-
            Enable/disable cloud sky ambient occlusion, the scene must contain a Skylight component with Cloud Ambient Occlusion enabled on it.
        r.VolumetricCloud.SkyAO.Debug:
          hint: |-
            Print information to debug the cloud sky AO map.
        r.VolumetricCloud.SkyAO.Filtering:
          hint: |-
            Enable/disable the sky AO dilation/smoothing filter.
        r.VolumetricCloud.SkyAO.MaxResolution:
          hint: |-
            The maximum resolution of the texture storing ambient occlusion information for the environment lighting coming from sky light. The active resolution is controlled by the CloudAmbientOcclusionMapResolutionScale property on the Skylight component.
        r.VolumetricCloud.SkyAO.SnapLength:
          hint: |-
            Snapping size in kilometers of the cloud sky AO texture position to avoid flickering.
        r.VolumetricCloud.SkyAO.TraceSampleCount:
          hint: |-
            The number of samples taken to evaluate ground lighting occlusion.
        r.VolumetricCloud.StepSizeOnZeroConservativeDensity:
          hint: |-
            Raymarch step size when a sample giving zero conservative density is encountered. If > 1, performance will likely improve but banding artifacts can show up if too large.
        r.VolumetricCloud.ViewRaySampleMaxCount:
          hint: |-
            The maximum number of samples taken while ray marching view primary rays.
        r.VolumetricFog:
          hint: |-
            Whether to allow the volumetric fog feature.
        r.VolumetricFog.ConservativeDepth:
          hint: |-
            [Experimental] Whether to allow the volumetric to use conservative depth to accelerate computations.
        r.VolumetricFog.DepthDistributionScale:
          hint: |-
            Scales the slice depth distribution.
        r.VolumetricFog.Emissive:
          hint: |-
            Whether to allow the volumetric fog emissive component.
        r.VolumetricFog.GridPixelSize:
          hint: |-
            XY Size of a cell in the voxel grid, in pixels.
        r.VolumetricFog.GridSizeZ:
          hint: |-
            How many Volumetric Fog cells to use in z.
        r.VolumetricFog.HistoryMissSupersampleCount:
          hint: |-
            Number of lighting samples to compute for voxels whose history value is not available.
            This reduces noise when panning or on camera cuts, but introduces a variable cost to volumetric fog computation.  Valid range [1, 16].
        r.VolumetricFog.HistoryWeight:
          hint: |-
            How much the history value should be weighted each frame.  This is a tradeoff between visible jittering and responsiveness.
        r.VolumetricFog.InjectShadowedLightsSeparately:
          hint: |-
            Whether to allow the volumetric fog feature.
        r.VolumetricFog.InverseSquaredLightDistanceBiasScale:
          hint: |-
            Scales the amount added to the inverse squared falloff denominator.  This effectively removes the spike from inverse squared falloff that causes extreme aliasing.
        r.VolumetricFog.Jitter:
          hint: |-
            Whether to apply jitter to each frame's volumetric fog computation, achieving temporal super sampling.
        r.VolumetricFog.LightFunction:
          hint: |-
            Whether light functions are generated to be sampled when rendering volumetric fog.
        r.VolumetricFog.LightFunction.DirectionalLightSupersampleScale:
          hint: |-
            Scales the slice depth distribution.
        r.VolumetricFog.LightFunction.LightFunctionCount:
          hint: |-
            The maximum light function that can be rendered per frame.
        r.VolumetricFog.LightFunction.Resolution:
          hint: |-
            The resolution of all light functions generated to be sampled when rendering volumetric fog.
        r.VolumetricFog.LightScatteringSampleJitterMultiplier:
          hint: |-
            Multiplier for random offset value used to jitter each world sample position when generating the 3D fog volume. Enable/disable with r.VolumetricFog.Jitter
        r.VolumetricFog.TemporalReprojection:
          hint: |-
            Whether to use temporal reprojection on volumetric fog.
        r.VolumetricFog.UpsampleJitterMultiplier:
          hint: |-
            Multiplier for random offset value used to jitter the sample position of the 3D fog volume to hide fog pixelization due to sampling from a lower resolution texture.
        r.VolumetricFog.VoxelizationShowOnlyPassIndex:
          hint: |-
            When >= 0, indicates a single voxelization pass to render for debugging.
        r.VolumetricFog.VoxelizationSlicesPerGSPass:
          hint: |-
            How many depth slices to render in a single voxelization pass (max geometry shader expansion).  Must recompile voxelization shaders to propagate changes.
        r.VolumetricLightmap.VisualizationMinScreenFraction:
          hint: |-
            Minimum screen size of a volumetric lightmap visualization sphere
        r.VolumetricLightmap.VisualizationRadiusScale:
          hint: |-
            Scales the size of the spheres used to visualize volumetric lightmap samples.
        r.VolumetricRenderTarget:
          hint: |-
        r.VolumetricRenderTarget.Mode:
          hint: |-
            [0] trace quarter resolution + reconstruct at half resolution + upsample [1] trace half res + reconstruct full res + upsample [2] trace at quarter resolution + reconstruct full resolution (cannot intersect with opaque meshes and forces UpsamplingMode=2 [3] trace 1/8 resolution + reconstruct at half resolution + upsample)
        r.VolumetricRenderTarget.PreferAsyncCompute:
          hint: |-
            Whether to prefer using async compute to generate volumetric cloud render targets.
        r.VolumetricRenderTarget.ReprojectionBoxConstraint:
          hint: |-
            Whether reprojected data should be constrained to the new incoming cloud data neighborhod value.
        r.VolumetricRenderTarget.UpsamplingMode:
          hint: |-
            Used in compositing volumetric RT over the scene. [0] bilinear [1] bilinear + jitter [2] nearest + depth test [3] bilinear + jitter + keep closest [4] bilaterial upsampling
        r.VolumetricRenderTarget.UvNoiseSampleAcceptanceWeight:
          hint: |-
            Used when r.VolumetricRenderTarget.UpsamplingMode is in a mode using jitter - this value control the acceptance of noisy cloud samples according to their similarities. A higher value means large differences will be less accepted for blending.
        r.VolumetricRenderTarget.UvNoiseScale:
          hint: |-
            Used when r.VolumetricRenderTarget.UpsamplingMode is in a mode using jitter - this value scales the amount of jitter.
        r.VRS.Enable:
          hint: |-
            Toggle to enable Variable Rate Shading.
        r.VRS.EnableImage:
          hint: |-
            Toggle to enable image-based Variable Rate Shading.
        r.VSync:
          hint: |-
            0: VSync is disabled.(default)
            1: VSync is enabled.
        r.VSyncEditor:
          hint: |-
            0: VSync is disabled in editor.(default)
            1: VSync is enabled in editor.
        r.VT.AnisotropicFiltering:
          hint: |-
            Is anisotropic filtering for VTs enabled?
        r.VT.AVT.AgeToFree:
          hint: |-
            Number of frames for an allocation to be unused before it is considered for free
        r.VT.AVT.LevelIncrement:
          hint: |-
            Number of levels to increment each time we grow an allocated virtual texture
        r.VT.AVT.MaxAllocPerFrame:
          hint: |-
            Max number of allocated VT for adaptive VT to alloc per frame
        r.VT.AVT.MaxFreePerFrame:
          hint: |-
            Max number of allocated VT for adaptive VT to free per frame
        r.VT.AVT.MaxPageResidency:
          hint: |-
            Percentage of page table to allocate before we start freeing to make space
        r.VT.Borders:
          hint: |-
            If > 0, debug borders will enabled
        r.VT.CodecAgeThreshold:
          hint: |-
            Mininum number of frames VT codec must be unused before possibly being retired
        r.VT.CodecNumThreshold:
          hint: |-
            Once number of VT codecs exceeds this number, attempt to retire codecs that haven't been recently used
        r.VT.CsvStats:
          hint: |-
            Send virtual texturing stats to CSV profiler
            0=off, 1=on, 2=verbose
        r.VT.EnableAutoImport:
          hint: |-
            Enable virtual texture on texture import
        r.VT.EnableFeedback:
          hint: |-
            Enable processing of the GPU generated feedback buffer.
        r.VT.EnableLossyCompressLightmaps:
          hint: |-
            Enables lossy compression on virtual texture lightmaps. Lossy compression tends to have lower quality on lightmap textures, vs regular color textures.
        r.VT.EnablePlayback:
          hint: |-
            Enable playback of recorded feedback requests.
        r.vt.FeedbackFactor:
          hint: |-
            The size of the VT feedback buffer is calculated by dividing the render resolution by this factor.The value set here is rounded up to the nearest power of two before use.
        r.VT.ForceContinuousUpdate:
          hint: |-
            Force continuous update on all virtual textures.
        r.VT.IOPriority_HighPagePri:
          hint: |-
            Priority of high priority VT I/O requests
        r.VT.IOPriority_NormalPagePri:
          hint: |-
            Priority of default priority VT I/O requests
        r.VT.MaskedPageTableUpdates:
          hint: |-
            Masks the page table update quads to reduce pixel fill costs
        r.VT.MaxAnisotropy:
          hint: |-
            MaxAnisotropy setting for Virtual Texture sampling.
        r.VT.MaxContinuousUpdatesPerFrame:
          hint: |-
            Max number of page uploads for pages that are already mapped.
        r.VT.MaxContinuousUpdatesPerFrameInEditor:
          hint: |-
            Max number of page uploads for pages that are already mapped when in editor.
        r.VT.MaxReleasedPerFrame:
          hint: |-
            Max number of allocated virtual textures to release per frame
        r.VT.MaxTilesProducedPerFrame:
          hint: |-
            Max number of pages that can be produced per frame
        r.VT.MaxUploadMemory:
          hint: |-
            Maximum amount of upload memory to allocate in MB before throttling virtual texture streaming requests.
            We never throttle high priority requests so allocation can peak above this value.
        r.VT.MaxUploadRequests:
          hint: |-
            Maximum number of virtual texture tile upload requests that can be in flight.
        r.VT.MaxUploadsPerFrame:
          hint: |-
            Max number of page uploads per frame in game
        r.VT.MaxUploadsPerFrameInEditor:
          hint: |-
            Max number of page uploads per frame when in editor
        r.VT.NumFeedbackTasks:
          hint: |-
            Number of tasks to create to read virtual texture feedback.
        r.VT.NumGatherTasks:
          hint: |-
            Number of tasks to create to combine virtual texture feedback.
        r.VT.PageFreeThreshold:
          hint: |-
            Number of frames since the last time a VT page was used, before it's considered free.
            VT pages are not necesarily marked as used on the CPU every time they're accessed by the GPU.
            Increasing this threshold reduces the chances that an in-use frame is considered free.
        r.VT.PageUpdateFlushCount:
          hint: |-
            Number of page updates to buffer before attempting to flush by taking a lock.
        r.VT.ParallelFeedbackTasks:
          hint: |-
            Use worker threads for virtual texture feedback tasks.
        r.VT.ParallelTileCompression:
          hint: |-
            Enables parallel compression of macro tiles
        r.VT.PlaybackMipBias:
          hint: |-
            Mip bias to apply during playback of recorded feedback requests.
        r.VT.PoolSizeScale:
          hint: |-
            Scale factor for virtual texture physical pool size.
             Group 0
        r.VT.PoolSizeScale.Group0:
          hint: |-
            Scale factor for virtual texture physical pool size.
             Group 0
        r.VT.PoolSizeScale.Group1:
          hint: |-
            Scale factor for virtual texture physical pool sizes.
             Group 1
        r.VT.PoolSizeScale.Group2:
          hint: |-
            Scale factor for virtual texture physical pool sizes.
             Group 2
        r.VT.ProduceLockedTilesOnFlush:
          hint: |-
            Should locked tiles be (re)produced when flushing the cache
        r.VT.RefreshEntirePageTable:
          hint: |-
            Refreshes the entire page table texture every frame
        r.VT.RenderCaptureNextPagesDraws:
          hint: |-
            Trigger a render capture during the next RVT RenderPages draw calls.
        r.VT.Residency.AdjustmentRate:
          hint: |-
            Rate at which we adjust mip bias due to Virtual Texture pool residency.
            Default 0.2
        r.VT.Residency.LockedUpperBound:
          hint: |-
            Virtual Texture pool locked page residency above which we kill any mip bias.
            That's because locked pages are never affected by the mip bias setting. So it is unlikely that we can get the pool within budget.
            Default 0.65
        r.VT.Residency.LowerBound:
          hint: |-
            Virtual Texture pool residency below which we decrease mip bias.
            Default 0.95
        r.VT.Residency.MaxMipMapBias:
          hint: |-
            Maximum mip bias to apply to prevent Virtual Texture pool residency over-subscription.
            Default 4
        r.VT.Residency.Notify:
          hint: |-
            Show on screen notifications for virtual texture physical pool residency
        r.VT.Residency.Show:
          hint: |-
            Show on screen HUD for virtual texture physical pool residency
        r.VT.Residency.UpperBound:
          hint: |-
            Virtual Texture pool residency above which we increase mip bias.
            Default 0.95
        r.VT.RVT.TileCountBias:
          hint: |-
            Bias to apply to Runtime Virtual Texture size.
             Group 0
        r.VT.RVT.TileCountBias.Group0:
          hint: |-
            Bias to apply to Runtime Virtual Texture size.
             Group 0
        r.VT.RVT.TileCountBias.Group1:
          hint: |-
            Bias to apply to Runtime Virtual Texture size.
             Group 1
        r.VT.RVT.TileCountBias.Group2:
          hint: |-
            Bias to apply to Runtime Virtual Texture size.
             Group 2
        r.VT.SplitPhysicalPoolSize:
          hint: |-
            Create multiple physical pools per format to keep pools at this maximum size in tiles.A value of 64 tiles will force 16bit page tables. This can be a page table memory optimization for large physical pools.Defaults to 0 (off).
        r.VT.SyncProduceLockedTiles:
          hint: |-
            Should we sync loading when producing locked tiles
        r.VT.TileBorderSize:
          hint: |-
            Size in pixels to use for virtual texture tiles borders (rounded to next power-of-2)
        r.VT.TileSize:
          hint: |-
            Size in pixels to use for virtual texture tiles (rounded to next power-of-2)
        r.VT.TranscodeRetireAge:
          hint: |-
            If a VT transcode request is not picked up after this number of frames, drop it and put request in cache as free. default 60
        r.VT.UploadMemoryPageSize:
          hint: |-
            Size in MB for a single page of virtual texture upload memory.
        r.VT.ValidateCompressionOnLoad:
          hint: |-
            Validates that VT data contains no compression errors when loading from DDCThis is slow, but allows debugging corrupt VT data (and allows recovering from bad DDC)
        r.VT.ValidateCompressionOnSave:
          hint: |-
            Validates that VT data contains no compression errors before saving to DDCThis is slow, but allows debugging corrupt VT data
        r.VT.Verbose:
          hint: |-
            Be pedantic about certain things that shouln't occur unless something is wrong. This may cause a lot of logspam 100's of lines per frame.
        r.Vulkan.Allow64bitShaderAtomics:
          hint: |-
            Whether to enable 64bit buffer/image atomics required by Nanite/Lumen
            0 to disable 64bit atomics
            1 to enable (default)
        r.Vulkan.AllowAsyncCompute:
          hint: |-
            0 to disable async compute queue(if available)1 to allow async compute queue
        r.Vulkan.AllowPresentOnComputeQueue:
          hint: |-
            0 to present on the graphics queue1 to allow presenting on the compute queue if available
        r.Vulkan.AllowUniformUpload:
          hint: |-
            Allow Uniform Buffer uploads outside of renderpasses
             0: Disabled, buffers are always reallocated
             1: Enabled, buffers are uploaded outside renderpasses
        r.Vulkan.AlwaysWriteDS:
          hint: |-
        r.Vulkan.BudgetScale:
          hint: |-
            Percentage Scaling of MemoryBudget. Valid range is [0-100]. Only has an effect if VK_EXT_memory_budget is available
        r.Vulkan.CompressSPIRV:
          hint: |-
            0 SPIRV source is stored in RAM as-is. (default)
            1 SPIRV source is compressed on load and decompressed as when needed, this saves RAM but can introduce hitching when creating shaders.
        r.Vulkan.CPURenderthreadFramePacer:
          hint: |-
            Whether to enable the simple Render thread CPU Framepacer for Vulkan
        r.Vulkan.CPURHIThreadFramePacer:
          hint: |-
            Whether to enable the simple RHI thread CPU Framepacer for Vulkan
        r.Vulkan.CpuWaitForFence:
          hint: |-
            Whether to have the Cpu wait for the fence in AcquireImageIndex
        r.Vulkan.DebugBarrier:
          hint: |-
            Forces a full barrier for debugging. This is a mask/bitfield (so add up the values)!
             0: Don't (default)
             1: Enable heavy barriers after EndRenderPass()
             2: Enable heavy barriers after every dispatch
             4: Enable heavy barriers after upload cmd buffers
             8: Enable heavy barriers after active cmd buffers
             16: Enable heavy buffer barrier after uploads
             32: Enable heavy buffer barrier between acquiring back buffer and blitting into swapchain
        r.Vulkan.DebugVsync:
          hint: |-
            Whether to print vulkan vsync data
        r.Vulkan.DefragAgeDelay:
          hint: |-
            Delay in Frames that needs to pass before attempting to defrag a page again
        r.Vulkan.DefragAutoPause:
          hint: |-
            Automatically Pause defragging after a single page has been defragged. Only for debugging the defragmentation code.
        r.Vulkan.DefragOnceDebug:
          hint: |-
            Set to 1 to test defrag
        r.Vulkan.DefragPaused:
          hint: |-
            Pause Any defragging. Only for debugging defragmentation code
        r.Vulkan.DefragRepeatDebug:
          hint: |-
            Set to 1 to test defrag, repeatedly
        r.Vulkan.DefragSizeFactor:
          hint: |-
            Amount of space required to be free, on other pages, before attempting to do a defrag of a page
        r.Vulkan.DefragSizeFraction:
          hint: |-
            Fill threshold, dont attempt defrag if free space is less than this fraction
        r.Vulkan.DelayAcquireBackBuffer:
          hint: |-
            Whether to delay acquiring the back buffer 
             0: acquire next image on frame start 
             1: acquire next image just before presenting, rendering is done to intermediate image which is then copied to a real backbuffer (default) 
             2: acquire next image on first use
        r.Vulkan.Depth24Bit:
          hint: |-
            0: Use 32-bit float depth buffer (default)
            1: Use 24-bit fixed point depth buffer
        r.Vulkan.DepthStencilForceStorageBit:
          hint: |-
            Whether to force Image Usage Storage on Depth (can disable framebuffer compression).
             0: Not enabled
             1: Enables override for IMAGE_USAGE_STORAGE
        r.Vulkan.DescriptorSetLayoutMode:
          hint: |-
            0 to not change layouts (eg Set 0 = Vertex, 1 = Pixel, etc
            1 to use a new set for common Uniform Buffers
            2 to collapse all sets into Set 0
        r.Vulkan.DSetCacheMaxPoolLookups:
          hint: |-
            Maximum count of pool's caches to lookup before allocating new descriptor.
        r.Vulkan.DSetCacheTargetSetsPerPool:
          hint: |-
            Target number of descriptor set allocations per single pool.
        r.Vulkan.DynamicGlobalUBs:
          hint: |-
            2 to treat ALL uniform buffers as dynamic [default]
            1 to treat global/packed uniform buffers as dynamic
            0 to treat them as regular
        r.Vulkan.EnableDedicatedImageMemory:
          hint: |-
            Enable to use Dedidcated Image memory on devices that prefer it.
        r.Vulkan.EnableDefrag:
          hint: |-
            Whether to enable defrag moves & evictions
            0: Off
            1: On
        r.Vulkan.EnablePipelineLRUCache:
          hint: |-
            Pipeline LRU cache.
            0: disable LRU
            1: Enable LRU
        r.Vulkan.EnableTransientResourceAllocator:
          hint: |-
            Whether to enable the TransientResourceAllocator to reduce memory usage
            0 to disabled (default)
            1 to enable
        r.Vulkan.EnableValidation:
          hint: |-
            0 to disable validation layers (default)
            1 to enable errors
            2 to enable errors & warnings
            3 to enable errors, warnings & performance warnings
            4 to enable errors, warnings, performance & information messages
            5 to enable all messages
        r.Vulkan.EvictionLimitPercentage:
          hint: |-
            When more than x% of local memory is used, evict resources to host memory
        r.Vulkan.EvictionLimitPercentageRenableLimit:
          hint: |-
            After eviction has occurred, only start using local mem for textures after memory usage is less than this(Relative to Eviction percentage)
        r.Vulkan.EvictOnePageDebug:
          hint: |-
            Set to 1 to test evict one page to host
        r.Vulkan.FakeMemoryLimit:
          hint: |-
            set to artificially limit to # MB. 0 is disabled
        r.Vulkan.FlushOnMapStaging:
          hint: |-
            Flush GPU on MapStagingSurface calls without any fence.
             0: Do not Flush (default)
             1: Flush
        r.Vulkan.ForceCoherentOperations:
          hint: |-
            1 forces memory invalidation and flushing of coherent memory
        r.Vulkan.ForcePacingWithoutVSync:
          hint: |-
            Whether to CPU pacers remain enabled even if VSync is off
        r.Vulkan.ForcePSOSingleThreaded:
          hint: |-
            Enable to force singlethreaded creation of PSOs. Only intended as a workaround for buggy drivers
        r.Vulkan.FreeAllPages:
          hint: |-
            Enable to fully free all pages early. default on android only
        r.Vulkan.FreePageForType:
          hint: |-
            Enable separate free page list for images and buffers.
        r.Vulkan.GPUValidation:
          hint: |-
            2 to use enable GPU assisted validation AND extra binding slot when using validation layers
            1 to use enable GPU assisted validation when using validation layers, or
            0 to not use (default)
        r.Vulkan.IgnoreCPUReads:
          hint: |-
            Debugging utility for GPU->CPU reads.
             0 will read from the GPU (default).
             1 will NOT read from the GPU and fill with zeros.
        r.Vulkan.InputAttachmentShaderRead:
          hint: |-
            Whether to use VK_ACCESS_SHADER_READ_BIT an input attachments to workaround rendering issues
            0 use: VK_ACCESS_INPUT_ATTACHMENT_READ_BIT (default)
            1 use: VK_ACCESS_INPUT_ATTACHMENT_READ_BIT | VK_ACCESS_SHADER_READ_BIT
        r.Vulkan.KeepSwapChain:
          hint: |-
            Whether to keep old swap chain to pass through when creating the next one
        r.vulkan.LogDefrag:
          hint: |-
            Whether to log all defrag moves & evictions
            0: Off
            1: On
        r.Vulkan.LogEvictStatus:
          hint: |-
            Log Eviction status every frame
        r.Vulkan.MemoryBacktrace:
          hint: |-
            0: Disable, store __FILE__ and __LINE__
            N: Enable, n is # of steps to go back
        r.Vulkan.MemoryFallbackToHost:
          hint: |-
            0: Legacy, will crash when oom for rendertargets
            1: Fallback to Host memory on oom
        r.Vulkan.PipelineCacheCompression:
          hint: |-
            Enable/disable compression on the Vulkan pipeline cache disk file
        r.Vulkan.PipelineCacheFromShaderPipelineCache:
          hint: |-
            0 look for a pipeline cache in the normal locations with the normal names.1 tie the vulkan pipeline cache to the shader pipeline cache, use the PSOFC guid as part of the filename, etc.
        r.Vulkan.PipelineCacheLoad:
          hint: |-
            0 to disable loading the pipeline cache1 to enable using pipeline cache
        r.Vulkan.PipelineDebugForceEvictImmediately:
          hint: |-
            1: Force all created PSOs to be evicted immediately. Only for debugging
        r.Vulkan.PipelineLRUCacheEvictBinary:
          hint: |-
            0: create pipelines in from the binary PSO cache and binary shader cache and evict them only as it fills up.
            1: don't create pipelines....just immediately evict them
        r.Vulkan.PipelineLRUCacheEvictBinaryPreloadScreen:
          hint: |-
            1: Use a preload screen while loading preevicted PSOs ala r.Vulkan.PipelineLRUCacheEvictBinary
        r.Vulkan.PipelineLRUCapactiy:
          hint: |-
            Maximum no. of PSOs in LRU.
        r.Vulkan.PipelineLRUSize:
          hint: |-
            Maximum size of shader memory .
        r.Vulkan.ProfileCmdBuffers:
          hint: |-
            Insert GPU timing queries in every cmd buffer
        r.Vulkan.PSOLRUEvictAfterUnusedFrames:
          hint: |-
            0: unused PSOs are not removed from the PSO LRU cache. (default)
            >0: The number of frames an unused PSO can remain in the PSO LRU cache. When this is exceeded the PSO is destroyed and memory returned to the system. This can save memory with the risk of increased hitching.
        r.Vulkan.RayTracing:
          hint: |-
            0: Do not enable Vulkan ray tracing extensions (default)
            1: Enable experimental ray tracing support (for development and testing purposes)
        r.Vulkan.ReleaseShaderModuleWhenEvictingPSO:
          hint: |-
            0: shader modules remain when a PSO is removed from the PSO LRU cache. (default)
            1: shader modules are destroyed when a PSO is removed from the PSO LRU cache. This can save memory at the risk of increased hitching and cpu cost.
        r.Vulkan.RHIThread:
          hint: |-
            0 to only use Render Thread
            1 to use ONE RHI Thread
            2 to use multiple RHI Thread
        r.Vulkan.RobustBufferAccess:
          hint: |-
            0 to disable robust buffer access1 to enable (default)
        r.Vulkan.SingleAllocationPerResource:
          hint: |-
            Enable to do a single allocation per resource
        r.Vulkan.StandardValidation:
          hint: |-
            2 to use VK_LAYER_KHRONOS_validation (default) if available
            1 to use VK_LAYER_LUNARG_standard_validation if available, or 
            0 to use individual validation layers (removed)
        r.Vulkan.SubmitAfterEveryEndRenderPass:
          hint: |-
            Forces a submit after every end render pass.
             0: Don't(default)
             1: Enable submitting
        r.Vulkan.SubmitOcclusionBatchCmdBuffer:
          hint: |-
            1 to submit the cmd buffer after end occlusion query batch (default)
        r.Vulkan.SubmitOnCopyToResolve:
          hint: |-
            Submits the Queue to the GPU on every RHICopyToResolveTarget call.
             0: Do not submit (default)
             1: Submit
        r.Vulkan.SubmitOnDispatch:
          hint: |-
            0 to not do anything special on dispatch(default)
            1 to submit the cmd buffer after each dispatch
        r.Vulkan.SubmitOnTextureUnlock:
          hint: |-
            Whether to submit upload cmd buffer on each texture unlock.
             0: Do not submit
             1: Submit (default)
        r.Vulkan.SwapChainIgnoreExtraImages:
          hint: |-
            Whether to ignore extra images created in swapchain and stick with a requested number of images
        r.Vulkan.UniqueValidationMessages:
          hint: |-
            Filter out validation errors with the same code (only when r.Vulkan.EnableValidation is non zero)
        r.Vulkan.UploadCmdBufferSemaphore:
          hint: |-
            Whether command buffers for uploads and graphics can be executed simultaneously.
             0: The buffers are submitted without any synch(default)
             1: Graphics buffers will not overlap with the upload buffers
        r.Vulkan.UseBufferBinning:
          hint: |-
            Enable binning sub-allocations within buffers to help reduce fragmentation at the expense of higher high watermark [read-only]
        r.Vulkan.UseCmdBufferTimingForGPUTime:
          hint: |-
            Use the profile command buffers for GPU time
        r.Vulkan.UseSingleQueue:
          hint: |-
            Forces using the same queue for uploads and graphics.
             0: Uses multiple queues(default)
             1: Always uses the gfx queue for submissions
        r.Vulkan.WaitForIdleOnSubmit:
          hint: |-
            Waits for the GPU to be idle after submitting a command buffer. Useful for tracking GPU hangs.
             0: Do not wait(default)
             1: Wait on every submit
             2: Wait when submitting an upload buffer
             3: Wait when submitting an active buffer (one that has gfx commands)
        r.WarningOnRedundantTransformUpdate:
          hint: |-
            Produce a warning when UpdatePrimitiveTransform is called redundantly.
        r.WarnOfBadDrivers:
          hint: |-
            On engine startup we can check the current GPU driver and warn the user about issues and suggest a specific version
            The test is fast so this should not cost any performance.
             0: off
             1: a message on startup might appear (default)
             2: Simulating the system has a NVIDIA driver on the deny list (UI should appear)
             3: Simulating the system has a AMD driver on the deny list (UI should appear)
             4: Simulating the system has an allowed AMD driver (no UI should appear)
             5: Simulating the system has a Intel driver (no UI should appear)
        r.Water.DebugBuoyancy:
          hint: |-
            Enable debug drawing for water interactions.
        r.Water.Enabled:
          hint: |-
            If all water rendering is enabled or disabled
        r.Water.EnableShallowWaterSimulation:
          hint: |-
            Controls whether the shallow water fluid sim is enabled
        r.Water.EnableUnderwaterPostProcess:
          hint: |-
            Controls whether the underwater post process is enabled
        r.Water.FreezeWaves:
          hint: |-
            Freeze time for waves if non-zero
        r.Water.OceanFallbackDepth:
          hint: |-
            Depth to report for the ocean when no terrain is found under the query location. Not used when <= 0.
        r.Water.OverrideWavesTime:
          hint: |-
            Forces the time used for waves if >= 0.0
        r.Water.ShallowWaterMaxDynamicForces:
          hint: |-
            Max number of dynamic forces that will be registered with sim at a time.
        r.Water.ShallowWaterMaxImpulseForces:
          hint: |-
            Max number of impulse forces that will be registered with sim at a time.
        r.Water.ShallowWaterRenderTargetSize:
          hint: |-
            Size for square shallow water fluid sim render target. Effective dimensions are SizexSize
        r.Water.SingleLayer:
          hint: |-
            Enable the single water rendering system.
        r.Water.SingleLayer.LumenReflections:
          hint: |-
            Enable Lumen reflections for the single water rendering system.
        r.Water.SingleLayer.Reflection:
          hint: |-
            Enable reflection rendering on water.
        r.Water.SingleLayer.RefractionDownsampleFactor:
          hint: |-
            Resolution divider for the water refraction buffer.
        r.Water.SingleLayer.RTR:
          hint: |-
            Enable RTR for the single water renderring system.
        r.Water.SingleLayer.SSR:
          hint: |-
            Enable SSR for the single water rendering system.
        r.Water.SingleLayer.SSRTAA:
          hint: |-
            Enable SSR denoising using TAA for the single water renderring system.
        r.Water.SingleLayer.TiledComposite:
          hint: |-
            Enable tiled optimisation of the water reflection rendering.
        r.Water.UseBuoyancyAsyncPath:
          hint: |-
            Whether to use async physics callback for buoyancy.
        r.Water.UseSplineKeyOptimization:
          hint: |-
            Whether to cache spline input key for water bodies.
        r.Water.VisualizeActiveUnderwaterPostProcess:
          hint: |-
            Shows which water body is currently being picked up for underwater post process
        r.Water.WaterMesh.Enabled:
          hint: |-
            If the water mesh is enabled or disabled. This affects both rendering and the water tile generation
        r.Water.WaterMesh.EnableRendering:
          hint: |-
            Turn off all water rendering from within the scene proxy
        r.Water.WaterMesh.ForceRebuildMeshPerFrame:
          hint: |-
            Force rebuilding the entire mesh each frame
        r.Water.WaterMesh.LODCountBias:
          hint: |-
            This value is added to the LOD Count of each Water Mesh Component. Negative values will lower the quality(fewer and larger water tiles at the bottom level of the water quadtree), higher values will increase quality (more and smaller water tiles at the bottom level of the water quadtree)
        r.Water.WaterMesh.LODMorphEnabled:
          hint: |-
            If the smooth LOD morph is enabled. Turning this off may cause slight popping between LOD levels but will skip the calculations in the vertex shader, making it cheaper
        r.Water.WaterMesh.LODScaleBias:
          hint: |-
            This value is added to the LOD Scale of each Mesh Component. Negative values will lower the overall density/resolution or the vertex grid and make the LODs smaller, higher values will increase the density/resolution and make the LODs larger. Smallest value is -0.5. That will make the inner LOD as tight and optimized as possible
        r.Water.WaterMesh.PreAllocStagingInstanceMemory:
          hint: |-
            Pre-allocates staging instance data memory according to historical max. This reduces the overhead when the array needs to grow but may use more memory
        r.Water.WaterMesh.ShowLODLevels:
          hint: |-
            Shows the LOD levels as concentric squares around the observer position at height 0
        r.Water.WaterMesh.ShowTileBounds:
          hint: |-
            Shows the tile bounds colored by r.Water.WaterMesh.TileBoundsColor
        r.Water.WaterMesh.ShowTileGenerationGeometry:
          hint: |-
            This debug option will display the geometry used for intersecting the water grid and generating tiles
        r.Water.WaterMesh.ShowWireframe:
          hint: |-
            Forces wireframe rendering on for water
        r.Water.WaterMesh.ShowWireframeAtBaseHeight:
          hint: |-
            When rendering in wireframe, show the mesh with no displacement
        r.Water.WaterMesh.TessFactorBias:
          hint: |-
            This value is added to the tessellation factor of each Mesh Component. Negative values will lower the overall density/resolution or the vertex grid, higher values will increase the density/resolution 
        r.Water.WaterMesh.TileBoundsColor:
          hint: |-
            Color of the tile bounds visualized by r.Water.WaterMesh.ShowTileBounds. 0 is by LOD, 1 is by water body type
        r.Water.WaterSplineResampleMaxDistance:
          hint: |-
            Maximum distance between the sample segments and the spline when converting the water spline shapes to polygons (as distance discreases, the number of vertices will increase, 		, the physics shapes will be more accurate, the water tiles will match more closely, but the computational cost will also increase).
        r.WideCustomResolve:
          hint: |-
            Use a wide custom resolve filter when MSAA is enabled0: Disabled [hardware box filter]1: Wide (r=1.25, 12 samples)2: Wider (r=1.4, 16 samples)3: Widest (r=1.5, 20 samples)
        r.WireframeCullThreshold:
          hint: |-
            Threshold below which objects in ortho wireframe views will be culled.
        r.XGEController.AvoidUsingLocalMachine:
          hint: |-
            Whether XGE tasks should avoid running on the local machine (to reduce the oversubscription with local async and out-of-process work).
            0: Do not avoid. Distributed tasks will be spawned on all available XGE agents. Can cause oversubscription on the initiator machine. 
            1: Avoid spawning tasks on the local (initiator) machine except when running a commandlet or -buildmachine is passed (default).
            2: Avoid spawning tasks on the local (initiator) machine.
        r.XGEController.Enabled:
          hint: |-
            Enables or disables the use of XGE for various build tasks in the engine.
            0: Local builds only. 
            1: Distribute builds using XGE (default).
        r.XGEController.Timeout:
          hint: |-
            The time, in seconds, to wait after all tasks have been completed before shutting down the controller. (default: 2 seconds).
        r.XGEShaderCompile.MinBatchSize:
          hint: |-
            This CVar is deprecated, please use r.ShaderCompiler.DistributedMinBatchSize
    /Script/Engine.AnimationSettings:
      name: Animation
      options:
        a.AnimNode.AimOffsetLookAt.Debug:
          hint: |-
            Toggle LookAt AimOffset debug
        a.AnimNode.AimOffsetLookAt.Enable:
          hint: |-
            Enable/Disable LookAt AimOffset
        a.AnimNode.ControlRig.Debug:
          hint: |-
            Set to 1 to turn on debug drawing for AnimNode_ControlRigBase
        a.AnimNode.Inertialization.Enable:
          hint: |-
            Enable / Disable Inertialization
        a.AnimNode.Inertialization.IgnoreDeficit:
          hint: |-
            Ignore inertialization time deficit caused by interruptions
        a.AnimNode.Inertialization.IgnoreVelocity:
          hint: |-
            Ignore velocity information during Inertialization (effectively reverting to a quintic diff blend)
        a.AnimNode.LegIK.AveragePull:
          hint: |-
            Leg IK AveragePull
        a.AnimNode.LegIK.Debug:
          hint: |-
            Turn on debug for FAnimNode_LegIK
        a.AnimNode.LegIK.Enable:
          hint: |-
            Toggle LegIK node.
        a.AnimNode.LegIK.EnableTwoBone:
          hint: |-
            Enable Two Bone Code Path.
        a.AnimNode.LegIK.MaxIterations:
          hint: |-
            Leg IK MaxIterations override. 0 = node default, > 0 override.
        a.AnimNode.LegIK.PullDistribution:
          hint: |-
            Leg IK PullDistribution. 0 = foot, 0.5 = balanced, 1.f = hip
        a.AnimNode.LegIK.TargetReachStepPercent:
          hint: |-
            Leg IK TargetReachStepPercent.
        a.AnimNode.StateMachine.EnableRelevancyReset:
          hint: |-
            Reset State Machine when it becomes relevant
        a.BonePose.ISPC:
          hint: |-
            Whether to use ISPC optimizations in bone pose calculations
        a.Budget.AlwaysTickFalloffAggression:
          hint: |-
            Range [0.1, 0.9], Default = 0.8
            Controls the rate at which 'always ticked' components falloff under load.
            Higher values mean that we reduce the number of always ticking components by a larger amount when the allocated time budget is exceeded.
        a.Budget.BudgetFactorBeforeAggressiveReducedWork:
          hint: |-
            Range > 1, Default = 2.0
            Reduced work will be applied more rapidly when budget pressure goes over this amount.
        a.Budget.BudgetFactorBeforeReducedWork:
          hint: |-
            Range > 1, Default = 1.5
            Reduced work will be delayed until budget pressure goes over this amount.
        a.Budget.BudgetFactorBeforeReducedWorkEpsilon:
          hint: |-
            Range > 0.0, Default = 0.25
            Increased work will be delayed until budget pressure goes under a.Budget.BudgetFactorBeforeReducedWork minus this amount.
        a.Budget.BudgetMs:
          hint: |-
            Values > 0.1, Default = 1.0
            The time in milliseconds that we allocate for skeletal mesh work to be performed.
            When overbudget various other CVars come into play, such as a.Budget.AlwaysTickFalloffAggression and a.Budget.InterpolationFalloffAggression.
        a.Budget.BudgetPressureSmoothingSpeed:
          hint: |-
            Range > 0.0, Default = 3.0
            How much to smooth the budget pressure value used to throttle reduced work.
        a.Budget.Debug.Enabled:
          hint: |-
            Values: 0/1
            Controls whether debug rendering (in builds that support it) is enabled for the animation budget allocator.
        a.Budget.Debug.Force:
          hint: |-
            Values: 0/1
            Default: 0
            Turns on forced rate/interp/reduced controls. These override any budget-driven values.
        a.Budget.Debug.Force.Interp:
          hint: |-
            Values: 0/1
            Default: 0
            Forces interpolation on when a.Budget.Debug.Force is enabled.
        a.Budget.Debug.Force.Rate:
          hint: |-
            Values: >= 1
            Default: 4
            Forces all components to update at the specifed rate when a.Budget.Debug.Force is enabled.
        a.Budget.Debug.Force.Reduced:
          hint: |-
            Values: 0/1
            Default: 0
            Forces reduced work on when a.Budget.Debug.Force is enabled.
        a.Budget.Debug.ShowAddresses:
          hint: |-
            Values: 0/1
            Controls whether debug rendering shows addresses of component data for debugging.
        a.Budget.Enabled:
          hint: |-
            Values: 0/1
            Controls whether the skeletal mesh batching system is enabled. Should be set when there are no running skeletal meshes.
        a.Budget.GBudgetPressureBeforeEmergencyReducedWork:
          hint: |-
            Range > 0.0, Default = 2.5
            Controls the budget pressure where emergency reduced work (applied to all components except those that are bAlwaysTick).
        a.Budget.InitialEstimatedWorkUnitTime:
          hint: |-
            Values > 0.0, Default = 0.08
            Controls the time in milliseconds we expect, on average, for a skeletal mesh component to execute.
            The value only applies for the first tick of a component, after which we use the real time the tick takes.
        a.Budget.InterpolationFalloffAggression:
          hint: |-
            Range [0.1, 0.9], Default = 0.4
            Controls the rate at which interpolated components falloff under load.
            Higher values mean that we reduce the number of interpolated components by a larger amount when the allocated time budget is exceeded.
            Components are only interpolated when the time budget is exceeded.
        a.Budget.InterpolationMaxRate:
          hint: |-
            Values > 1, Default = 6
            Controls the rate at which ticks happen when interpolating.
        a.Budget.InterpolationTickMultiplier:
          hint: |-
            Range [0.1, 0.9], Default = 0.75
            Controls the expected value an amortized interpolated tick will take compared to a 'normal' tick.
        a.Budget.MaxInterpolatedComponents:
          hint: |-
            Range >= 0, Default = 16
            Max number of components to inteprolate before we start throttling.
        a.Budget.MaxTickedOffsreen:
          hint: |-
            Values >= 1, Default = 4
            The maximum number of offscreen components we tick (most significant first)
        a.Budget.MaxTickRate:
          hint: |-
            Values >= 1, Default = 10
            The maximum tick rate we allow. If this is set then we can potentially go over budget, but keep quality of individual meshes to a reasonable level.
        a.Budget.MinQuality:
          hint: |-
            Values [0.0, 1.0], Default = 0.0
            The minimum quality metric allowed. Quality is determined simply by NumComponentsTickingThisFrame / NumComponentsThatWeNeedToTick.
            If this is anything other than 0.0 then we can potentially go over our time budget.
        a.Budget.ReducedWorkThrottleMaxInFrames:
          hint: |-
            Range [1, 255], Default = 20
            Prevents reduced work from changing too often due to system and load noise. Max value used when under budget pressure.
        a.Budget.ReducedWorkThrottleMaxPerFrame:
          hint: |-
            Range [1, 255], Default = 4
            Controls the max number of components that are switched to/from reduced work per tick.
        a.Budget.ReducedWorkThrottleMinInFrames:
          hint: |-
            Range [1, 255], Default = 2
            Prevents reduced work from changing too often due to system and load noise. Min value used when over budget pressure (i.e. aggressive reduction).
        a.Budget.StateChangeThrottleInFrames:
          hint: |-
            Range [1, 128], Default = 30
            Prevents throttle values from changing too often due to system and load noise.
        a.Budget.WorkUnitSmoothingSpeed:
          hint: |-
            Values > 0.1, Default = 5.0
            The speed at which the average work unit converges on the measured amount.
        a.CacheLocalSpaceBounds:
          hint: |-
            If 1 (default) local-space bounds are calculated and cached, otherwise worldspace bounds are built and cached (and inverse transformed to produce local bounds).
        a.Compiler.CachePoseNodeUpdateOrderDebug.Enable:
          hint: |-
            Toggle debugging for CacheNodeUpdateOrder debug during AnimBP compilation
        a.ConstantKeyLerp.ISPC:
          hint: |-
            Whether to use ISPC optimizations in constant key anim encoding
        a.ControlRig.NameCacheMaxSize:
          hint: |-
            Change to control how many names are cached per rig instance.
        a.DebugDrawBoneAxes:
          hint: |-
            When drawing bones (using Show Bones), draw bone axes.
        a.DebugDrawSimpleBones:
          hint: |-
            When drawing bones (using Show Bones), draw bones as simple lines.
        a.EnableAnimStreamable:
          hint: |-
            1 = Enables ability to make Anim Streamable assets. 0 = off
        a.ForceParallelAnimUpdate:
          hint: |-
            If != 0, then we update animations on worker threads regardless of the setting on the project or anim blueprint.
        a.KeepNotifyAndCurvesOnAnimationRecord:
          hint: |-
            If nonzero we keep anim notifies, curves and sync markers when animation recording, if 0 we discard them before recording.
        a.MotionTrajectory.Debug:
          hint: |-
            Turn on debug drawing for motion trajectory
        a.MotionTrajectory.Options:
          hint: |-
            Toggle motion trajectory sample information:
             0. Disable Text
             1. Index
            2. Accumulated Time
             3. Accumulated Distance
             4. Position
             5. Velocity
             6. Acceleration
        a.MotionTrajectory.Stride:
          hint: |-
            Configure the sample stride when displaying information
        a.ParallelAnimEvaluation:
          hint: |-
            If 1, animation evaluation will be run across the task graph system. If 0, evaluation will run purely on the game thread
        a.ParallelAnimInterpolation:
          hint: |-
            If 1, animation interpolation will be run across the task graph system. If 0, interpolation will run purely on the game thread
        a.ParallelAnimUpdate:
          hint: |-
            If != 0, then we update animation blend tree, native update, asset players and montages (is possible) on worker threads.
        a.ParallelBlendPhysics:
          hint: |-
            If 1, physics blending will be run across the task graph system. If 0, blending will run purely on the game thread
        a.PerTrackCompression.ISPC:
          hint: |-
            Whether to use ISPC optimizations in per track anim encoding
        a.Runtime.ISPC:
          hint: |-
            Whether to use ISPC optimizations in animation runtime
        a.Sharing.DebugStates:
          hint: |-
            Values: 0/1/2/3
            Controls whether and which animation sharing debug features are enabled.
            0: Turned off.
            1: Turns on active master-components and blend with material coloring, and printing state information for each actor above their capsule.
            2: Turns printing state information about currently active animation states, blend etc. Also enables line drawing from slave-components to currently assigned master components.
        a.Sharing.ScalabilityPlatform:
          hint: |-
            Controls which platform should be used when retrieving per platform scalability settings.
            Empty: Current platform.
            Name of Platform
            Name of Platform Group
        a.SkeletalMesh.ISPC:
          hint: |-
            Whether to use ISPC optimizations in animation skeletal mesh components
        a.SkinWeightProfile.AllowedFromLOD:
          hint: |-
            Override LOD index from which on the Skin Weight Profile can be applied
        a.SkinWeightProfile.DefaultLODOverride:
          hint: |-
            Override LOD index from which on the default Skin Weight Profile should override the Skeletal Mesh's default Skin Weights
        a.SkinWeightProfile.LoadByDefaultMode:
          hint: |-
            Enables/disables run-time optimization to override the original skin weights with a profile designated as the default to replace it. Can be used to optimize memory for specific platforms or devices-1 = disabled0 = static disabled1 = static enabled2 = dynamic disabled3 = dynamic enabled
        a.Streaming.ChunkSizeSeconds:
          hint: |-
            Size of streaming animation chunk in seconds, 0 or negative signifies only have 1 chunk
        a.Streaming.SpoofFailedChunkLoad:
          hint: |-
            Forces failing to load streamed animation chunks.
            0: Not Enabled, 1: Enabled
        a.StripFramesOnCompression:
          hint: |-
            1 = Strip every other frame on animations that have an even number of frames. 0 = off
        a.StripOddFramesWhenFrameStripping:
          hint: |-
            1 = When frame stripping apply to animations with an odd number of frames too. 0 = only even framed animations
        a.URO.DisableInterpolation:
          hint: |-
            Set to 1 to disable interpolation
        a.URO.Draw:
          hint: |-
            True to draw color coded boxes for anim rate.
        a.URO.Enable:
          hint: |-
            True to anim rate optimization.
        a.URO.ForceAnimRate:
          hint: |-
            Non-zero to force anim rate. 10 = eval anim every ten frames for those meshes that can do it. In some cases a frame is considered to be 30fps.
        a.URO.ForceInterpolation:
          hint: |-
            Set to 1 to force interpolation
        a.VariableKeyLerp.ISPC:
          hint: |-
            Whether to use ISPC optimizations in variable key anim encoding
        a.VisualizeLODs:
          hint: |-
            Visualize SkelMesh LODs
    /Script/Engine.StreamingSettings:
      name: Streaming
      options:
        s.AllowLevelRequestsWhileAsyncLoadingInMatch:
          hint: |-
            Enables level streaming requests while async loading (of anything) while the match is already in progress and no loading screen is up.
        s.AllowUnversionedContentInEditor:
          hint: |-
            If true, allows unversioned content to be loaded by the editor.
        s.AsyncLoadingPrecachePriority:
          hint: |-
            Priority of asyncloading precache requests
        s.AsyncLoadingThreadEnabled:
          hint: |-
            Placeholder console variable, currently not used in runtime.
        s.AsyncLoadingTimeLimit:
          hint: |-
            Maximum amount of time to spend doing asynchronous loading (ms per frame).
        s.AsyncLoadingUseFullTimeLimit:
          hint: |-
            Whether to use the entire time limit even if blocked on I/O.
        s.ContinuouslyIncrementalGCWhileLevelsPendingPurge:
          hint: |-
            Whether to repeatedly kick off incremental GC when there are levels still waiting to be purged.
        s.DebugPackageNames:
          hint: |-
            Add debug breaks for all listed package names, also automatically added to s.VerbosePackageNames.
        s.EditorLoadPrecacheSizeKB:
          hint: |-
            Size, in KB, to precache when loading packages in the editor.
        s.EnforcePackageCompatibleVersionCheck:
          hint: |-
            If true, package loading will fail if the version stored in the package header is newer than the current engine version
        s.EventDrivenLoaderEnabled:
          hint: |-
            Placeholder console variable, currently not used in runtime.
        s.FlushStreamingOnExit:
          hint: |-
            Placeholder console variable, currently not used in runtime.
        s.ForceGCAfterLevelStreamedOut:
          hint: |-
            Whether to force a GC after levels are streamed out to instantly reclaim the memory at the expensive of a hitch.
        s.ForceRouteActorInitializeNextFrame:
          hint: |-
            Whether to force routing actor initialize phase in its own frame.
        s.ForceVerifyLevelsGotRemovedByGC:
          hint: |-
            Whether to force a verification of objects residing in a GC'ed level package (ignored in shipping builds).
        s.IoDispatcherBufferAlignment:
          hint: |-
            IoDispatcher read buffer alignment.
        s.IoDispatcherBufferMemoryMB:
          hint: |-
            IoDispatcher buffer memory size (in megabytes).
        s.IoDispatcherBufferSizeKB:
          hint: |-
            IoDispatcher read buffer size (in kilobytes).
        s.IoDispatcherCacheSizeMB:
          hint: |-
            IoDispatcher cache memory size (in megabytes).
        s.IoDispatcherDecompressionWorkerCount:
          hint: |-
            IoDispatcher decompression worker count.
        s.IoDispatcherMaintainSortingOnPriorityChange:
          hint: |-
            If s.IoDispatcherSortRequestsByOffset > 0 and this > 0, io dispatcher remembers the last file handle/offset read from even when switching priority levels.
        s.IoDispatcherMaxForwardSeekKB:
          hint: |-
            If s.IoDispatcherSortRequestsByOffset is enabled and this is > 0, if the next sequential read is further than this offset from the last one, read the oldest request instead
        s.IoDispatcherRequestLatencyCircuitBreakerMS:
          hint: |-
            If s.IoDispatcherSortRequestsByOffset is enabled and this is >0, if the oldest request has been in the queue for this long, read it instead of the most optimal read
        s.IoDispatcherSortRequestsByOffset:
          hint: |-
            If > 0, io dispatcher sorts the outstanding request queue by offset rather than sequence.
        s.IoDispatcherTocsEnablePerfectHashing:
          hint: |-
            Enable perfect hashmap lookups for iostore tocs
        s.LevelStreamingActorsUpdateTimeLimit:
          hint: |-
            Maximum allowed time to spend for actor registration steps during level streaming (ms per frame).
        s.LevelStreamingAddPrimitiveGranularity:
          hint: |-
            Batching granularity used to add primitives to scene in parallel when registering actor components during level streaming.
        s.LevelStreamingComponentsRegistrationGranularity:
          hint: |-
            Batching granularity used to register actor components during level streaming.
        s.LevelStreamingComponentsUnregistrationGranularity:
          hint: |-
            Batching granularity used to unregister actor components during level unstreaming.
        s.LevelStreamingRouteActorInitializationGranularity:
          hint: |-
            Batching granularity used to initialize actors during level streaming. If this is zero, we process all actors and stages in one pass.
        s.MaxIncomingRequestsToStall:
          hint: |-
            Controls the maximum number of unhandled IO requests before we stall the pak precacher to let the CPU catch up.
        s.MaxLevelRequestsAtOnceWhileInMatch:
          hint: |-
            When we're already loading this many levels and actively in match, don't allow any more requests until one of those completes.  Set to zero to disable.
        s.MaxPrecacheRequestsInFlight:
          hint: |-
            Controls the maximum amount of precache requests to have in flight.
        s.MaxReadyRequestsToStallMB:
          hint: |-
            Controls the maximum amount memory for unhandled IO requests before we stall the pak precacher to let the CPU catch up (in megabytes).
        s.MinBulkDataSizeForAsyncLoading:
          hint: |-
            Minimum time the time limit exceeded warning will be triggered by.
        s.PriorityAsyncLoadingExtraTime:
          hint: |-
            Additional time to spend asynchronous loading during a high priority load.
        s.PriorityLevelStreamingActorsUpdateExtraTime:
          hint: |-
            Additional time to spend on actor registration steps during a high priority load.
        s.ProcessPrestreamingRequests:
          hint: |-
            If non-zero, then we process prestreaming requests in cooked builds.
        s.RandomizeLoadOrder:
          hint: |-
            If > 0, will randomize the load order of pending packages using this seed instead of using the most efficient order. This can be used to find bugs.
        s.StorageServerIoDispatcherBatchSize:
          hint: |-
            StorageServer IoDispatcher batch size.
        s.StorageServerIoDispatcherMaxActiveBatchCount:
          hint: |-
            StorageServer IoDispatcher max submitted batches count.
        s.StreamableDelegateDelayFrames:
          hint: |-
            Number of frames to delay StreamableManager delegates 
        s.TimeLimitExceededMinTime:
          hint: |-
            Minimum time the time limit exceeded warning will be triggered by.
        s.TimeLimitExceededMultiplier:
          hint: |-
            Multiplier for time limit exceeded warning time threshold.
        s.UnregisterComponentsTimeLimit:
          hint: |-
            Maximum allowed time to spend for actor unregistration steps during level streaming (ms per frame). If this is zero then we don't timeslice
        s.UseBackgroundLevelStreaming:
          hint: |-
            Whether to allow background level streaming.
        s.UseLegacyRouteActorInitialization:
          hint: |-
            Toggle for whether to use the old non-granular implementation of route actor initialization.
        s.VerbosePackageNames:
          hint: |-
            Restrict verbose logging to listed package names.
        s.WarnIfTimeLimitExceeded:
          hint: |-
            Enables log warning if time limit for time-sliced package streaming has been exceeded.
    /Script/Engine.GarbageCollectionSettings:
      name: Garbage Collection
      options:
        gc.ActorClusteringEnabled:
          hint: |-
            Whether to allow levels to create actor clusters for GC.
        gc.AdditionalFinishDestroyTimeGC:
          hint: |-
            Additional wait time in seconds to allow FinishDestroy to complete.
        gc.AllowParallelGC:
          hint: |-
            Used to control parallel GC.
        gc.AssetClustreringEnabled:
          hint: |-
            If true, the engine will attempt to create clusters from asset files.
        gc.BlueprintClusteringEnabled:
          hint: |-
            Whether to allow Blueprint classes to create GC clusters.
        gc.CollectGarbageEveryFrame:
          hint: |-
            Used to debug garbage collection...Collects garbage every frame if the value is > 0.
        gc.CreateGCClusters:
          hint: |-
            If true, the engine will attempt to create clusters of objects for better garbage collection performance.
        gc.FlushStreamingOnGC:
          hint: |-
            If enabled, streaming will be flushed each time garbage collection is triggered.
        gc.ForceCollectGarbageEveryFrame:
          hint: |-
            If set to 1, the engine will force GC each frame.
        gc.GarbageReferenceTrackingEnabled:
          hint: |-
            If true, Garbage Collector will track and log unreleased garbage objects
        gc.IncrementalBeginDestroyEnabled:
          hint: |-
            If true, the engine will destroy objects incrementally using time limit each frame
        gc.IncrementalGCTimePerFrame:
          hint: |-
            How much time is allowed for incremental GC each frame in seconds
        gc.LowMemory.IncrementalGCTimePerFrame:
          hint: |-
            How much time is allowed for incremental GC each frame in seconds if memory is low
        gc.LowMemory.MemoryThresholdMB:
          hint: |-
            Memory threshold for low memory GC mode, in MB
        gc.LowMemory.TimeBetweenPurgingPendingKillObjects:
          hint: |-
            Time in seconds (game time) we should wait between purging object references to objects that are pending kill when we're low on memory
        gc.LowMemory.TimeBetweenPurgingPendingLevels:
          hint: |-
            Time in seconds (game time) we should wait between GC when we're low on memory and there are levels pending unload
        gc.MaxObjectsInEditor:
          hint: |-
            Placeholder console variable, currently not used in runtime.
        gc.MaxObjectsInGame:
          hint: |-
            Placeholder console variable, currently not used in runtime.
        gc.MaxObjectsNotConsideredByGC:
          hint: |-
            Placeholder console variable, currently not used in runtime.
        gc.MinDesiredObjectsPerSubTask:
          hint: |-
            Minimum number of objects to spawn a GC sub-task for.
        gc.MinGCClusterSize:
          hint: |-
            Minimum GC cluster size
        gc.MultithreadedDestructionEnabled:
          hint: |-
            If true, the engine will free objects' memory from a worker thread
        gc.NumRetriesBeforeForcingGC:
          hint: |-
            Maximum number of times GC can be skipped if worker threads are currently modifying UObject state.
        gc.PendingKillEnabled:
          hint: |-
            If true, objects marked as PendingKill will be automatically nulled and destroyed by Garbage Collector.
        gc.PerformGCWhileAsyncLoading:
          hint: |-
            Allow performing GC even if there's async loading in progress.
        gc.SizeOfPermanentObjectPool:
          hint: |-
            Placeholder console variable, currently not used in runtime.
        gc.StressTestGC:
          hint: |-
            If set to 1, the engine will attempt to trigger GC each frame while async loading.
        gc.TimeBetweenPurgingPendingKillObjects:
          hint: |-
            Time in seconds (game time) we should wait between purging object references to objects that are pending kill.
        gc.TimeBetweenPurgingPendingKillObjectsOnIdleServerMultiplier:
          hint: |-
            Multiplier to apply to time between purging pending kill objects when on an idle server.
        gc.UseDisregardForGCOnDedicatedServers:
          hint: |-
            If false, DisregardForGC will be disabled for dedicated servers.
        gc.VerifyGCObjectNames:
          hint: |-
            If true, the engine will verify if all FGCObject-derived classes define GetReferencerName() function overrides
        gc.VerifyUObjectsAreNotFGCObjects:
          hint: |-
            If true, the engine will throw a warning when it detects a UObject-derived class which also derives from FGCObject or any of its members is derived from FGCObject
    /Script/UnrealEd.CookerSettings:
      name: Cooker
      options:
        cook.AllowASTCHDRProfile:
          hint: |-
            whether to allow ASTC HDR profile, the hdr format is only supported on some devices, e.g. Apple A13, Mali-G72, Adreno (TM) 660
        cook.AllowCookedDataInEditorBuilds:
          hint: |-
            If true, allows cooked assets to be loaded in the editor.
        cook.ASTCTextureCompressor:
          hint: |-
            0: IntelISPC, 1: Arm
        Cook.display.diagnostictime:
          hint: |-
            Controls the time between cooker diagnostics messages.
        cook.display.repeattime:
          hint: |-
            Controls the time before the cooker will repeat the same progress message.
        cook.display.updatetime:
          hint: |-
            Controls the time before the cooker will send a new progress message.
        Cook.display.warnbusytime:
          hint: |-
            Controls the time before the cooker will issue a warning that there is a deadlock in a busy queue.
        cook.displaymode:
          hint: |-
            Controls the display for cooker logging of packages:
              0: No display
              1: Display the Count of packages remaining
              2: Display each package by Name
              3: Display Names and Count
              4: Display the Instigator of each package
              5: Display Instigators and Count
              6: Display Instigators and Names
              7: Display Instigators and Names and Count
        cook.PollAsyncPeriod:
          hint: |-
            Minimum time in seconds between PollPendingCookedPlatformDatas.
        Cook.retrybusytime:
          hint: |-
            Controls the time between retry attempts at save and load when the save and load queues are busy.

